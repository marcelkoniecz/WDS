
stm32-WDS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006760  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08006900  08006900  00016900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c10  08006c10  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006c10  08006c10  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c10  08006c10  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c10  08006c10  00016c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c14  08006c14  00016c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  200001dc  08006df4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08006df4  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101f9  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020f1  00000000  00000000  00030405  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000aa0  00000000  00000000  000324f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009a8  00000000  00000000  00032f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020bee  00000000  00000000  00033940  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bea3  00000000  00000000  0005452e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2478  00000000  00000000  000603d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122849  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c8  00000000  00000000  001228c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080068e8 	.word	0x080068e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080068e8 	.word	0x080068e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <BMA220_Init>:
 *      Author: marcel
 */
#include "bma220.h"
#include "i2c.h"

uint8_t BMA220_Init(BMA220 *dev, I2C_HandleTypeDef *i2cHandle){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
	dev->i2cHandle=hi2c1;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a39      	ldr	r2, [pc, #228]	; (8000cac <BMA220_Init+0xf4>)
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	4611      	mov	r1, r2
 8000bca:	234c      	movs	r3, #76	; 0x4c
 8000bcc:	461a      	mov	r2, r3
 8000bce:	f003 fb59 	bl	8004284 <memcpy>

	dev->accData[0]=0;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	dev->accData[1]=0;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	dev->accData[2]=0;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	//dev->accData[0]=0.3f;
	//dev->accData[1]=0.3f;
	//dev->accData[2]=0.3f;

	uint8_t errNum=0; //Liczba bledow
 8000bea:	2300      	movs	r3, #0
 8000bec:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;

	uint8_t regData;

	//Checking chip id
	status=BMA220_ReadRegister(dev,BMA220_REG_CHIP_ID,&regData);
 8000bee:	f107 030d 	add.w	r3, r7, #13
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 f8b2 	bl	8000d60 <BMA220_ReadRegister>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	73bb      	strb	r3, [r7, #14]
	errNum+=(status!=HAL_OK);
 8000c00:	7bbb      	ldrb	r3, [r7, #14]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	bf14      	ite	ne
 8000c06:	2301      	movne	r3, #1
 8000c08:	2300      	moveq	r3, #0
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	4413      	add	r3, r2
 8000c12:	73fb      	strb	r3, [r7, #15]

	if(regData!=CHIP_ID)
 8000c14:	7b7b      	ldrb	r3, [r7, #13]
 8000c16:	2bdd      	cmp	r3, #221	; 0xdd
 8000c18:	d001      	beq.n	8000c1e <BMA220_Init+0x66>
		return 255;
 8000c1a:	23ff      	movs	r3, #255	; 0xff
 8000c1c:	e042      	b.n	8000ca4 <BMA220_Init+0xec>

	status =BMA220_ReadRegister(dev,BMA220_REG_REV_ID,&regData);
 8000c1e:	f107 030d 	add.w	r3, r7, #13
 8000c22:	461a      	mov	r2, r3
 8000c24:	2102      	movs	r1, #2
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 f89a 	bl	8000d60 <BMA220_ReadRegister>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	73bb      	strb	r3, [r7, #14]
	errNum+=(status!=HAL_OK);
 8000c30:	7bbb      	ldrb	r3, [r7, #14]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	bf14      	ite	ne
 8000c36:	2301      	movne	r3, #1
 8000c38:	2300      	moveq	r3, #0
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	4413      	add	r3, r2
 8000c42:	73fb      	strb	r3, [r7, #15]

	if(regData!=REVISION_ID)
 8000c44:	7b7b      	ldrb	r3, [r7, #13]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <BMA220_Init+0x96>
		return 255;
 8000c4a:	23ff      	movs	r3, #255	; 0xff
 8000c4c:	e02a      	b.n	8000ca4 <BMA220_Init+0xec>

	//Filter

	regData=0x3;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	737b      	strb	r3, [r7, #13]
	status =BMA220_ReadRegister(dev,0x20,&regData);
 8000c52:	f107 030d 	add.w	r3, r7, #13
 8000c56:	461a      	mov	r2, r3
 8000c58:	2120      	movs	r1, #32
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f000 f880 	bl	8000d60 <BMA220_ReadRegister>
 8000c60:	4603      	mov	r3, r0
 8000c62:	73bb      	strb	r3, [r7, #14]
	errNum+=(status!=HAL_OK);
 8000c64:	7bbb      	ldrb	r3, [r7, #14]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	bf14      	ite	ne
 8000c6a:	2301      	movne	r3, #1
 8000c6c:	2300      	moveq	r3, #0
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	461a      	mov	r2, r3
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	4413      	add	r3, r2
 8000c76:	73fb      	strb	r3, [r7, #15]

	//Setting 4g

	regData=G4_MES;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	737b      	strb	r3, [r7, #13]
	status =BMA220_ReadRegister(dev,0x22,&regData);
 8000c7c:	f107 030d 	add.w	r3, r7, #13
 8000c80:	461a      	mov	r2, r3
 8000c82:	2122      	movs	r1, #34	; 0x22
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f000 f86b 	bl	8000d60 <BMA220_ReadRegister>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	73bb      	strb	r3, [r7, #14]
	errNum+=(status!=HAL_OK);
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	bf14      	ite	ne
 8000c94:	2301      	movne	r3, #1
 8000c96:	2300      	moveq	r3, #0
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	73fb      	strb	r3, [r7, #15]

	return errNum;
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000204 	.word	0x20000204

08000cb0 <BMA220_ReadAcc>:

HAL_StatusTypeDef BMA220_ReadAcc(BMA220 *dev){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

	int8_t data;
	uint8_t status;
	uint8_t errNum;
	status=BMA220_ReadRegister(dev,BMA220_REG_ACC_X,&data);
 8000cb8:	f107 030d 	add.w	r3, r7, #13
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f000 f84d 	bl	8000d60 <BMA220_ReadRegister>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	73fb      	strb	r3, [r7, #15]
	errNum+=(status!=HAL_OK);
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	bf14      	ite	ne
 8000cd0:	2301      	movne	r3, #1
 8000cd2:	2300      	moveq	r3, #0
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	7bbb      	ldrb	r3, [r7, #14]
 8000cda:	4413      	add	r3, r2
 8000cdc:	73bb      	strb	r3, [r7, #14]
//	dev->accData[0]=data*0.0625*9.81;
	dev->accData[0]=(data>>2);
 8000cde:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ce2:	109b      	asrs	r3, r3, #2
 8000ce4:	b25a      	sxtb	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	//dev->accData[0]=data;
	status=BMA220_ReadRegister(dev,BMA220_REG_ACC_Y,&data);
 8000cec:	f107 030d 	add.w	r3, r7, #13
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	2106      	movs	r1, #6
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f000 f833 	bl	8000d60 <BMA220_ReadRegister>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	73fb      	strb	r3, [r7, #15]
	errNum+=(status!=HAL_OK);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	bf14      	ite	ne
 8000d04:	2301      	movne	r3, #1
 8000d06:	2300      	moveq	r3, #0
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	7bbb      	ldrb	r3, [r7, #14]
 8000d0e:	4413      	add	r3, r2
 8000d10:	73bb      	strb	r3, [r7, #14]
//	dev->accData[1]=data*0.0625*9.81;
	dev->accData[1]=(data>>2);
 8000d12:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d16:	109b      	asrs	r3, r3, #2
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	//dev->accData[1]=data;
	status=BMA220_ReadRegister(dev,BMA220_REG_ACC_Z,&data);
 8000d20:	f107 030d 	add.w	r3, r7, #13
 8000d24:	461a      	mov	r2, r3
 8000d26:	2108      	movs	r1, #8
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f000 f819 	bl	8000d60 <BMA220_ReadRegister>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	73fb      	strb	r3, [r7, #15]
	errNum+=(status!=HAL_OK);
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	bf14      	ite	ne
 8000d38:	2301      	movne	r3, #1
 8000d3a:	2300      	moveq	r3, #0
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	461a      	mov	r2, r3
 8000d40:	7bbb      	ldrb	r3, [r7, #14]
 8000d42:	4413      	add	r3, r2
 8000d44:	73bb      	strb	r3, [r7, #14]
//	dev->accData[2]=data*0.0625*9.81;
	dev->accData[2]=(data>>2);
 8000d46:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d4a:	109b      	asrs	r3, r3, #2
 8000d4c:	b25a      	sxtb	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	//dev->accData[2]=data;
	return errNum;
 8000d54:	7bbb      	ldrb	r3, [r7, #14]

}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <BMA220_ReadRegister>:


HAL_StatusTypeDef BMA220_ReadRegister(BMA220 *dev, uint8_t reg, uint8_t *data){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af04      	add	r7, sp, #16
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	607a      	str	r2, [r7, #4]
 8000d6c:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(&hi2c1, BMA220_I2C_ADDR,reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000d6e:	7afb      	ldrb	r3, [r7, #11]
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d76:	9302      	str	r3, [sp, #8]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	9301      	str	r3, [sp, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2301      	movs	r3, #1
 8000d82:	2114      	movs	r1, #20
 8000d84:	4803      	ldr	r0, [pc, #12]	; (8000d94 <BMA220_ReadRegister+0x34>)
 8000d86:	f000 fef7 	bl	8001b78 <HAL_I2C_Mem_Read>
 8000d8a:	4603      	mov	r3, r0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000204 	.word	0x20000204

08000d98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	4b35      	ldr	r3, [pc, #212]	; (8000e84 <MX_GPIO_Init+0xec>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	4a34      	ldr	r2, [pc, #208]	; (8000e84 <MX_GPIO_Init+0xec>)
 8000db4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000db8:	6153      	str	r3, [r2, #20]
 8000dba:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <MX_GPIO_Init+0xec>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dc6:	4b2f      	ldr	r3, [pc, #188]	; (8000e84 <MX_GPIO_Init+0xec>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	4a2e      	ldr	r2, [pc, #184]	; (8000e84 <MX_GPIO_Init+0xec>)
 8000dcc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dd0:	6153      	str	r3, [r2, #20]
 8000dd2:	4b2c      	ldr	r3, [pc, #176]	; (8000e84 <MX_GPIO_Init+0xec>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <MX_GPIO_Init+0xec>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	4a28      	ldr	r2, [pc, #160]	; (8000e84 <MX_GPIO_Init+0xec>)
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	6153      	str	r3, [r2, #20]
 8000dea:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <MX_GPIO_Init+0xec>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <MX_GPIO_Init+0xec>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	4a22      	ldr	r2, [pc, #136]	; (8000e84 <MX_GPIO_Init+0xec>)
 8000dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e00:	6153      	str	r3, [r2, #20]
 8000e02:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <MX_GPIO_Init+0xec>)
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2120      	movs	r1, #32
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e16:	f000 fe07 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2110      	movs	r1, #16
 8000e1e:	481a      	ldr	r0, [pc, #104]	; (8000e88 <MX_GPIO_Init+0xf0>)
 8000e20:	f000 fe02 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e2a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4814      	ldr	r0, [pc, #80]	; (8000e8c <MX_GPIO_Init+0xf4>)
 8000e3c:	f000 fc6a 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e40:	2320      	movs	r3, #32
 8000e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5a:	f000 fc5b 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e5e:	2310      	movs	r3, #16
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_GPIO_Init+0xf0>)
 8000e76:	f000 fc4d 	bl	8001714 <HAL_GPIO_Init>

}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	; 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40021000 	.word	0x40021000
 8000e88:	48000400 	.word	0x48000400
 8000e8c:	48000800 	.word	0x48000800

08000e90 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_I2C1_Init+0x74>)
 8000e96:	4a1c      	ldr	r2, [pc, #112]	; (8000f08 <MX_I2C1_Init+0x78>)
 8000e98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_I2C1_Init+0x74>)
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <MX_I2C1_Init+0x7c>)
 8000e9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_I2C1_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <MX_I2C1_Init+0x74>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <MX_I2C1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_I2C1_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <MX_I2C1_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_I2C1_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_I2C1_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eca:	480e      	ldr	r0, [pc, #56]	; (8000f04 <MX_I2C1_Init+0x74>)
 8000ecc:	f000 fdc4 	bl	8001a58 <HAL_I2C_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ed6:	f000 f909 	bl	80010ec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eda:	2100      	movs	r1, #0
 8000edc:	4809      	ldr	r0, [pc, #36]	; (8000f04 <MX_I2C1_Init+0x74>)
 8000ede:	f001 f93d 	bl	800215c <HAL_I2CEx_ConfigAnalogFilter>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ee8:	f000 f900 	bl	80010ec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000eec:	2100      	movs	r1, #0
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_I2C1_Init+0x74>)
 8000ef0:	f001 f97f 	bl	80021f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000efa:	f000 f8f7 	bl	80010ec <Error_Handler>
  }

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000204 	.word	0x20000204
 8000f08:	40005400 	.word	0x40005400
 8000f0c:	2000090e 	.word	0x2000090e

08000f10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a26      	ldr	r2, [pc, #152]	; (8000fc8 <HAL_I2C_MspInit+0xb8>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d145      	bne.n	8000fbe <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <HAL_I2C_MspInit+0xbc>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	4a25      	ldr	r2, [pc, #148]	; (8000fcc <HAL_I2C_MspInit+0xbc>)
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	6153      	str	r3, [r2, #20]
 8000f3e:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <HAL_I2C_MspInit+0xbc>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <HAL_I2C_MspInit+0xbc>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	4a1f      	ldr	r2, [pc, #124]	; (8000fcc <HAL_I2C_MspInit+0xbc>)
 8000f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f54:	6153      	str	r3, [r2, #20]
 8000f56:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <HAL_I2C_MspInit+0xbc>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f68:	2312      	movs	r3, #18
 8000f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f74:	2304      	movs	r3, #4
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f82:	f000 fbc7 	bl	8001714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f8a:	2312      	movs	r3, #18
 8000f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f96:	2304      	movs	r3, #4
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <HAL_I2C_MspInit+0xc0>)
 8000fa2:	f000 fbb7 	bl	8001714 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_I2C_MspInit+0xbc>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <HAL_I2C_MspInit+0xbc>)
 8000fac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fb0:	61d3      	str	r3, [r2, #28]
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_I2C_MspInit+0xbc>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	; 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40005400 	.word	0x40005400
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	48000400 	.word	0x48000400

08000fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd8:	f000 fa2e 	bl	8001438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fdc:	f000 f826 	bl	800102c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe0:	f7ff feda 	bl	8000d98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fe4:	f000 f976 	bl	80012d4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fe8:	f7ff ff52 	bl	8000e90 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //BMA220_init();
  BMA220_Init(&acc, &hi2c1);
 8000fec:	490c      	ldr	r1, [pc, #48]	; (8001020 <main+0x4c>)
 8000fee:	480d      	ldr	r0, [pc, #52]	; (8001024 <main+0x50>)
 8000ff0:	f7ff fde2 	bl	8000bb8 <BMA220_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMA220_ReadAcc(&acc);
 8000ff4:	480b      	ldr	r0, [pc, #44]	; (8001024 <main+0x50>)
 8000ff6:	f7ff fe5b 	bl	8000cb0 <BMA220_ReadAcc>
	 printf("X = %d, Y= %d, Z= %d \n\r",acc.accData[0],acc.accData[1],acc.accData[2]);
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <main+0x50>)
 8000ffc:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8001000:	4619      	mov	r1, r3
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <main+0x50>)
 8001004:	f993 304d 	ldrsb.w	r3, [r3, #77]	; 0x4d
 8001008:	461a      	mov	r2, r3
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <main+0x50>)
 800100c:	f993 304e 	ldrsb.w	r3, [r3, #78]	; 0x4e
 8001010:	4805      	ldr	r0, [pc, #20]	; (8001028 <main+0x54>)
 8001012:	f003 fda7 	bl	8004b64 <iprintf>
	  // printf("X  d Y d Z d/n");
	 HAL_Delay(1000);
 8001016:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800101a:	f000 fa73 	bl	8001504 <HAL_Delay>
	  BMA220_ReadAcc(&acc);
 800101e:	e7e9      	b.n	8000ff4 <main+0x20>
 8001020:	20000204 	.word	0x20000204
 8001024:	20000250 	.word	0x20000250
 8001028:	08006900 	.word	0x08006900

0800102c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b0a6      	sub	sp, #152	; 0x98
 8001030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001032:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001036:	2228      	movs	r2, #40	; 0x28
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f003 f92d 	bl	800429a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001040:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2258      	movs	r2, #88	; 0x58
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f003 f91f 	bl	800429a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800105c:	2302      	movs	r3, #2
 800105e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001060:	2301      	movs	r3, #1
 8001062:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001064:	2310      	movs	r3, #16
 8001066:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106a:	2302      	movs	r3, #2
 800106c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001070:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001074:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001078:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800107c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001086:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800108a:	4618      	mov	r0, r3
 800108c:	f001 f8fe 	bl	800228c <HAL_RCC_OscConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001096:	f000 f829 	bl	80010ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109a:	230f      	movs	r3, #15
 800109c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109e:	2302      	movs	r3, #2
 80010a0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010b4:	2102      	movs	r1, #2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 fffe 	bl	80030b8 <HAL_RCC_ClockConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010c2:	f000 f813 	bl	80010ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80010c6:	2322      	movs	r3, #34	; 0x22
 80010c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4618      	mov	r0, r3
 80010d6:	f002 fa27 	bl	8003528 <HAL_RCCEx_PeriphCLKConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80010e0:	f000 f804 	bl	80010ec <Error_Handler>
  }
}
 80010e4:	bf00      	nop
 80010e6:	3798      	adds	r7, #152	; 0x98
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_MspInit+0x44>)
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <HAL_MspInit+0x44>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6193      	str	r3, [r2, #24]
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_MspInit+0x44>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_MspInit+0x44>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	4a08      	ldr	r2, [pc, #32]	; (8001140 <HAL_MspInit+0x44>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001124:	61d3      	str	r3, [r2, #28]
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_MspInit+0x44>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001132:	2007      	movs	r0, #7
 8001134:	f000 faba 	bl	80016ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40021000 	.word	0x40021000

08001144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001156:	e7fe      	b.n	8001156 <HardFault_Handler+0x4>

08001158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800115c:	e7fe      	b.n	800115c <MemManage_Handler+0x4>

0800115e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <BusFault_Handler+0x4>

08001164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <UsageFault_Handler+0x4>

0800116a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001198:	f000 f994 	bl	80014c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}

080011a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	e00a      	b.n	80011c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011b2:	f3af 8000 	nop.w
 80011b6:	4601      	mov	r1, r0
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	60ba      	str	r2, [r7, #8]
 80011be:	b2ca      	uxtb	r2, r1
 80011c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	3301      	adds	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dbf0      	blt.n	80011b2 <_read+0x12>
	}

return len;
 80011d0:	687b      	ldr	r3, [r7, #4]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <_close>:
	}
	return len;
}

int _close(int file)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
	return -1;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001202:	605a      	str	r2, [r3, #4]
	return 0;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <_isatty>:

int _isatty(int file)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
	return 1;
 800121a:	2301      	movs	r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
	return 0;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800124c:	4a14      	ldr	r2, [pc, #80]	; (80012a0 <_sbrk+0x5c>)
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <_sbrk+0x60>)
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <_sbrk+0x64>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <_sbrk+0x64>)
 8001262:	4a12      	ldr	r2, [pc, #72]	; (80012ac <_sbrk+0x68>)
 8001264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <_sbrk+0x64>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	429a      	cmp	r2, r3
 8001272:	d207      	bcs.n	8001284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001274:	f002 ffdc 	bl	8004230 <__errno>
 8001278:	4602      	mov	r2, r0
 800127a:	230c      	movs	r3, #12
 800127c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800127e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001282:	e009      	b.n	8001298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <_sbrk+0x64>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <_sbrk+0x64>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <_sbrk+0x64>)
 8001294:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001296:	68fb      	ldr	r3, [r7, #12]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20010000 	.word	0x20010000
 80012a4:	00000400 	.word	0x00000400
 80012a8:	200001f8 	.word	0x200001f8
 80012ac:	20000330 	.word	0x20000330

080012b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <SystemInit+0x20>)
 80012b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ba:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <SystemInit+0x20>)
 80012bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <MX_USART2_UART_Init+0x58>)
 80012da:	4a15      	ldr	r2, [pc, #84]	; (8001330 <MX_USART2_UART_Init+0x5c>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <MX_USART2_UART_Init+0x58>)
 80012e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_USART2_UART_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_USART2_UART_Init+0x58>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <MX_USART2_UART_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_USART2_UART_Init+0x58>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <MX_USART2_UART_Init+0x58>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_USART2_UART_Init+0x58>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <MX_USART2_UART_Init+0x58>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_USART2_UART_Init+0x58>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_USART2_UART_Init+0x58>)
 8001318:	f002 fb24 	bl	8003964 <HAL_UART_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001322:	f7ff fee3 	bl	80010ec <Error_Handler>
  }

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200002a0 	.word	0x200002a0
 8001330:	40004400 	.word	0x40004400

08001334 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <HAL_UART_MspInit+0x7c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d128      	bne.n	80013a8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001356:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <HAL_UART_MspInit+0x80>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	4a16      	ldr	r2, [pc, #88]	; (80013b4 <HAL_UART_MspInit+0x80>)
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	61d3      	str	r3, [r2, #28]
 8001362:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <HAL_UART_MspInit+0x80>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HAL_UART_MspInit+0x80>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <HAL_UART_MspInit+0x80>)
 8001374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001378:	6153      	str	r3, [r2, #20]
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_UART_MspInit+0x80>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001386:	230c      	movs	r3, #12
 8001388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001396:	2307      	movs	r3, #7
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a4:	f000 f9b6 	bl	8001714 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013a8:	bf00      	nop
 80013aa:	3728      	adds	r7, #40	; 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40004400 	.word	0x40004400
 80013b4:	40021000 	.word	0x40021000

080013b8 <_write>:
  }
}

/* USER CODE BEGIN 1 */

int _write(int file,char *ptr,int len){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 1000);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	4804      	ldr	r0, [pc, #16]	; (80013e0 <_write+0x28>)
 80013d0:	f002 fb16 	bl	8003a00 <HAL_UART_Transmit>
	return len;
 80013d4:	687b      	ldr	r3, [r7, #4]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200002a0 	.word	0x200002a0

080013e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800141c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e8:	480d      	ldr	r0, [pc, #52]	; (8001420 <LoopForever+0x6>)
  ldr r1, =_edata
 80013ea:	490e      	ldr	r1, [pc, #56]	; (8001424 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013ec:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <LoopForever+0xe>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a0b      	ldr	r2, [pc, #44]	; (800142c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001400:	4c0b      	ldr	r4, [pc, #44]	; (8001430 <LoopForever+0x16>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800140e:	f7ff ff4f 	bl	80012b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001412:	f002 ff13 	bl	800423c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001416:	f7ff fddd 	bl	8000fd4 <main>

0800141a <LoopForever>:

LoopForever:
    b LoopForever
 800141a:	e7fe      	b.n	800141a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800141c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001424:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001428:	08006c18 	.word	0x08006c18
  ldr r2, =_sbss
 800142c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001430:	2000032c 	.word	0x2000032c

08001434 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001434:	e7fe      	b.n	8001434 <ADC1_2_IRQHandler>
	...

08001438 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_Init+0x28>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a07      	ldr	r2, [pc, #28]	; (8001460 <HAL_Init+0x28>)
 8001442:	f043 0310 	orr.w	r3, r3, #16
 8001446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001448:	2003      	movs	r0, #3
 800144a:	f000 f92f 	bl	80016ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800144e:	2000      	movs	r0, #0
 8001450:	f000 f808 	bl	8001464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001454:	f7ff fe52 	bl	80010fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40022000 	.word	0x40022000

08001464 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_InitTick+0x54>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_InitTick+0x58>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	fbb3 f3f1 	udiv	r3, r3, r1
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f939 	bl	80016fa <HAL_SYSTICK_Config>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e00e      	b.n	80014b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b0f      	cmp	r3, #15
 8001496:	d80a      	bhi.n	80014ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001498:	2200      	movs	r2, #0
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014a0:	f000 f90f 	bl	80016c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a4:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <HAL_InitTick+0x5c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e000      	b.n	80014b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000000 	.word	0x20000000
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20000004 	.word	0x20000004

080014c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_IncTick+0x20>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_IncTick+0x24>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <HAL_IncTick+0x24>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008
 80014e8:	20000324 	.word	0x20000324

080014ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_GetTick+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000324 	.word	0x20000324

08001504 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff ffee 	bl	80014ec <HAL_GetTick>
 8001510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800151c:	d005      	beq.n	800152a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_Delay+0x40>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800152a:	bf00      	nop
 800152c:	f7ff ffde 	bl	80014ec <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f7      	bhi.n	800152c <HAL_Delay+0x28>
  {
  }
}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000008 	.word	0x20000008

08001548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <__NVIC_SetPriorityGrouping+0x44>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001564:	4013      	ands	r3, r2
 8001566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157a:	4a04      	ldr	r2, [pc, #16]	; (800158c <__NVIC_SetPriorityGrouping+0x44>)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	60d3      	str	r3, [r2, #12]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	0a1b      	lsrs	r3, r3, #8
 800159a:	f003 0307 	and.w	r3, r3, #7
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	6039      	str	r1, [r7, #0]
 80015b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	db0a      	blt.n	80015d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	490c      	ldr	r1, [pc, #48]	; (80015f8 <__NVIC_SetPriority+0x4c>)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	0112      	lsls	r2, r2, #4
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	440b      	add	r3, r1
 80015d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d4:	e00a      	b.n	80015ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4908      	ldr	r1, [pc, #32]	; (80015fc <__NVIC_SetPriority+0x50>)
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	3b04      	subs	r3, #4
 80015e4:	0112      	lsls	r2, r2, #4
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	440b      	add	r3, r1
 80015ea:	761a      	strb	r2, [r3, #24]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000e100 	.word	0xe000e100
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001600:	b480      	push	{r7}
 8001602:	b089      	sub	sp, #36	; 0x24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f1c3 0307 	rsb	r3, r3, #7
 800161a:	2b04      	cmp	r3, #4
 800161c:	bf28      	it	cs
 800161e:	2304      	movcs	r3, #4
 8001620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3304      	adds	r3, #4
 8001626:	2b06      	cmp	r3, #6
 8001628:	d902      	bls.n	8001630 <NVIC_EncodePriority+0x30>
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3b03      	subs	r3, #3
 800162e:	e000      	b.n	8001632 <NVIC_EncodePriority+0x32>
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43da      	mvns	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	401a      	ands	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001648:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	fa01 f303 	lsl.w	r3, r1, r3
 8001652:	43d9      	mvns	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	4313      	orrs	r3, r2
         );
}
 800165a:	4618      	mov	r0, r3
 800165c:	3724      	adds	r7, #36	; 0x24
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001678:	d301      	bcc.n	800167e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167a:	2301      	movs	r3, #1
 800167c:	e00f      	b.n	800169e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167e:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <SysTick_Config+0x40>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001686:	210f      	movs	r1, #15
 8001688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800168c:	f7ff ff8e 	bl	80015ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <SysTick_Config+0x40>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001696:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <SysTick_Config+0x40>)
 8001698:	2207      	movs	r2, #7
 800169a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	e000e010 	.word	0xe000e010

080016ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ff47 	bl	8001548 <__NVIC_SetPriorityGrouping>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b086      	sub	sp, #24
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d4:	f7ff ff5c 	bl	8001590 <__NVIC_GetPriorityGrouping>
 80016d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	6978      	ldr	r0, [r7, #20]
 80016e0:	f7ff ff8e 	bl	8001600 <NVIC_EncodePriority>
 80016e4:	4602      	mov	r2, r0
 80016e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff5d 	bl	80015ac <__NVIC_SetPriority>
}
 80016f2:	bf00      	nop
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ffb0 	bl	8001668 <SysTick_Config>
 8001708:	4603      	mov	r3, r0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001722:	e160      	b.n	80019e6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	2101      	movs	r1, #1
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	fa01 f303 	lsl.w	r3, r1, r3
 8001730:	4013      	ands	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 8152 	beq.w	80019e0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	2b01      	cmp	r3, #1
 8001746:	d005      	beq.n	8001754 <HAL_GPIO_Init+0x40>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d130      	bne.n	80017b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	2203      	movs	r2, #3
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4313      	orrs	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800178a:	2201      	movs	r2, #1
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	091b      	lsrs	r3, r3, #4
 80017a0:	f003 0201 	and.w	r2, r3, #1
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d017      	beq.n	80017f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	2203      	movs	r2, #3
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4013      	ands	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d123      	bne.n	8001846 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	08da      	lsrs	r2, r3, #3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3208      	adds	r2, #8
 8001806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800180a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	220f      	movs	r2, #15
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	691a      	ldr	r2, [r3, #16]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	08da      	lsrs	r2, r3, #3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3208      	adds	r2, #8
 8001840:	6939      	ldr	r1, [r7, #16]
 8001842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0203 	and.w	r2, r3, #3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 80ac 	beq.w	80019e0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001888:	4b5e      	ldr	r3, [pc, #376]	; (8001a04 <HAL_GPIO_Init+0x2f0>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a5d      	ldr	r2, [pc, #372]	; (8001a04 <HAL_GPIO_Init+0x2f0>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b5b      	ldr	r3, [pc, #364]	; (8001a04 <HAL_GPIO_Init+0x2f0>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018a0:	4a59      	ldr	r2, [pc, #356]	; (8001a08 <HAL_GPIO_Init+0x2f4>)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	3302      	adds	r3, #2
 80018a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	220f      	movs	r2, #15
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018ca:	d025      	beq.n	8001918 <HAL_GPIO_Init+0x204>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a4f      	ldr	r2, [pc, #316]	; (8001a0c <HAL_GPIO_Init+0x2f8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d01f      	beq.n	8001914 <HAL_GPIO_Init+0x200>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a4e      	ldr	r2, [pc, #312]	; (8001a10 <HAL_GPIO_Init+0x2fc>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d019      	beq.n	8001910 <HAL_GPIO_Init+0x1fc>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a4d      	ldr	r2, [pc, #308]	; (8001a14 <HAL_GPIO_Init+0x300>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d013      	beq.n	800190c <HAL_GPIO_Init+0x1f8>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a4c      	ldr	r2, [pc, #304]	; (8001a18 <HAL_GPIO_Init+0x304>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d00d      	beq.n	8001908 <HAL_GPIO_Init+0x1f4>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a4b      	ldr	r2, [pc, #300]	; (8001a1c <HAL_GPIO_Init+0x308>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d007      	beq.n	8001904 <HAL_GPIO_Init+0x1f0>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a4a      	ldr	r2, [pc, #296]	; (8001a20 <HAL_GPIO_Init+0x30c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d101      	bne.n	8001900 <HAL_GPIO_Init+0x1ec>
 80018fc:	2306      	movs	r3, #6
 80018fe:	e00c      	b.n	800191a <HAL_GPIO_Init+0x206>
 8001900:	2307      	movs	r3, #7
 8001902:	e00a      	b.n	800191a <HAL_GPIO_Init+0x206>
 8001904:	2305      	movs	r3, #5
 8001906:	e008      	b.n	800191a <HAL_GPIO_Init+0x206>
 8001908:	2304      	movs	r3, #4
 800190a:	e006      	b.n	800191a <HAL_GPIO_Init+0x206>
 800190c:	2303      	movs	r3, #3
 800190e:	e004      	b.n	800191a <HAL_GPIO_Init+0x206>
 8001910:	2302      	movs	r3, #2
 8001912:	e002      	b.n	800191a <HAL_GPIO_Init+0x206>
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <HAL_GPIO_Init+0x206>
 8001918:	2300      	movs	r3, #0
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	f002 0203 	and.w	r2, r2, #3
 8001920:	0092      	lsls	r2, r2, #2
 8001922:	4093      	lsls	r3, r2
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800192a:	4937      	ldr	r1, [pc, #220]	; (8001a08 <HAL_GPIO_Init+0x2f4>)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3302      	adds	r3, #2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001938:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <HAL_GPIO_Init+0x310>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	43db      	mvns	r3, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800195c:	4a31      	ldr	r2, [pc, #196]	; (8001a24 <HAL_GPIO_Init+0x310>)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001962:	4b30      	ldr	r3, [pc, #192]	; (8001a24 <HAL_GPIO_Init+0x310>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	43db      	mvns	r3, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001986:	4a27      	ldr	r2, [pc, #156]	; (8001a24 <HAL_GPIO_Init+0x310>)
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800198c:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <HAL_GPIO_Init+0x310>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	43db      	mvns	r3, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019b0:	4a1c      	ldr	r2, [pc, #112]	; (8001a24 <HAL_GPIO_Init+0x310>)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019b6:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <HAL_GPIO_Init+0x310>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019da:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <HAL_GPIO_Init+0x310>)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	3301      	adds	r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	fa22 f303 	lsr.w	r3, r2, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f47f ae97 	bne.w	8001724 <HAL_GPIO_Init+0x10>
  }
}
 80019f6:	bf00      	nop
 80019f8:	371c      	adds	r7, #28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40010000 	.word	0x40010000
 8001a0c:	48000400 	.word	0x48000400
 8001a10:	48000800 	.word	0x48000800
 8001a14:	48000c00 	.word	0x48000c00
 8001a18:	48001000 	.word	0x48001000
 8001a1c:	48001400 	.word	0x48001400
 8001a20:	48001800 	.word	0x48001800
 8001a24:	40010400 	.word	0x40010400

08001a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
 8001a34:	4613      	mov	r3, r2
 8001a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a38:	787b      	ldrb	r3, [r7, #1]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a44:	e002      	b.n	8001a4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a46:	887a      	ldrh	r2, [r7, #2]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e081      	b.n	8001b6e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d106      	bne.n	8001a84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff fa46 	bl	8000f10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2224      	movs	r2, #36	; 0x24
 8001a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0201 	bic.w	r2, r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aa8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ab8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d107      	bne.n	8001ad2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	e006      	b.n	8001ae0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ade:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d104      	bne.n	8001af2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001af0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691a      	ldr	r2, [r3, #16]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69d9      	ldr	r1, [r3, #28]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a1a      	ldr	r2, [r3, #32]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	4608      	mov	r0, r1
 8001b82:	4611      	mov	r1, r2
 8001b84:	461a      	mov	r2, r3
 8001b86:	4603      	mov	r3, r0
 8001b88:	817b      	strh	r3, [r7, #10]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	813b      	strh	r3, [r7, #8]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b20      	cmp	r3, #32
 8001b9c:	f040 80fd 	bne.w	8001d9a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <HAL_I2C_Mem_Read+0x34>
 8001ba6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d105      	bne.n	8001bb8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0f1      	b.n	8001d9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d101      	bne.n	8001bc6 <HAL_I2C_Mem_Read+0x4e>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e0ea      	b.n	8001d9c <HAL_I2C_Mem_Read+0x224>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bce:	f7ff fc8d 	bl	80014ec <HAL_GetTick>
 8001bd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2319      	movs	r3, #25
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f000 f95b 	bl	8001e9c <I2C_WaitOnFlagUntilTimeout>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0d5      	b.n	8001d9c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2222      	movs	r2, #34	; 0x22
 8001bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2240      	movs	r2, #64	; 0x40
 8001bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a3a      	ldr	r2, [r7, #32]
 8001c0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c18:	88f8      	ldrh	r0, [r7, #6]
 8001c1a:	893a      	ldrh	r2, [r7, #8]
 8001c1c:	8979      	ldrh	r1, [r7, #10]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	4603      	mov	r3, r0
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 f8bf 	bl	8001dac <I2C_RequestMemoryRead>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0ad      	b.n	8001d9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	2bff      	cmp	r3, #255	; 0xff
 8001c48:	d90e      	bls.n	8001c68 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	22ff      	movs	r2, #255	; 0xff
 8001c4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	8979      	ldrh	r1, [r7, #10]
 8001c58:	4b52      	ldr	r3, [pc, #328]	; (8001da4 <HAL_I2C_Mem_Read+0x22c>)
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 fa4d 	bl	8002100 <I2C_TransferConfig>
 8001c66:	e00f      	b.n	8001c88 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	8979      	ldrh	r1, [r7, #10]
 8001c7a:	4b4a      	ldr	r3, [pc, #296]	; (8001da4 <HAL_I2C_Mem_Read+0x22c>)
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 fa3c 	bl	8002100 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2104      	movs	r1, #4
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f902 	bl	8001e9c <I2C_WaitOnFlagUntilTimeout>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e07c      	b.n	8001d9c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	1c5a      	adds	r2, r3, #1
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d034      	beq.n	8001d48 <HAL_I2C_Mem_Read+0x1d0>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d130      	bne.n	8001d48 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cec:	2200      	movs	r2, #0
 8001cee:	2180      	movs	r1, #128	; 0x80
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 f8d3 	bl	8001e9c <I2C_WaitOnFlagUntilTimeout>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e04d      	b.n	8001d9c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	2bff      	cmp	r3, #255	; 0xff
 8001d08:	d90e      	bls.n	8001d28 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	22ff      	movs	r2, #255	; 0xff
 8001d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	8979      	ldrh	r1, [r7, #10]
 8001d18:	2300      	movs	r3, #0
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f000 f9ed 	bl	8002100 <I2C_TransferConfig>
 8001d26:	e00f      	b.n	8001d48 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	8979      	ldrh	r1, [r7, #10]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f9dc 	bl	8002100 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d19a      	bne.n	8001c88 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 f920 	bl	8001f9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e01a      	b.n	8001d9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6859      	ldr	r1, [r3, #4]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_I2C_Mem_Read+0x230>)
 8001d7a:	400b      	ands	r3, r1
 8001d7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2220      	movs	r2, #32
 8001d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e000      	b.n	8001d9c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001d9a:	2302      	movs	r3, #2
  }
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	80002400 	.word	0x80002400
 8001da8:	fe00e800 	.word	0xfe00e800

08001dac <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af02      	add	r7, sp, #8
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	4608      	mov	r0, r1
 8001db6:	4611      	mov	r1, r2
 8001db8:	461a      	mov	r2, r3
 8001dba:	4603      	mov	r3, r0
 8001dbc:	817b      	strh	r3, [r7, #10]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	813b      	strh	r3, [r7, #8]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	8979      	ldrh	r1, [r7, #10]
 8001dcc:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <I2C_RequestMemoryRead+0xa4>)
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 f994 	bl	8002100 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dd8:	69fa      	ldr	r2, [r7, #28]
 8001dda:	69b9      	ldr	r1, [r7, #24]
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 f89d 	bl	8001f1c <I2C_WaitOnTXISFlagUntilTimeout>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e02c      	b.n	8001e46 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d105      	bne.n	8001dfe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001df2:	893b      	ldrh	r3, [r7, #8]
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	629a      	str	r2, [r3, #40]	; 0x28
 8001dfc:	e015      	b.n	8001e2a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001dfe:	893b      	ldrh	r3, [r7, #8]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e0c:	69fa      	ldr	r2, [r7, #28]
 8001e0e:	69b9      	ldr	r1, [r7, #24]
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 f883 	bl	8001f1c <I2C_WaitOnTXISFlagUntilTimeout>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e012      	b.n	8001e46 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e20:	893b      	ldrh	r3, [r7, #8]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	2200      	movs	r2, #0
 8001e32:	2140      	movs	r1, #64	; 0x40
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 f831 	bl	8001e9c <I2C_WaitOnFlagUntilTimeout>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	80002000 	.word	0x80002000

08001e54 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d103      	bne.n	8001e72 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d007      	beq.n	8001e90 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699a      	ldr	r2, [r3, #24]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0201 	orr.w	r2, r2, #1
 8001e8e:	619a      	str	r2, [r3, #24]
  }
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eac:	e022      	b.n	8001ef4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eb4:	d01e      	beq.n	8001ef4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eb6:	f7ff fb19 	bl	80014ec <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d302      	bcc.n	8001ecc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d113      	bne.n	8001ef4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed0:	f043 0220 	orr.w	r2, r3, #32
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2220      	movs	r2, #32
 8001edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e00f      	b.n	8001f14 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699a      	ldr	r2, [r3, #24]
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	4013      	ands	r3, r2
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d0cd      	beq.n	8001eae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f28:	e02c      	b.n	8001f84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 f870 	bl	8002014 <I2C_IsAcknowledgeFailed>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e02a      	b.n	8001f94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f44:	d01e      	beq.n	8001f84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f46:	f7ff fad1 	bl	80014ec <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d302      	bcc.n	8001f5c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d113      	bne.n	8001f84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	f043 0220 	orr.w	r2, r3, #32
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e007      	b.n	8001f94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d1cb      	bne.n	8001f2a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fa8:	e028      	b.n	8001ffc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f830 	bl	8002014 <I2C_IsAcknowledgeFailed>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e026      	b.n	800200c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fbe:	f7ff fa95 	bl	80014ec <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d302      	bcc.n	8001fd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d113      	bne.n	8001ffc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd8:	f043 0220 	orr.w	r2, r3, #32
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e007      	b.n	800200c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f003 0320 	and.w	r3, r3, #32
 8002006:	2b20      	cmp	r3, #32
 8002008:	d1cf      	bne.n	8001faa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b10      	cmp	r3, #16
 800202c:	d161      	bne.n	80020f2 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002038:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800203c:	d02b      	beq.n	8002096 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800204c:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800204e:	e022      	b.n	8002096 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002056:	d01e      	beq.n	8002096 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002058:	f7ff fa48 	bl	80014ec <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	429a      	cmp	r2, r3
 8002066:	d302      	bcc.n	800206e <I2C_IsAcknowledgeFailed+0x5a>
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d113      	bne.n	8002096 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	f043 0220 	orr.w	r2, r3, #32
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e02e      	b.n	80020f4 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	d1d5      	bne.n	8002050 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2210      	movs	r2, #16
 80020aa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2220      	movs	r2, #32
 80020b2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f7ff fecd 	bl	8001e54 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6859      	ldr	r1, [r3, #4]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <I2C_IsAcknowledgeFailed+0xe8>)
 80020c6:	400b      	ands	r3, r1
 80020c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f043 0204 	orr.w	r2, r3, #4
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	fe00e800 	.word	0xfe00e800

08002100 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	607b      	str	r3, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	817b      	strh	r3, [r7, #10]
 800210e:	4613      	mov	r3, r2
 8002110:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	0d5b      	lsrs	r3, r3, #21
 800211c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002120:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <I2C_TransferConfig+0x58>)
 8002122:	430b      	orrs	r3, r1
 8002124:	43db      	mvns	r3, r3
 8002126:	ea02 0103 	and.w	r1, r2, r3
 800212a:	897b      	ldrh	r3, [r7, #10]
 800212c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002130:	7a7b      	ldrb	r3, [r7, #9]
 8002132:	041b      	lsls	r3, r3, #16
 8002134:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	431a      	orrs	r2, r3
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	431a      	orrs	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	03ff63ff 	.word	0x03ff63ff

0800215c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b20      	cmp	r3, #32
 8002170:	d138      	bne.n	80021e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800217c:	2302      	movs	r3, #2
 800217e:	e032      	b.n	80021e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2224      	movs	r2, #36	; 0x24
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6819      	ldr	r1, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0201 	orr.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e000      	b.n	80021e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021e4:	2302      	movs	r3, #2
  }
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b085      	sub	sp, #20
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b20      	cmp	r3, #32
 8002206:	d139      	bne.n	800227c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002212:	2302      	movs	r3, #2
 8002214:	e033      	b.n	800227e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2224      	movs	r2, #36	; 0x24
 8002222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0201 	bic.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002244:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4313      	orrs	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	e000      	b.n	800227e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800227c:	2302      	movs	r3, #2
  }
}
 800227e:	4618      	mov	r0, r3
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002292:	af00      	add	r7, sp, #0
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002298:	1d3b      	adds	r3, r7, #4
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d102      	bne.n	80022a6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	f000 bf01 	b.w	80030a8 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 8160 	beq.w	8002576 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022b6:	4bae      	ldr	r3, [pc, #696]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d00c      	beq.n	80022dc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022c2:	4bab      	ldr	r3, [pc, #684]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d159      	bne.n	8002382 <HAL_RCC_OscConfig+0xf6>
 80022ce:	4ba8      	ldr	r3, [pc, #672]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80022d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022da:	d152      	bne.n	8002382 <HAL_RCC_OscConfig+0xf6>
 80022dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022e0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022f0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b01      	cmp	r3, #1
 8002306:	d102      	bne.n	800230e <HAL_RCC_OscConfig+0x82>
 8002308:	4b99      	ldr	r3, [pc, #612]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	e015      	b.n	800233a <HAL_RCC_OscConfig+0xae>
 800230e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002312:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002322:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002326:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800232a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002336:	4b8e      	ldr	r3, [pc, #568]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800233e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002342:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002346:	fa92 f2a2 	rbit	r2, r2
 800234a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800234e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002352:	fab2 f282 	clz	r2, r2
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	f042 0220 	orr.w	r2, r2, #32
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	f002 021f 	and.w	r2, r2, #31
 8002362:	2101      	movs	r1, #1
 8002364:	fa01 f202 	lsl.w	r2, r1, r2
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 8102 	beq.w	8002574 <HAL_RCC_OscConfig+0x2e8>
 8002370:	1d3b      	adds	r3, r7, #4
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	f040 80fc 	bne.w	8002574 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	f000 be93 	b.w	80030a8 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238c:	d106      	bne.n	800239c <HAL_RCC_OscConfig+0x110>
 800238e:	4b78      	ldr	r3, [pc, #480]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a77      	ldr	r2, [pc, #476]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 8002394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	e030      	b.n	80023fe <HAL_RCC_OscConfig+0x172>
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x134>
 80023a6:	4b72      	ldr	r3, [pc, #456]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a71      	ldr	r2, [pc, #452]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 80023ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b6f      	ldr	r3, [pc, #444]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a6e      	ldr	r2, [pc, #440]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 80023b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e01e      	b.n	80023fe <HAL_RCC_OscConfig+0x172>
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023ca:	d10c      	bne.n	80023e6 <HAL_RCC_OscConfig+0x15a>
 80023cc:	4b68      	ldr	r3, [pc, #416]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a67      	ldr	r2, [pc, #412]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 80023d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	4b65      	ldr	r3, [pc, #404]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a64      	ldr	r2, [pc, #400]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 80023de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	e00b      	b.n	80023fe <HAL_RCC_OscConfig+0x172>
 80023e6:	4b62      	ldr	r3, [pc, #392]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a61      	ldr	r2, [pc, #388]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 80023ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	4b5f      	ldr	r3, [pc, #380]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a5e      	ldr	r2, [pc, #376]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 80023f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023fc:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d059      	beq.n	80024bc <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7ff f870 	bl	80014ec <HAL_GetTick>
 800240c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002412:	f7ff f86b 	bl	80014ec <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	; 0x64
 8002420:	d902      	bls.n	8002428 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	f000 be40 	b.w	80030a8 <HAL_RCC_OscConfig+0xe1c>
 8002428:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800242c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800243c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002440:	fab3 f383 	clz	r3, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	b2db      	uxtb	r3, r3
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b01      	cmp	r3, #1
 8002452:	d102      	bne.n	800245a <HAL_RCC_OscConfig+0x1ce>
 8002454:	4b46      	ldr	r3, [pc, #280]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	e015      	b.n	8002486 <HAL_RCC_OscConfig+0x1fa>
 800245a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800245e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800246e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002472:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002476:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800247a:	fa93 f3a3 	rbit	r3, r3
 800247e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002482:	4b3b      	ldr	r3, [pc, #236]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800248a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800248e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002492:	fa92 f2a2 	rbit	r2, r2
 8002496:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800249a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800249e:	fab2 f282 	clz	r2, r2
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	f042 0220 	orr.w	r2, r2, #32
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	f002 021f 	and.w	r2, r2, #31
 80024ae:	2101      	movs	r1, #1
 80024b0:	fa01 f202 	lsl.w	r2, r1, r2
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0ab      	beq.n	8002412 <HAL_RCC_OscConfig+0x186>
 80024ba:	e05c      	b.n	8002576 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7ff f816 	bl	80014ec <HAL_GetTick>
 80024c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c6:	f7ff f811 	bl	80014ec <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d902      	bls.n	80024dc <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	f000 bde6 	b.w	80030a8 <HAL_RCC_OscConfig+0xe1c>
 80024dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024e0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80024f0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d102      	bne.n	800250e <HAL_RCC_OscConfig+0x282>
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	e015      	b.n	800253a <HAL_RCC_OscConfig+0x2ae>
 800250e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002512:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800251a:	fa93 f3a3 	rbit	r3, r3
 800251e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002522:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002526:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800252a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002536:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <HAL_RCC_OscConfig+0x2e4>)
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800253e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002542:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002546:	fa92 f2a2 	rbit	r2, r2
 800254a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800254e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002552:	fab2 f282 	clz	r2, r2
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	f042 0220 	orr.w	r2, r2, #32
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	f002 021f 	and.w	r2, r2, #31
 8002562:	2101      	movs	r1, #1
 8002564:	fa01 f202 	lsl.w	r2, r1, r2
 8002568:	4013      	ands	r3, r2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1ab      	bne.n	80024c6 <HAL_RCC_OscConfig+0x23a>
 800256e:	e002      	b.n	8002576 <HAL_RCC_OscConfig+0x2ea>
 8002570:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 8170 	beq.w	8002866 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002586:	4bd0      	ldr	r3, [pc, #832]	; (80028c8 <HAL_RCC_OscConfig+0x63c>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00c      	beq.n	80025ac <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002592:	4bcd      	ldr	r3, [pc, #820]	; (80028c8 <HAL_RCC_OscConfig+0x63c>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b08      	cmp	r3, #8
 800259c:	d16d      	bne.n	800267a <HAL_RCC_OscConfig+0x3ee>
 800259e:	4bca      	ldr	r3, [pc, #808]	; (80028c8 <HAL_RCC_OscConfig+0x63c>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80025a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025aa:	d166      	bne.n	800267a <HAL_RCC_OscConfig+0x3ee>
 80025ac:	2302      	movs	r3, #2
 80025ae:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80025be:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d102      	bne.n	80025dc <HAL_RCC_OscConfig+0x350>
 80025d6:	4bbc      	ldr	r3, [pc, #752]	; (80028c8 <HAL_RCC_OscConfig+0x63c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	e013      	b.n	8002604 <HAL_RCC_OscConfig+0x378>
 80025dc:	2302      	movs	r3, #2
 80025de:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80025e6:	fa93 f3a3 	rbit	r3, r3
 80025ea:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80025ee:	2302      	movs	r3, #2
 80025f0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80025f4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002600:	4bb1      	ldr	r3, [pc, #708]	; (80028c8 <HAL_RCC_OscConfig+0x63c>)
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	2202      	movs	r2, #2
 8002606:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800260a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800260e:	fa92 f2a2 	rbit	r2, r2
 8002612:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002616:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800261a:	fab2 f282 	clz	r2, r2
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	f042 0220 	orr.w	r2, r2, #32
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	f002 021f 	and.w	r2, r2, #31
 800262a:	2101      	movs	r1, #1
 800262c:	fa01 f202 	lsl.w	r2, r1, r2
 8002630:	4013      	ands	r3, r2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <HAL_RCC_OscConfig+0x3ba>
 8002636:	1d3b      	adds	r3, r7, #4
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d002      	beq.n	8002646 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	f000 bd31 	b.w	80030a8 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002646:	4ba0      	ldr	r3, [pc, #640]	; (80028c8 <HAL_RCC_OscConfig+0x63c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264e:	1d3b      	adds	r3, r7, #4
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	21f8      	movs	r1, #248	; 0xf8
 8002656:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800265e:	fa91 f1a1 	rbit	r1, r1
 8002662:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002666:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800266a:	fab1 f181 	clz	r1, r1
 800266e:	b2c9      	uxtb	r1, r1
 8002670:	408b      	lsls	r3, r1
 8002672:	4995      	ldr	r1, [pc, #596]	; (80028c8 <HAL_RCC_OscConfig+0x63c>)
 8002674:	4313      	orrs	r3, r2
 8002676:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002678:	e0f5      	b.n	8002866 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800267a:	1d3b      	adds	r3, r7, #4
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 8085 	beq.w	8002790 <HAL_RCC_OscConfig+0x504>
 8002686:	2301      	movs	r3, #1
 8002688:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002698:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	461a      	mov	r2, r3
 80026ae:	2301      	movs	r3, #1
 80026b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b2:	f7fe ff1b 	bl	80014ec <HAL_GetTick>
 80026b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026bc:	f7fe ff16 	bl	80014ec <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d902      	bls.n	80026d2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	f000 bceb 	b.w	80030a8 <HAL_RCC_OscConfig+0xe1c>
 80026d2:	2302      	movs	r3, #2
 80026d4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80026e4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e8:	fab3 f383 	clz	r3, r3
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d102      	bne.n	8002702 <HAL_RCC_OscConfig+0x476>
 80026fc:	4b72      	ldr	r3, [pc, #456]	; (80028c8 <HAL_RCC_OscConfig+0x63c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	e013      	b.n	800272a <HAL_RCC_OscConfig+0x49e>
 8002702:	2302      	movs	r3, #2
 8002704:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002714:	2302      	movs	r3, #2
 8002716:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800271a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002726:	4b68      	ldr	r3, [pc, #416]	; (80028c8 <HAL_RCC_OscConfig+0x63c>)
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	2202      	movs	r2, #2
 800272c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002730:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002734:	fa92 f2a2 	rbit	r2, r2
 8002738:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800273c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002740:	fab2 f282 	clz	r2, r2
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	f042 0220 	orr.w	r2, r2, #32
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	f002 021f 	and.w	r2, r2, #31
 8002750:	2101      	movs	r1, #1
 8002752:	fa01 f202 	lsl.w	r2, r1, r2
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0af      	beq.n	80026bc <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275c:	4b5a      	ldr	r3, [pc, #360]	; (80028c8 <HAL_RCC_OscConfig+0x63c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002764:	1d3b      	adds	r3, r7, #4
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	21f8      	movs	r1, #248	; 0xf8
 800276c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002774:	fa91 f1a1 	rbit	r1, r1
 8002778:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800277c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002780:	fab1 f181 	clz	r1, r1
 8002784:	b2c9      	uxtb	r1, r1
 8002786:	408b      	lsls	r3, r1
 8002788:	494f      	ldr	r1, [pc, #316]	; (80028c8 <HAL_RCC_OscConfig+0x63c>)
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]
 800278e:	e06a      	b.n	8002866 <HAL_RCC_OscConfig+0x5da>
 8002790:	2301      	movs	r3, #1
 8002792:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80027a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	461a      	mov	r2, r3
 80027b8:	2300      	movs	r3, #0
 80027ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7fe fe96 	bl	80014ec <HAL_GetTick>
 80027c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c4:	e00a      	b.n	80027dc <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c6:	f7fe fe91 	bl	80014ec <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d902      	bls.n	80027dc <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	f000 bc66 	b.w	80030a8 <HAL_RCC_OscConfig+0xe1c>
 80027dc:	2302      	movs	r3, #2
 80027de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80027ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d102      	bne.n	800280c <HAL_RCC_OscConfig+0x580>
 8002806:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <HAL_RCC_OscConfig+0x63c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	e013      	b.n	8002834 <HAL_RCC_OscConfig+0x5a8>
 800280c:	2302      	movs	r3, #2
 800280e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800281e:	2302      	movs	r3, #2
 8002820:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002824:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002830:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <HAL_RCC_OscConfig+0x63c>)
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	2202      	movs	r2, #2
 8002836:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800283a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800283e:	fa92 f2a2 	rbit	r2, r2
 8002842:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002846:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800284a:	fab2 f282 	clz	r2, r2
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	f042 0220 	orr.w	r2, r2, #32
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	f002 021f 	and.w	r2, r2, #31
 800285a:	2101      	movs	r1, #1
 800285c:	fa01 f202 	lsl.w	r2, r1, r2
 8002860:	4013      	ands	r3, r2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1af      	bne.n	80027c6 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80da 	beq.w	8002a2a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d069      	beq.n	8002954 <HAL_RCC_OscConfig+0x6c8>
 8002880:	2301      	movs	r3, #1
 8002882:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002892:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_OscConfig+0x640>)
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	461a      	mov	r2, r3
 80028a6:	2301      	movs	r3, #1
 80028a8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028aa:	f7fe fe1f 	bl	80014ec <HAL_GetTick>
 80028ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b2:	e00d      	b.n	80028d0 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b4:	f7fe fe1a 	bl	80014ec <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d905      	bls.n	80028d0 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e3ef      	b.n	80030a8 <HAL_RCC_OscConfig+0xe1c>
 80028c8:	40021000 	.word	0x40021000
 80028cc:	10908120 	.word	0x10908120
 80028d0:	2302      	movs	r3, #2
 80028d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028da:	fa93 f2a3 	rbit	r2, r3
 80028de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80028e8:	2202      	movs	r2, #2
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	fa93 f2a3 	rbit	r2, r3
 80028f6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002900:	2202      	movs	r2, #2
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	fa93 f2a3 	rbit	r2, r3
 800290e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002912:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002914:	4ba4      	ldr	r3, [pc, #656]	; (8002ba8 <HAL_RCC_OscConfig+0x91c>)
 8002916:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002918:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800291c:	2102      	movs	r1, #2
 800291e:	6019      	str	r1, [r3, #0]
 8002920:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	fa93 f1a3 	rbit	r1, r3
 800292a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800292e:	6019      	str	r1, [r3, #0]
  return result;
 8002930:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002940:	b2db      	uxtb	r3, r3
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	2101      	movs	r1, #1
 8002948:	fa01 f303 	lsl.w	r3, r1, r3
 800294c:	4013      	ands	r3, r2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0b0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x628>
 8002952:	e06a      	b.n	8002a2a <HAL_RCC_OscConfig+0x79e>
 8002954:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002958:	2201      	movs	r2, #1
 800295a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	fa93 f2a3 	rbit	r2, r3
 8002966:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800296a:	601a      	str	r2, [r3, #0]
  return result;
 800296c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002970:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	4b8c      	ldr	r3, [pc, #560]	; (8002bac <HAL_RCC_OscConfig+0x920>)
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	461a      	mov	r2, r3
 8002982:	2300      	movs	r3, #0
 8002984:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002986:	f7fe fdb1 	bl	80014ec <HAL_GetTick>
 800298a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298e:	e009      	b.n	80029a4 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002990:	f7fe fdac 	bl	80014ec <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e381      	b.n	80030a8 <HAL_RCC_OscConfig+0xe1c>
 80029a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80029a8:	2202      	movs	r2, #2
 80029aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	fa93 f2a3 	rbit	r2, r3
 80029b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80029c0:	2202      	movs	r2, #2
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	fa93 f2a3 	rbit	r2, r3
 80029ce:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029d8:	2202      	movs	r2, #2
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	fa93 f2a3 	rbit	r2, r3
 80029e6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80029ea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ec:	4b6e      	ldr	r3, [pc, #440]	; (8002ba8 <HAL_RCC_OscConfig+0x91c>)
 80029ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029f4:	2102      	movs	r1, #2
 80029f6:	6019      	str	r1, [r3, #0]
 80029f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	fa93 f1a3 	rbit	r1, r3
 8002a02:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a06:	6019      	str	r1, [r3, #0]
  return result;
 8002a08:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	fab3 f383 	clz	r3, r3
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	f003 031f 	and.w	r3, r3, #31
 8002a1e:	2101      	movs	r1, #1
 8002a20:	fa01 f303 	lsl.w	r3, r1, r3
 8002a24:	4013      	ands	r3, r2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1b2      	bne.n	8002990 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a2a:	1d3b      	adds	r3, r7, #4
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8157 	beq.w	8002ce8 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a40:	4b59      	ldr	r3, [pc, #356]	; (8002ba8 <HAL_RCC_OscConfig+0x91c>)
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d112      	bne.n	8002a72 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4c:	4b56      	ldr	r3, [pc, #344]	; (8002ba8 <HAL_RCC_OscConfig+0x91c>)
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	4a55      	ldr	r2, [pc, #340]	; (8002ba8 <HAL_RCC_OscConfig+0x91c>)
 8002a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a56:	61d3      	str	r3, [r2, #28]
 8002a58:	4b53      	ldr	r3, [pc, #332]	; (8002ba8 <HAL_RCC_OscConfig+0x91c>)
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a60:	f107 030c 	add.w	r3, r7, #12
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	f107 030c 	add.w	r3, r7, #12
 8002a6a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a72:	4b4f      	ldr	r3, [pc, #316]	; (8002bb0 <HAL_RCC_OscConfig+0x924>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d11a      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7e:	4b4c      	ldr	r3, [pc, #304]	; (8002bb0 <HAL_RCC_OscConfig+0x924>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a4b      	ldr	r2, [pc, #300]	; (8002bb0 <HAL_RCC_OscConfig+0x924>)
 8002a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a88:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8a:	f7fe fd2f 	bl	80014ec <HAL_GetTick>
 8002a8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a92:	e009      	b.n	8002aa8 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a94:	f7fe fd2a 	bl	80014ec <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b64      	cmp	r3, #100	; 0x64
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e2ff      	b.n	80030a8 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa8:	4b41      	ldr	r3, [pc, #260]	; (8002bb0 <HAL_RCC_OscConfig+0x924>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ef      	beq.n	8002a94 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab4:	1d3b      	adds	r3, r7, #4
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d106      	bne.n	8002acc <HAL_RCC_OscConfig+0x840>
 8002abe:	4b3a      	ldr	r3, [pc, #232]	; (8002ba8 <HAL_RCC_OscConfig+0x91c>)
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	4a39      	ldr	r2, [pc, #228]	; (8002ba8 <HAL_RCC_OscConfig+0x91c>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6213      	str	r3, [r2, #32]
 8002aca:	e02f      	b.n	8002b2c <HAL_RCC_OscConfig+0x8a0>
 8002acc:	1d3b      	adds	r3, r7, #4
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x864>
 8002ad6:	4b34      	ldr	r3, [pc, #208]	; (8002ba8 <HAL_RCC_OscConfig+0x91c>)
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	4a33      	ldr	r2, [pc, #204]	; (8002ba8 <HAL_RCC_OscConfig+0x91c>)
 8002adc:	f023 0301 	bic.w	r3, r3, #1
 8002ae0:	6213      	str	r3, [r2, #32]
 8002ae2:	4b31      	ldr	r3, [pc, #196]	; (8002ba8 <HAL_RCC_OscConfig+0x91c>)
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	4a30      	ldr	r2, [pc, #192]	; (8002ba8 <HAL_RCC_OscConfig+0x91c>)
 8002ae8:	f023 0304 	bic.w	r3, r3, #4
 8002aec:	6213      	str	r3, [r2, #32]
 8002aee:	e01d      	b.n	8002b2c <HAL_RCC_OscConfig+0x8a0>
 8002af0:	1d3b      	adds	r3, r7, #4
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b05      	cmp	r3, #5
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x888>
 8002afa:	4b2b      	ldr	r3, [pc, #172]	; (8002ba8 <HAL_RCC_OscConfig+0x91c>)
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	4a2a      	ldr	r2, [pc, #168]	; (8002ba8 <HAL_RCC_OscConfig+0x91c>)
 8002b00:	f043 0304 	orr.w	r3, r3, #4
 8002b04:	6213      	str	r3, [r2, #32]
 8002b06:	4b28      	ldr	r3, [pc, #160]	; (8002ba8 <HAL_RCC_OscConfig+0x91c>)
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	4a27      	ldr	r2, [pc, #156]	; (8002ba8 <HAL_RCC_OscConfig+0x91c>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6213      	str	r3, [r2, #32]
 8002b12:	e00b      	b.n	8002b2c <HAL_RCC_OscConfig+0x8a0>
 8002b14:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <HAL_RCC_OscConfig+0x91c>)
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <HAL_RCC_OscConfig+0x91c>)
 8002b1a:	f023 0301 	bic.w	r3, r3, #1
 8002b1e:	6213      	str	r3, [r2, #32]
 8002b20:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <HAL_RCC_OscConfig+0x91c>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	4a20      	ldr	r2, [pc, #128]	; (8002ba8 <HAL_RCC_OscConfig+0x91c>)
 8002b26:	f023 0304 	bic.w	r3, r3, #4
 8002b2a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b2c:	1d3b      	adds	r3, r7, #4
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d06a      	beq.n	8002c0c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b36:	f7fe fcd9 	bl	80014ec <HAL_GetTick>
 8002b3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3e:	e00b      	b.n	8002b58 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b40:	f7fe fcd4 	bl	80014ec <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e2a7      	b.n	80030a8 <HAL_RCC_OscConfig+0xe1c>
 8002b58:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	fa93 f2a3 	rbit	r2, r3
 8002b6a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002b74:	2202      	movs	r2, #2
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	fa93 f2a3 	rbit	r2, r3
 8002b82:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b86:	601a      	str	r2, [r3, #0]
  return result;
 8002b88:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b8c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	095b      	lsrs	r3, r3, #5
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f043 0302 	orr.w	r3, r3, #2
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d108      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x928>
 8002ba2:	4b01      	ldr	r3, [pc, #4]	; (8002ba8 <HAL_RCC_OscConfig+0x91c>)
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	e013      	b.n	8002bd0 <HAL_RCC_OscConfig+0x944>
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	10908120 	.word	0x10908120
 8002bb0:	40007000 	.word	0x40007000
 8002bb4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002bb8:	2202      	movs	r2, #2
 8002bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	fa93 f2a3 	rbit	r2, r3
 8002bc6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	4bc0      	ldr	r3, [pc, #768]	; (8002ed0 <HAL_RCC_OscConfig+0xc44>)
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002bd4:	2102      	movs	r1, #2
 8002bd6:	6011      	str	r1, [r2, #0]
 8002bd8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	fa92 f1a2 	rbit	r1, r2
 8002be2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002be6:	6011      	str	r1, [r2, #0]
  return result;
 8002be8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	fab2 f282 	clz	r2, r2
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	f002 021f 	and.w	r2, r2, #31
 8002bfe:	2101      	movs	r1, #1
 8002c00:	fa01 f202 	lsl.w	r2, r1, r2
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d09a      	beq.n	8002b40 <HAL_RCC_OscConfig+0x8b4>
 8002c0a:	e063      	b.n	8002cd4 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0c:	f7fe fc6e 	bl	80014ec <HAL_GetTick>
 8002c10:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c14:	e00b      	b.n	8002c2e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c16:	f7fe fc69 	bl	80014ec <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e23c      	b.n	80030a8 <HAL_RCC_OscConfig+0xe1c>
 8002c2e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c32:	2202      	movs	r2, #2
 8002c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	fa93 f2a3 	rbit	r2, r3
 8002c40:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	fa93 f2a3 	rbit	r2, r3
 8002c58:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c5c:	601a      	str	r2, [r3, #0]
  return result;
 8002c5e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f043 0302 	orr.w	r3, r3, #2
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d102      	bne.n	8002c7e <HAL_RCC_OscConfig+0x9f2>
 8002c78:	4b95      	ldr	r3, [pc, #596]	; (8002ed0 <HAL_RCC_OscConfig+0xc44>)
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	e00d      	b.n	8002c9a <HAL_RCC_OscConfig+0xa0e>
 8002c7e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c82:	2202      	movs	r2, #2
 8002c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	fa93 f2a3 	rbit	r2, r3
 8002c90:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	4b8e      	ldr	r3, [pc, #568]	; (8002ed0 <HAL_RCC_OscConfig+0xc44>)
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002c9e:	2102      	movs	r1, #2
 8002ca0:	6011      	str	r1, [r2, #0]
 8002ca2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	fa92 f1a2 	rbit	r1, r2
 8002cac:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002cb0:	6011      	str	r1, [r2, #0]
  return result;
 8002cb2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	fab2 f282 	clz	r2, r2
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	f002 021f 	and.w	r2, r2, #31
 8002cc8:	2101      	movs	r1, #1
 8002cca:	fa01 f202 	lsl.w	r2, r1, r2
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1a0      	bne.n	8002c16 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cd4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d105      	bne.n	8002ce8 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cdc:	4b7c      	ldr	r3, [pc, #496]	; (8002ed0 <HAL_RCC_OscConfig+0xc44>)
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	4a7b      	ldr	r2, [pc, #492]	; (8002ed0 <HAL_RCC_OscConfig+0xc44>)
 8002ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 81d9 	beq.w	80030a6 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cf4:	4b76      	ldr	r3, [pc, #472]	; (8002ed0 <HAL_RCC_OscConfig+0xc44>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	f000 81a6 	beq.w	800304e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d02:	1d3b      	adds	r3, r7, #4
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	f040 811e 	bne.w	8002f4a <HAL_RCC_OscConfig+0xcbe>
 8002d0e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002d12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	fa93 f2a3 	rbit	r2, r3
 8002d22:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d26:	601a      	str	r2, [r3, #0]
  return result;
 8002d28:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d2c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2e:	fab3 f383 	clz	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	461a      	mov	r2, r3
 8002d40:	2300      	movs	r3, #0
 8002d42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe fbd2 	bl	80014ec <HAL_GetTick>
 8002d48:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d4c:	e009      	b.n	8002d62 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4e:	f7fe fbcd 	bl	80014ec <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e1a2      	b.n	80030a8 <HAL_RCC_OscConfig+0xe1c>
 8002d62:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	fa93 f2a3 	rbit	r2, r3
 8002d76:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d7a:	601a      	str	r2, [r3, #0]
  return result;
 8002d7c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d80:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d102      	bne.n	8002d9c <HAL_RCC_OscConfig+0xb10>
 8002d96:	4b4e      	ldr	r3, [pc, #312]	; (8002ed0 <HAL_RCC_OscConfig+0xc44>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	e01b      	b.n	8002dd4 <HAL_RCC_OscConfig+0xb48>
 8002d9c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002da0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002da4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	fa93 f2a3 	rbit	r2, r3
 8002db0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002dba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	fa93 f2a3 	rbit	r2, r3
 8002dca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	4b3f      	ldr	r3, [pc, #252]	; (8002ed0 <HAL_RCC_OscConfig+0xc44>)
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002dd8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ddc:	6011      	str	r1, [r2, #0]
 8002dde:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	fa92 f1a2 	rbit	r1, r2
 8002de8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002dec:	6011      	str	r1, [r2, #0]
  return result;
 8002dee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	fab2 f282 	clz	r2, r2
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	f042 0220 	orr.w	r2, r2, #32
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	f002 021f 	and.w	r2, r2, #31
 8002e04:	2101      	movs	r1, #1
 8002e06:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d19e      	bne.n	8002d4e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e10:	4b2f      	ldr	r3, [pc, #188]	; (8002ed0 <HAL_RCC_OscConfig+0xc44>)
 8002e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e14:	f023 020f 	bic.w	r2, r3, #15
 8002e18:	1d3b      	adds	r3, r7, #4
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	492c      	ldr	r1, [pc, #176]	; (8002ed0 <HAL_RCC_OscConfig+0xc44>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002e24:	4b2a      	ldr	r3, [pc, #168]	; (8002ed0 <HAL_RCC_OscConfig+0xc44>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002e2c:	1d3b      	adds	r3, r7, #4
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6a19      	ldr	r1, [r3, #32]
 8002e32:	1d3b      	adds	r3, r7, #4
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	4925      	ldr	r1, [pc, #148]	; (8002ed0 <HAL_RCC_OscConfig+0xc44>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	604b      	str	r3, [r1, #4]
 8002e40:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	fa93 f2a3 	rbit	r2, r3
 8002e54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e58:	601a      	str	r2, [r3, #0]
  return result;
 8002e5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e5e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e6a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	461a      	mov	r2, r3
 8002e72:	2301      	movs	r3, #1
 8002e74:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e76:	f7fe fb39 	bl	80014ec <HAL_GetTick>
 8002e7a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e7e:	e009      	b.n	8002e94 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e80:	f7fe fb34 	bl	80014ec <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e109      	b.n	80030a8 <HAL_RCC_OscConfig+0xe1c>
 8002e94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	fa93 f2a3 	rbit	r2, r3
 8002ea8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002eac:	601a      	str	r2, [r3, #0]
  return result;
 8002eae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002eb2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eb4:	fab3 f383 	clz	r3, r3
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	095b      	lsrs	r3, r3, #5
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d105      	bne.n	8002ed4 <HAL_RCC_OscConfig+0xc48>
 8002ec8:	4b01      	ldr	r3, [pc, #4]	; (8002ed0 <HAL_RCC_OscConfig+0xc44>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	e01e      	b.n	8002f0c <HAL_RCC_OscConfig+0xc80>
 8002ece:	bf00      	nop
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ed8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	fa93 f2a3 	rbit	r2, r3
 8002ee8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ef2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	fa93 f2a3 	rbit	r2, r3
 8002f02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	4b6a      	ldr	r3, [pc, #424]	; (80030b4 <HAL_RCC_OscConfig+0xe28>)
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002f10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f14:	6011      	str	r1, [r2, #0]
 8002f16:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	fa92 f1a2 	rbit	r1, r2
 8002f20:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f24:	6011      	str	r1, [r2, #0]
  return result;
 8002f26:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	fab2 f282 	clz	r2, r2
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	f042 0220 	orr.w	r2, r2, #32
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	f002 021f 	and.w	r2, r2, #31
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d09b      	beq.n	8002e80 <HAL_RCC_OscConfig+0xbf4>
 8002f48:	e0ad      	b.n	80030a6 <HAL_RCC_OscConfig+0xe1a>
 8002f4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	fa93 f2a3 	rbit	r2, r3
 8002f5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f62:	601a      	str	r2, [r3, #0]
  return result;
 8002f64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f68:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f80:	f7fe fab4 	bl	80014ec <HAL_GetTick>
 8002f84:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f88:	e009      	b.n	8002f9e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f8a:	f7fe faaf 	bl	80014ec <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e084      	b.n	80030a8 <HAL_RCC_OscConfig+0xe1c>
 8002f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	fa93 f2a3 	rbit	r2, r3
 8002fb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fb6:	601a      	str	r2, [r3, #0]
  return result;
 8002fb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d102      	bne.n	8002fd8 <HAL_RCC_OscConfig+0xd4c>
 8002fd2:	4b38      	ldr	r3, [pc, #224]	; (80030b4 <HAL_RCC_OscConfig+0xe28>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	e01b      	b.n	8003010 <HAL_RCC_OscConfig+0xd84>
 8002fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	fa93 f2a3 	rbit	r2, r3
 8002fec:	f107 0320 	add.w	r3, r7, #32
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	f107 031c 	add.w	r3, r7, #28
 8002ff6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	f107 031c 	add.w	r3, r7, #28
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	fa93 f2a3 	rbit	r2, r3
 8003006:	f107 0318 	add.w	r3, r7, #24
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	4b29      	ldr	r3, [pc, #164]	; (80030b4 <HAL_RCC_OscConfig+0xe28>)
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	f107 0214 	add.w	r2, r7, #20
 8003014:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003018:	6011      	str	r1, [r2, #0]
 800301a:	f107 0214 	add.w	r2, r7, #20
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	fa92 f1a2 	rbit	r1, r2
 8003024:	f107 0210 	add.w	r2, r7, #16
 8003028:	6011      	str	r1, [r2, #0]
  return result;
 800302a:	f107 0210 	add.w	r2, r7, #16
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	fab2 f282 	clz	r2, r2
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	f042 0220 	orr.w	r2, r2, #32
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	f002 021f 	and.w	r2, r2, #31
 8003040:	2101      	movs	r1, #1
 8003042:	fa01 f202 	lsl.w	r2, r1, r2
 8003046:	4013      	ands	r3, r2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d19e      	bne.n	8002f8a <HAL_RCC_OscConfig+0xcfe>
 800304c:	e02b      	b.n	80030a6 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800304e:	1d3b      	adds	r3, r7, #4
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e025      	b.n	80030a8 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800305c:	4b15      	ldr	r3, [pc, #84]	; (80030b4 <HAL_RCC_OscConfig+0xe28>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003064:	4b13      	ldr	r3, [pc, #76]	; (80030b4 <HAL_RCC_OscConfig+0xe28>)
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800306c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003070:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003074:	1d3b      	adds	r3, r7, #4
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	429a      	cmp	r2, r3
 800307c:	d111      	bne.n	80030a2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800307e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003082:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003086:	1d3b      	adds	r3, r7, #4
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800308c:	429a      	cmp	r2, r3
 800308e:	d108      	bne.n	80030a2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003090:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003094:	f003 020f 	and.w	r2, r3, #15
 8003098:	1d3b      	adds	r3, r7, #4
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800309e:	429a      	cmp	r2, r3
 80030a0:	d001      	beq.n	80030a6 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000

080030b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b09e      	sub	sp, #120	; 0x78
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e162      	b.n	8003396 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030d0:	4b90      	ldr	r3, [pc, #576]	; (8003314 <HAL_RCC_ClockConfig+0x25c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d910      	bls.n	8003100 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030de:	4b8d      	ldr	r3, [pc, #564]	; (8003314 <HAL_RCC_ClockConfig+0x25c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 0207 	bic.w	r2, r3, #7
 80030e6:	498b      	ldr	r1, [pc, #556]	; (8003314 <HAL_RCC_ClockConfig+0x25c>)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ee:	4b89      	ldr	r3, [pc, #548]	; (8003314 <HAL_RCC_ClockConfig+0x25c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e14a      	b.n	8003396 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800310c:	4b82      	ldr	r3, [pc, #520]	; (8003318 <HAL_RCC_ClockConfig+0x260>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	497f      	ldr	r1, [pc, #508]	; (8003318 <HAL_RCC_ClockConfig+0x260>)
 800311a:	4313      	orrs	r3, r2
 800311c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 80dc 	beq.w	80032e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d13c      	bne.n	80031ae <HAL_RCC_ClockConfig+0xf6>
 8003134:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003138:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800313c:	fa93 f3a3 	rbit	r3, r3
 8003140:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003144:	fab3 f383 	clz	r3, r3
 8003148:	b2db      	uxtb	r3, r3
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	b2db      	uxtb	r3, r3
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b01      	cmp	r3, #1
 8003156:	d102      	bne.n	800315e <HAL_RCC_ClockConfig+0xa6>
 8003158:	4b6f      	ldr	r3, [pc, #444]	; (8003318 <HAL_RCC_ClockConfig+0x260>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	e00f      	b.n	800317e <HAL_RCC_ClockConfig+0xc6>
 800315e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003162:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	667b      	str	r3, [r7, #100]	; 0x64
 800316c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003170:	663b      	str	r3, [r7, #96]	; 0x60
 8003172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003174:	fa93 f3a3 	rbit	r3, r3
 8003178:	65fb      	str	r3, [r7, #92]	; 0x5c
 800317a:	4b67      	ldr	r3, [pc, #412]	; (8003318 <HAL_RCC_ClockConfig+0x260>)
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003182:	65ba      	str	r2, [r7, #88]	; 0x58
 8003184:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003186:	fa92 f2a2 	rbit	r2, r2
 800318a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800318c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800318e:	fab2 f282 	clz	r2, r2
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	f042 0220 	orr.w	r2, r2, #32
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	f002 021f 	and.w	r2, r2, #31
 800319e:	2101      	movs	r1, #1
 80031a0:	fa01 f202 	lsl.w	r2, r1, r2
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d17b      	bne.n	80032a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e0f3      	b.n	8003396 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d13c      	bne.n	8003230 <HAL_RCC_ClockConfig+0x178>
 80031b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031be:	fa93 f3a3 	rbit	r3, r3
 80031c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80031c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c6:	fab3 f383 	clz	r3, r3
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	095b      	lsrs	r3, r3, #5
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d102      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x128>
 80031da:	4b4f      	ldr	r3, [pc, #316]	; (8003318 <HAL_RCC_ClockConfig+0x260>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	e00f      	b.n	8003200 <HAL_RCC_ClockConfig+0x148>
 80031e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	647b      	str	r3, [r7, #68]	; 0x44
 80031ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031f2:	643b      	str	r3, [r7, #64]	; 0x40
 80031f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f6:	fa93 f3a3 	rbit	r3, r3
 80031fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031fc:	4b46      	ldr	r3, [pc, #280]	; (8003318 <HAL_RCC_ClockConfig+0x260>)
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003204:	63ba      	str	r2, [r7, #56]	; 0x38
 8003206:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003208:	fa92 f2a2 	rbit	r2, r2
 800320c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800320e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003210:	fab2 f282 	clz	r2, r2
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	f042 0220 	orr.w	r2, r2, #32
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	f002 021f 	and.w	r2, r2, #31
 8003220:	2101      	movs	r1, #1
 8003222:	fa01 f202 	lsl.w	r2, r1, r2
 8003226:	4013      	ands	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d13a      	bne.n	80032a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0b2      	b.n	8003396 <HAL_RCC_ClockConfig+0x2de>
 8003230:	2302      	movs	r3, #2
 8003232:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003236:	fa93 f3a3 	rbit	r3, r3
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800323c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800323e:	fab3 f383 	clz	r3, r3
 8003242:	b2db      	uxtb	r3, r3
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d102      	bne.n	8003258 <HAL_RCC_ClockConfig+0x1a0>
 8003252:	4b31      	ldr	r3, [pc, #196]	; (8003318 <HAL_RCC_ClockConfig+0x260>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	e00d      	b.n	8003274 <HAL_RCC_ClockConfig+0x1bc>
 8003258:	2302      	movs	r3, #2
 800325a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325e:	fa93 f3a3 	rbit	r3, r3
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
 8003264:	2302      	movs	r3, #2
 8003266:	623b      	str	r3, [r7, #32]
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	fa93 f3a3 	rbit	r3, r3
 800326e:	61fb      	str	r3, [r7, #28]
 8003270:	4b29      	ldr	r3, [pc, #164]	; (8003318 <HAL_RCC_ClockConfig+0x260>)
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	2202      	movs	r2, #2
 8003276:	61ba      	str	r2, [r7, #24]
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	fa92 f2a2 	rbit	r2, r2
 800327e:	617a      	str	r2, [r7, #20]
  return result;
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	fab2 f282 	clz	r2, r2
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	f042 0220 	orr.w	r2, r2, #32
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	f002 021f 	and.w	r2, r2, #31
 8003292:	2101      	movs	r1, #1
 8003294:	fa01 f202 	lsl.w	r2, r1, r2
 8003298:	4013      	ands	r3, r2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e079      	b.n	8003396 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032a2:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_RCC_ClockConfig+0x260>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f023 0203 	bic.w	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	491a      	ldr	r1, [pc, #104]	; (8003318 <HAL_RCC_ClockConfig+0x260>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b4:	f7fe f91a 	bl	80014ec <HAL_GetTick>
 80032b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ba:	e00a      	b.n	80032d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032bc:	f7fe f916 	bl	80014ec <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e061      	b.n	8003396 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d2:	4b11      	ldr	r3, [pc, #68]	; (8003318 <HAL_RCC_ClockConfig+0x260>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f003 020c 	and.w	r2, r3, #12
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d1eb      	bne.n	80032bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_RCC_ClockConfig+0x25c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d214      	bcs.n	800331c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4b08      	ldr	r3, [pc, #32]	; (8003314 <HAL_RCC_ClockConfig+0x25c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 0207 	bic.w	r2, r3, #7
 80032fa:	4906      	ldr	r1, [pc, #24]	; (8003314 <HAL_RCC_ClockConfig+0x25c>)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003302:	4b04      	ldr	r3, [pc, #16]	; (8003314 <HAL_RCC_ClockConfig+0x25c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d005      	beq.n	800331c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e040      	b.n	8003396 <HAL_RCC_ClockConfig+0x2de>
 8003314:	40022000 	.word	0x40022000
 8003318:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003328:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <HAL_RCC_ClockConfig+0x2e8>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	491a      	ldr	r1, [pc, #104]	; (80033a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003336:	4313      	orrs	r3, r2
 8003338:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003346:	4b16      	ldr	r3, [pc, #88]	; (80033a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4912      	ldr	r1, [pc, #72]	; (80033a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003356:	4313      	orrs	r3, r2
 8003358:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800335a:	f000 f829 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 800335e:	4601      	mov	r1, r0
 8003360:	4b0f      	ldr	r3, [pc, #60]	; (80033a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003368:	22f0      	movs	r2, #240	; 0xf0
 800336a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	fa92 f2a2 	rbit	r2, r2
 8003372:	60fa      	str	r2, [r7, #12]
  return result;
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	fab2 f282 	clz	r2, r2
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	40d3      	lsrs	r3, r2
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x2ec>)
 8003380:	5cd3      	ldrb	r3, [r2, r3]
 8003382:	fa21 f303 	lsr.w	r3, r1, r3
 8003386:	4a08      	ldr	r2, [pc, #32]	; (80033a8 <HAL_RCC_ClockConfig+0x2f0>)
 8003388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800338a:	4b08      	ldr	r3, [pc, #32]	; (80033ac <HAL_RCC_ClockConfig+0x2f4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe f868 	bl	8001464 <HAL_InitTick>
  
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3778      	adds	r7, #120	; 0x78
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40021000 	.word	0x40021000
 80033a4:	08006918 	.word	0x08006918
 80033a8:	20000000 	.word	0x20000000
 80033ac:	20000004 	.word	0x20000004

080033b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b08b      	sub	sp, #44	; 0x2c
 80033b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61fb      	str	r3, [r7, #28]
 80033ba:	2300      	movs	r3, #0
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	2300      	movs	r3, #0
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80033ca:	4b2a      	ldr	r3, [pc, #168]	; (8003474 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d002      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x30>
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d003      	beq.n	80033e6 <HAL_RCC_GetSysClockFreq+0x36>
 80033de:	e03f      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033e0:	4b25      	ldr	r3, [pc, #148]	; (8003478 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033e2:	623b      	str	r3, [r7, #32]
      break;
 80033e4:	e03f      	b.n	8003466 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80033f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	fa92 f2a2 	rbit	r2, r2
 80033f8:	607a      	str	r2, [r7, #4]
  return result;
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	fab2 f282 	clz	r2, r2
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	40d3      	lsrs	r3, r2
 8003404:	4a1d      	ldr	r2, [pc, #116]	; (800347c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003406:	5cd3      	ldrb	r3, [r2, r3]
 8003408:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800340a:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <HAL_RCC_GetSysClockFreq+0xc4>)
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	220f      	movs	r2, #15
 8003414:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	fa92 f2a2 	rbit	r2, r2
 800341c:	60fa      	str	r2, [r7, #12]
  return result;
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	fab2 f282 	clz	r2, r2
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	40d3      	lsrs	r3, r2
 8003428:	4a15      	ldr	r2, [pc, #84]	; (8003480 <HAL_RCC_GetSysClockFreq+0xd0>)
 800342a:	5cd3      	ldrb	r3, [r2, r3]
 800342c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d008      	beq.n	800344a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003438:	4a0f      	ldr	r2, [pc, #60]	; (8003478 <HAL_RCC_GetSysClockFreq+0xc8>)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	fb02 f303 	mul.w	r3, r2, r3
 8003446:	627b      	str	r3, [r7, #36]	; 0x24
 8003448:	e007      	b.n	800345a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800344a:	4a0e      	ldr	r2, [pc, #56]	; (8003484 <HAL_RCC_GetSysClockFreq+0xd4>)
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	fb02 f303 	mul.w	r3, r2, r3
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	623b      	str	r3, [r7, #32]
      break;
 800345e:	e002      	b.n	8003466 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003460:	4b08      	ldr	r3, [pc, #32]	; (8003484 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003462:	623b      	str	r3, [r7, #32]
      break;
 8003464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003466:	6a3b      	ldr	r3, [r7, #32]
}
 8003468:	4618      	mov	r0, r3
 800346a:	372c      	adds	r7, #44	; 0x2c
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	40021000 	.word	0x40021000
 8003478:	00f42400 	.word	0x00f42400
 800347c:	08006930 	.word	0x08006930
 8003480:	08006940 	.word	0x08006940
 8003484:	007a1200 	.word	0x007a1200

08003488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800348c:	4b03      	ldr	r3, [pc, #12]	; (800349c <HAL_RCC_GetHCLKFreq+0x14>)
 800348e:	681b      	ldr	r3, [r3, #0]
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000000 	.word	0x20000000

080034a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80034a6:	f7ff ffef 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034aa:	4601      	mov	r1, r0
 80034ac:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80034b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	fa92 f2a2 	rbit	r2, r2
 80034c0:	603a      	str	r2, [r7, #0]
  return result;
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	fab2 f282 	clz	r2, r2
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	40d3      	lsrs	r3, r2
 80034cc:	4a04      	ldr	r2, [pc, #16]	; (80034e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80034ce:	5cd3      	ldrb	r3, [r2, r3]
 80034d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000
 80034e0:	08006928 	.word	0x08006928

080034e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80034ea:	f7ff ffcd 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034ee:	4601      	mov	r1, r0
 80034f0:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80034f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80034fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	fa92 f2a2 	rbit	r2, r2
 8003504:	603a      	str	r2, [r7, #0]
  return result;
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	fab2 f282 	clz	r2, r2
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	40d3      	lsrs	r3, r2
 8003510:	4a04      	ldr	r2, [pc, #16]	; (8003524 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003512:	5cd3      	ldrb	r3, [r2, r3]
 8003514:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003518:	4618      	mov	r0, r3
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40021000 	.word	0x40021000
 8003524:	08006928 	.word	0x08006928

08003528 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b092      	sub	sp, #72	; 0x48
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003538:	2300      	movs	r3, #0
 800353a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 80d4 	beq.w	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800354c:	4b4e      	ldr	r3, [pc, #312]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10e      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003558:	4b4b      	ldr	r3, [pc, #300]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	4a4a      	ldr	r2, [pc, #296]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003562:	61d3      	str	r3, [r2, #28]
 8003564:	4b48      	ldr	r3, [pc, #288]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003570:	2301      	movs	r3, #1
 8003572:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003576:	4b45      	ldr	r3, [pc, #276]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357e:	2b00      	cmp	r3, #0
 8003580:	d118      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003582:	4b42      	ldr	r3, [pc, #264]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a41      	ldr	r2, [pc, #260]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800358e:	f7fd ffad 	bl	80014ec <HAL_GetTick>
 8003592:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003594:	e008      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003596:	f7fd ffa9 	bl	80014ec <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b64      	cmp	r3, #100	; 0x64
 80035a2:	d901      	bls.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e1d6      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a8:	4b38      	ldr	r3, [pc, #224]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0f0      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035b4:	4b34      	ldr	r3, [pc, #208]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8084 	beq.w	80036ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d07c      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035d4:	4b2c      	ldr	r3, [pc, #176]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e6:	fa93 f3a3 	rbit	r3, r3
 80035ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	4b26      	ldr	r3, [pc, #152]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	461a      	mov	r2, r3
 80035fe:	2301      	movs	r3, #1
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003606:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360a:	fa93 f3a3 	rbit	r3, r3
 800360e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	461a      	mov	r2, r3
 8003622:	2300      	movs	r3, #0
 8003624:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003626:	4a18      	ldr	r2, [pc, #96]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800362a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800362c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d04b      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003636:	f7fd ff59 	bl	80014ec <HAL_GetTick>
 800363a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363c:	e00a      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363e:	f7fd ff55 	bl	80014ec <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	f241 3288 	movw	r2, #5000	; 0x1388
 800364c:	4293      	cmp	r3, r2
 800364e:	d901      	bls.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e180      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003654:	2302      	movs	r3, #2
 8003656:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365a:	fa93 f3a3 	rbit	r3, r3
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
 8003660:	2302      	movs	r3, #2
 8003662:	623b      	str	r3, [r7, #32]
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	61fb      	str	r3, [r7, #28]
  return result;
 800366c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366e:	fab3 f383 	clz	r3, r3
 8003672:	b2db      	uxtb	r3, r3
 8003674:	095b      	lsrs	r3, r3, #5
 8003676:	b2db      	uxtb	r3, r3
 8003678:	f043 0302 	orr.w	r3, r3, #2
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d108      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003682:	4b01      	ldr	r3, [pc, #4]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	e00d      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003688:	40021000 	.word	0x40021000
 800368c:	40007000 	.word	0x40007000
 8003690:	10908100 	.word	0x10908100
 8003694:	2302      	movs	r3, #2
 8003696:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	fa93 f3a3 	rbit	r3, r3
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	4ba0      	ldr	r3, [pc, #640]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	2202      	movs	r2, #2
 80036a6:	613a      	str	r2, [r7, #16]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	fa92 f2a2 	rbit	r2, r2
 80036ae:	60fa      	str	r2, [r7, #12]
  return result;
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	fab2 f282 	clz	r2, r2
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	f002 021f 	and.w	r2, r2, #31
 80036c2:	2101      	movs	r1, #1
 80036c4:	fa01 f202 	lsl.w	r2, r1, r2
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0b7      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036ce:	4b95      	ldr	r3, [pc, #596]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4992      	ldr	r1, [pc, #584]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d105      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e8:	4b8e      	ldr	r3, [pc, #568]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	4a8d      	ldr	r2, [pc, #564]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003700:	4b88      	ldr	r3, [pc, #544]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	f023 0203 	bic.w	r2, r3, #3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	4985      	ldr	r1, [pc, #532]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800370e:	4313      	orrs	r3, r2
 8003710:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d008      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800371e:	4b81      	ldr	r3, [pc, #516]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	497e      	ldr	r1, [pc, #504]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800372c:	4313      	orrs	r3, r2
 800372e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800373c:	4b79      	ldr	r3, [pc, #484]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	4976      	ldr	r1, [pc, #472]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800374a:	4313      	orrs	r3, r2
 800374c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b00      	cmp	r3, #0
 8003758:	d008      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800375a:	4b72      	ldr	r3, [pc, #456]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	f023 0210 	bic.w	r2, r3, #16
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	496f      	ldr	r1, [pc, #444]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003768:	4313      	orrs	r3, r2
 800376a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003778:	4b6a      	ldr	r3, [pc, #424]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003784:	4967      	ldr	r1, [pc, #412]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003786:	4313      	orrs	r3, r2
 8003788:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d008      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003796:	4b63      	ldr	r3, [pc, #396]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	f023 0220 	bic.w	r2, r3, #32
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	4960      	ldr	r1, [pc, #384]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037b4:	4b5b      	ldr	r3, [pc, #364]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	4958      	ldr	r1, [pc, #352]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d008      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037d2:	4b54      	ldr	r3, [pc, #336]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	4951      	ldr	r1, [pc, #324]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0310 	and.w	r3, r3, #16
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037f0:	4b4c      	ldr	r3, [pc, #304]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	4949      	ldr	r1, [pc, #292]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800380a:	2b00      	cmp	r3, #0
 800380c:	d008      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800380e:	4b45      	ldr	r3, [pc, #276]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	4942      	ldr	r1, [pc, #264]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800381c:	4313      	orrs	r3, r2
 800381e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003828:	2b00      	cmp	r3, #0
 800382a:	d008      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800382c:	4b3d      	ldr	r3, [pc, #244]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003838:	493a      	ldr	r1, [pc, #232]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800383a:	4313      	orrs	r3, r2
 800383c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d008      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800384a:	4b36      	ldr	r3, [pc, #216]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	4933      	ldr	r1, [pc, #204]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003858:	4313      	orrs	r3, r2
 800385a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003868:	4b2e      	ldr	r3, [pc, #184]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003874:	492b      	ldr	r1, [pc, #172]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003876:	4313      	orrs	r3, r2
 8003878:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d008      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003886:	4b27      	ldr	r3, [pc, #156]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	4924      	ldr	r1, [pc, #144]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003894:	4313      	orrs	r3, r2
 8003896:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80038a4:	4b1f      	ldr	r3, [pc, #124]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	491c      	ldr	r1, [pc, #112]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d008      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80038c2:	4b18      	ldr	r3, [pc, #96]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	4915      	ldr	r1, [pc, #84]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d008      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80038e0:	4b10      	ldr	r3, [pc, #64]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ec:	490d      	ldr	r1, [pc, #52]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d008      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80038fe:	4b09      	ldr	r3, [pc, #36]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390a:	4906      	ldr	r1, [pc, #24]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800390c:	4313      	orrs	r3, r2
 800390e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00c      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800391c:	4b01      	ldr	r3, [pc, #4]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800391e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003920:	e002      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003922:	bf00      	nop
 8003924:	40021000 	.word	0x40021000
 8003928:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003930:	490b      	ldr	r1, [pc, #44]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003932:	4313      	orrs	r3, r2
 8003934:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d008      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003942:	4b07      	ldr	r3, [pc, #28]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800394e:	4904      	ldr	r1, [pc, #16]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003950:	4313      	orrs	r3, r2
 8003952:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3748      	adds	r7, #72	; 0x48
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40021000 	.word	0x40021000

08003964 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e040      	b.n	80039f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd fcd4 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2224      	movs	r2, #36	; 0x24
 8003990:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0201 	bic.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f8c0 	bl	8003b28 <UART_SetConfig>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e022      	b.n	80039f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fa88 	bl	8003ed0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0201 	orr.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 fb0f 	bl	8004014 <UART_CheckIdleState>
 80039f6:	4603      	mov	r3, r0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08a      	sub	sp, #40	; 0x28
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a14:	2b20      	cmp	r3, #32
 8003a16:	f040 8082 	bne.w	8003b1e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <HAL_UART_Transmit+0x26>
 8003a20:	88fb      	ldrh	r3, [r7, #6]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e07a      	b.n	8003b20 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_UART_Transmit+0x38>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e073      	b.n	8003b20 <HAL_UART_Transmit+0x120>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2221      	movs	r2, #33	; 0x21
 8003a4c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a4e:	f7fd fd4d 	bl	80014ec <HAL_GetTick>
 8003a52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	88fa      	ldrh	r2, [r7, #6]
 8003a58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	88fa      	ldrh	r2, [r7, #6]
 8003a60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6c:	d108      	bne.n	8003a80 <HAL_UART_Transmit+0x80>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d104      	bne.n	8003a80 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	e003      	b.n	8003a88 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003a90:	e02d      	b.n	8003aee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2180      	movs	r1, #128	; 0x80
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 fb02 	bl	80040a6 <UART_WaitOnFlagUntilTimeout>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e039      	b.n	8003b20 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10b      	bne.n	8003aca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	881a      	ldrh	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003abe:	b292      	uxth	r2, r2
 8003ac0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	3302      	adds	r3, #2
 8003ac6:	61bb      	str	r3, [r7, #24]
 8003ac8:	e008      	b.n	8003adc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	781a      	ldrb	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	b292      	uxth	r2, r2
 8003ad4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1cb      	bne.n	8003a92 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2200      	movs	r2, #0
 8003b02:	2140      	movs	r1, #64	; 0x40
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 face 	bl	80040a6 <UART_WaitOnFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e005      	b.n	8003b20 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2220      	movs	r2, #32
 8003b18:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	e000      	b.n	8003b20 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003b1e:	2302      	movs	r3, #2
  }
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3720      	adds	r7, #32
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	4baa      	ldr	r3, [pc, #680]	; (8003dfc <UART_SetConfig+0x2d4>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6812      	ldr	r2, [r2, #0]
 8003b5a:	6979      	ldr	r1, [r7, #20]
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a98      	ldr	r2, [pc, #608]	; (8003e00 <UART_SetConfig+0x2d8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d121      	bne.n	8003be8 <UART_SetConfig+0xc0>
 8003ba4:	4b97      	ldr	r3, [pc, #604]	; (8003e04 <UART_SetConfig+0x2dc>)
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d817      	bhi.n	8003be0 <UART_SetConfig+0xb8>
 8003bb0:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <UART_SetConfig+0x90>)
 8003bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb6:	bf00      	nop
 8003bb8:	08003bc9 	.word	0x08003bc9
 8003bbc:	08003bd5 	.word	0x08003bd5
 8003bc0:	08003bdb 	.word	0x08003bdb
 8003bc4:	08003bcf 	.word	0x08003bcf
 8003bc8:	2301      	movs	r3, #1
 8003bca:	77fb      	strb	r3, [r7, #31]
 8003bcc:	e0b2      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	77fb      	strb	r3, [r7, #31]
 8003bd2:	e0af      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	77fb      	strb	r3, [r7, #31]
 8003bd8:	e0ac      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003bda:	2308      	movs	r3, #8
 8003bdc:	77fb      	strb	r3, [r7, #31]
 8003bde:	e0a9      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003be0:	2310      	movs	r3, #16
 8003be2:	77fb      	strb	r3, [r7, #31]
 8003be4:	bf00      	nop
 8003be6:	e0a5      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a86      	ldr	r2, [pc, #536]	; (8003e08 <UART_SetConfig+0x2e0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d123      	bne.n	8003c3a <UART_SetConfig+0x112>
 8003bf2:	4b84      	ldr	r3, [pc, #528]	; (8003e04 <UART_SetConfig+0x2dc>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bfe:	d012      	beq.n	8003c26 <UART_SetConfig+0xfe>
 8003c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c04:	d802      	bhi.n	8003c0c <UART_SetConfig+0xe4>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d007      	beq.n	8003c1a <UART_SetConfig+0xf2>
 8003c0a:	e012      	b.n	8003c32 <UART_SetConfig+0x10a>
 8003c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c10:	d00c      	beq.n	8003c2c <UART_SetConfig+0x104>
 8003c12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c16:	d003      	beq.n	8003c20 <UART_SetConfig+0xf8>
 8003c18:	e00b      	b.n	8003c32 <UART_SetConfig+0x10a>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	77fb      	strb	r3, [r7, #31]
 8003c1e:	e089      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003c20:	2302      	movs	r3, #2
 8003c22:	77fb      	strb	r3, [r7, #31]
 8003c24:	e086      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003c26:	2304      	movs	r3, #4
 8003c28:	77fb      	strb	r3, [r7, #31]
 8003c2a:	e083      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003c2c:	2308      	movs	r3, #8
 8003c2e:	77fb      	strb	r3, [r7, #31]
 8003c30:	e080      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003c32:	2310      	movs	r3, #16
 8003c34:	77fb      	strb	r3, [r7, #31]
 8003c36:	bf00      	nop
 8003c38:	e07c      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a73      	ldr	r2, [pc, #460]	; (8003e0c <UART_SetConfig+0x2e4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d123      	bne.n	8003c8c <UART_SetConfig+0x164>
 8003c44:	4b6f      	ldr	r3, [pc, #444]	; (8003e04 <UART_SetConfig+0x2dc>)
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003c4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c50:	d012      	beq.n	8003c78 <UART_SetConfig+0x150>
 8003c52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c56:	d802      	bhi.n	8003c5e <UART_SetConfig+0x136>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d007      	beq.n	8003c6c <UART_SetConfig+0x144>
 8003c5c:	e012      	b.n	8003c84 <UART_SetConfig+0x15c>
 8003c5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c62:	d00c      	beq.n	8003c7e <UART_SetConfig+0x156>
 8003c64:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c68:	d003      	beq.n	8003c72 <UART_SetConfig+0x14a>
 8003c6a:	e00b      	b.n	8003c84 <UART_SetConfig+0x15c>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	77fb      	strb	r3, [r7, #31]
 8003c70:	e060      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003c72:	2302      	movs	r3, #2
 8003c74:	77fb      	strb	r3, [r7, #31]
 8003c76:	e05d      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003c78:	2304      	movs	r3, #4
 8003c7a:	77fb      	strb	r3, [r7, #31]
 8003c7c:	e05a      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003c7e:	2308      	movs	r3, #8
 8003c80:	77fb      	strb	r3, [r7, #31]
 8003c82:	e057      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003c84:	2310      	movs	r3, #16
 8003c86:	77fb      	strb	r3, [r7, #31]
 8003c88:	bf00      	nop
 8003c8a:	e053      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a5f      	ldr	r2, [pc, #380]	; (8003e10 <UART_SetConfig+0x2e8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d123      	bne.n	8003cde <UART_SetConfig+0x1b6>
 8003c96:	4b5b      	ldr	r3, [pc, #364]	; (8003e04 <UART_SetConfig+0x2dc>)
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ca2:	d012      	beq.n	8003cca <UART_SetConfig+0x1a2>
 8003ca4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ca8:	d802      	bhi.n	8003cb0 <UART_SetConfig+0x188>
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d007      	beq.n	8003cbe <UART_SetConfig+0x196>
 8003cae:	e012      	b.n	8003cd6 <UART_SetConfig+0x1ae>
 8003cb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cb4:	d00c      	beq.n	8003cd0 <UART_SetConfig+0x1a8>
 8003cb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cba:	d003      	beq.n	8003cc4 <UART_SetConfig+0x19c>
 8003cbc:	e00b      	b.n	8003cd6 <UART_SetConfig+0x1ae>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	77fb      	strb	r3, [r7, #31]
 8003cc2:	e037      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	77fb      	strb	r3, [r7, #31]
 8003cc8:	e034      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003cca:	2304      	movs	r3, #4
 8003ccc:	77fb      	strb	r3, [r7, #31]
 8003cce:	e031      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003cd0:	2308      	movs	r3, #8
 8003cd2:	77fb      	strb	r3, [r7, #31]
 8003cd4:	e02e      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003cd6:	2310      	movs	r3, #16
 8003cd8:	77fb      	strb	r3, [r7, #31]
 8003cda:	bf00      	nop
 8003cdc:	e02a      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a4c      	ldr	r2, [pc, #304]	; (8003e14 <UART_SetConfig+0x2ec>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d123      	bne.n	8003d30 <UART_SetConfig+0x208>
 8003ce8:	4b46      	ldr	r3, [pc, #280]	; (8003e04 <UART_SetConfig+0x2dc>)
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cf4:	d012      	beq.n	8003d1c <UART_SetConfig+0x1f4>
 8003cf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cfa:	d802      	bhi.n	8003d02 <UART_SetConfig+0x1da>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d007      	beq.n	8003d10 <UART_SetConfig+0x1e8>
 8003d00:	e012      	b.n	8003d28 <UART_SetConfig+0x200>
 8003d02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d06:	d00c      	beq.n	8003d22 <UART_SetConfig+0x1fa>
 8003d08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d0c:	d003      	beq.n	8003d16 <UART_SetConfig+0x1ee>
 8003d0e:	e00b      	b.n	8003d28 <UART_SetConfig+0x200>
 8003d10:	2300      	movs	r3, #0
 8003d12:	77fb      	strb	r3, [r7, #31]
 8003d14:	e00e      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003d16:	2302      	movs	r3, #2
 8003d18:	77fb      	strb	r3, [r7, #31]
 8003d1a:	e00b      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	77fb      	strb	r3, [r7, #31]
 8003d20:	e008      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003d22:	2308      	movs	r3, #8
 8003d24:	77fb      	strb	r3, [r7, #31]
 8003d26:	e005      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003d28:	2310      	movs	r3, #16
 8003d2a:	77fb      	strb	r3, [r7, #31]
 8003d2c:	bf00      	nop
 8003d2e:	e001      	b.n	8003d34 <UART_SetConfig+0x20c>
 8003d30:	2310      	movs	r3, #16
 8003d32:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d3c:	d16e      	bne.n	8003e1c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003d3e:	7ffb      	ldrb	r3, [r7, #31]
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d828      	bhi.n	8003d96 <UART_SetConfig+0x26e>
 8003d44:	a201      	add	r2, pc, #4	; (adr r2, 8003d4c <UART_SetConfig+0x224>)
 8003d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4a:	bf00      	nop
 8003d4c:	08003d71 	.word	0x08003d71
 8003d50:	08003d79 	.word	0x08003d79
 8003d54:	08003d81 	.word	0x08003d81
 8003d58:	08003d97 	.word	0x08003d97
 8003d5c:	08003d87 	.word	0x08003d87
 8003d60:	08003d97 	.word	0x08003d97
 8003d64:	08003d97 	.word	0x08003d97
 8003d68:	08003d97 	.word	0x08003d97
 8003d6c:	08003d8f 	.word	0x08003d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d70:	f7ff fb96 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8003d74:	61b8      	str	r0, [r7, #24]
        break;
 8003d76:	e013      	b.n	8003da0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d78:	f7ff fbb4 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8003d7c:	61b8      	str	r0, [r7, #24]
        break;
 8003d7e:	e00f      	b.n	8003da0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d80:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <UART_SetConfig+0x2f0>)
 8003d82:	61bb      	str	r3, [r7, #24]
        break;
 8003d84:	e00c      	b.n	8003da0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d86:	f7ff fb13 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8003d8a:	61b8      	str	r0, [r7, #24]
        break;
 8003d8c:	e008      	b.n	8003da0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d92:	61bb      	str	r3, [r7, #24]
        break;
 8003d94:	e004      	b.n	8003da0 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	77bb      	strb	r3, [r7, #30]
        break;
 8003d9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 8086 	beq.w	8003eb4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	005a      	lsls	r2, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	085b      	lsrs	r3, r3, #1
 8003db2:	441a      	add	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	2b0f      	cmp	r3, #15
 8003dc4:	d916      	bls.n	8003df4 <UART_SetConfig+0x2cc>
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dcc:	d212      	bcs.n	8003df4 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	f023 030f 	bic.w	r3, r3, #15
 8003dd6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	085b      	lsrs	r3, r3, #1
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	89fb      	ldrh	r3, [r7, #14]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	89fa      	ldrh	r2, [r7, #14]
 8003df0:	60da      	str	r2, [r3, #12]
 8003df2:	e05f      	b.n	8003eb4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	77bb      	strb	r3, [r7, #30]
 8003df8:	e05c      	b.n	8003eb4 <UART_SetConfig+0x38c>
 8003dfa:	bf00      	nop
 8003dfc:	efff69f3 	.word	0xefff69f3
 8003e00:	40013800 	.word	0x40013800
 8003e04:	40021000 	.word	0x40021000
 8003e08:	40004400 	.word	0x40004400
 8003e0c:	40004800 	.word	0x40004800
 8003e10:	40004c00 	.word	0x40004c00
 8003e14:	40005000 	.word	0x40005000
 8003e18:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e1c:	7ffb      	ldrb	r3, [r7, #31]
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d827      	bhi.n	8003e72 <UART_SetConfig+0x34a>
 8003e22:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <UART_SetConfig+0x300>)
 8003e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e28:	08003e4d 	.word	0x08003e4d
 8003e2c:	08003e55 	.word	0x08003e55
 8003e30:	08003e5d 	.word	0x08003e5d
 8003e34:	08003e73 	.word	0x08003e73
 8003e38:	08003e63 	.word	0x08003e63
 8003e3c:	08003e73 	.word	0x08003e73
 8003e40:	08003e73 	.word	0x08003e73
 8003e44:	08003e73 	.word	0x08003e73
 8003e48:	08003e6b 	.word	0x08003e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e4c:	f7ff fb28 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8003e50:	61b8      	str	r0, [r7, #24]
        break;
 8003e52:	e013      	b.n	8003e7c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e54:	f7ff fb46 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8003e58:	61b8      	str	r0, [r7, #24]
        break;
 8003e5a:	e00f      	b.n	8003e7c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <UART_SetConfig+0x3a4>)
 8003e5e:	61bb      	str	r3, [r7, #24]
        break;
 8003e60:	e00c      	b.n	8003e7c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e62:	f7ff faa5 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 8003e66:	61b8      	str	r0, [r7, #24]
        break;
 8003e68:	e008      	b.n	8003e7c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e6e:	61bb      	str	r3, [r7, #24]
        break;
 8003e70:	e004      	b.n	8003e7c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	77bb      	strb	r3, [r7, #30]
        break;
 8003e7a:	bf00      	nop
    }

    if (pclk != 0U)
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d018      	beq.n	8003eb4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	085a      	lsrs	r2, r3, #1
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	441a      	add	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	2b0f      	cmp	r3, #15
 8003e9c:	d908      	bls.n	8003eb0 <UART_SetConfig+0x388>
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea4:	d204      	bcs.n	8003eb0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	60da      	str	r2, [r3, #12]
 8003eae:	e001      	b.n	8003eb4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003ec0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	007a1200 	.word	0x007a1200

08003ed0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01a      	beq.n	8003fe6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fce:	d10a      	bne.n	8003fe6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	605a      	str	r2, [r3, #4]
  }
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af02      	add	r7, sp, #8
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004024:	f7fd fa62 	bl	80014ec <HAL_GetTick>
 8004028:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b08      	cmp	r3, #8
 8004036:	d10e      	bne.n	8004056 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004038:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f82d 	bl	80040a6 <UART_WaitOnFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e023      	b.n	800409e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b04      	cmp	r3, #4
 8004062:	d10e      	bne.n	8004082 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004064:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f817 	bl	80040a6 <UART_WaitOnFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e00d      	b.n	800409e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2220      	movs	r2, #32
 8004086:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b09c      	sub	sp, #112	; 0x70
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	603b      	str	r3, [r7, #0]
 80040b2:	4613      	mov	r3, r2
 80040b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b6:	e0a5      	b.n	8004204 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040be:	f000 80a1 	beq.w	8004204 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c2:	f7fd fa13 	bl	80014ec <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d302      	bcc.n	80040d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80040d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d13e      	bne.n	8004156 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80040e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040ec:	667b      	str	r3, [r7, #100]	; 0x64
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1e6      	bne.n	80040d8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3308      	adds	r3, #8
 8004110:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411c:	f023 0301 	bic.w	r3, r3, #1
 8004120:	663b      	str	r3, [r7, #96]	; 0x60
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3308      	adds	r3, #8
 8004128:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800412a:	64ba      	str	r2, [r7, #72]	; 0x48
 800412c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004130:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004132:	e841 2300 	strex	r3, r2, [r1]
 8004136:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1e5      	bne.n	800410a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2220      	movs	r2, #32
 8004148:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e067      	b.n	8004226 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d04f      	beq.n	8004204 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800416e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004172:	d147      	bne.n	8004204 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800417c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004186:	e853 3f00 	ldrex	r3, [r3]
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004192:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	461a      	mov	r2, r3
 800419a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419c:	637b      	str	r3, [r7, #52]	; 0x34
 800419e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041a4:	e841 2300 	strex	r3, r2, [r1]
 80041a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1e6      	bne.n	800417e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3308      	adds	r3, #8
 80041b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	e853 3f00 	ldrex	r3, [r3]
 80041be:	613b      	str	r3, [r7, #16]
   return(result);
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f023 0301 	bic.w	r3, r3, #1
 80041c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3308      	adds	r3, #8
 80041ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041d0:	623a      	str	r2, [r7, #32]
 80041d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	69f9      	ldr	r1, [r7, #28]
 80041d6:	6a3a      	ldr	r2, [r7, #32]
 80041d8:	e841 2300 	strex	r3, r2, [r1]
 80041dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e5      	bne.n	80041b0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2220      	movs	r2, #32
 80041ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e010      	b.n	8004226 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69da      	ldr	r2, [r3, #28]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	4013      	ands	r3, r2
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	429a      	cmp	r2, r3
 8004212:	bf0c      	ite	eq
 8004214:	2301      	moveq	r3, #1
 8004216:	2300      	movne	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	461a      	mov	r2, r3
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	429a      	cmp	r2, r3
 8004220:	f43f af4a 	beq.w	80040b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3770      	adds	r7, #112	; 0x70
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <__errno>:
 8004230:	4b01      	ldr	r3, [pc, #4]	; (8004238 <__errno+0x8>)
 8004232:	6818      	ldr	r0, [r3, #0]
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	2000000c 	.word	0x2000000c

0800423c <__libc_init_array>:
 800423c:	b570      	push	{r4, r5, r6, lr}
 800423e:	4e0d      	ldr	r6, [pc, #52]	; (8004274 <__libc_init_array+0x38>)
 8004240:	4c0d      	ldr	r4, [pc, #52]	; (8004278 <__libc_init_array+0x3c>)
 8004242:	1ba4      	subs	r4, r4, r6
 8004244:	10a4      	asrs	r4, r4, #2
 8004246:	2500      	movs	r5, #0
 8004248:	42a5      	cmp	r5, r4
 800424a:	d109      	bne.n	8004260 <__libc_init_array+0x24>
 800424c:	4e0b      	ldr	r6, [pc, #44]	; (800427c <__libc_init_array+0x40>)
 800424e:	4c0c      	ldr	r4, [pc, #48]	; (8004280 <__libc_init_array+0x44>)
 8004250:	f002 fb4a 	bl	80068e8 <_init>
 8004254:	1ba4      	subs	r4, r4, r6
 8004256:	10a4      	asrs	r4, r4, #2
 8004258:	2500      	movs	r5, #0
 800425a:	42a5      	cmp	r5, r4
 800425c:	d105      	bne.n	800426a <__libc_init_array+0x2e>
 800425e:	bd70      	pop	{r4, r5, r6, pc}
 8004260:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004264:	4798      	blx	r3
 8004266:	3501      	adds	r5, #1
 8004268:	e7ee      	b.n	8004248 <__libc_init_array+0xc>
 800426a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800426e:	4798      	blx	r3
 8004270:	3501      	adds	r5, #1
 8004272:	e7f2      	b.n	800425a <__libc_init_array+0x1e>
 8004274:	08006c10 	.word	0x08006c10
 8004278:	08006c10 	.word	0x08006c10
 800427c:	08006c10 	.word	0x08006c10
 8004280:	08006c14 	.word	0x08006c14

08004284 <memcpy>:
 8004284:	b510      	push	{r4, lr}
 8004286:	1e43      	subs	r3, r0, #1
 8004288:	440a      	add	r2, r1
 800428a:	4291      	cmp	r1, r2
 800428c:	d100      	bne.n	8004290 <memcpy+0xc>
 800428e:	bd10      	pop	{r4, pc}
 8004290:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004294:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004298:	e7f7      	b.n	800428a <memcpy+0x6>

0800429a <memset>:
 800429a:	4402      	add	r2, r0
 800429c:	4603      	mov	r3, r0
 800429e:	4293      	cmp	r3, r2
 80042a0:	d100      	bne.n	80042a4 <memset+0xa>
 80042a2:	4770      	bx	lr
 80042a4:	f803 1b01 	strb.w	r1, [r3], #1
 80042a8:	e7f9      	b.n	800429e <memset+0x4>

080042aa <__cvt>:
 80042aa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042ae:	ec55 4b10 	vmov	r4, r5, d0
 80042b2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80042b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80042b8:	2d00      	cmp	r5, #0
 80042ba:	460e      	mov	r6, r1
 80042bc:	4691      	mov	r9, r2
 80042be:	4619      	mov	r1, r3
 80042c0:	bfb8      	it	lt
 80042c2:	4622      	movlt	r2, r4
 80042c4:	462b      	mov	r3, r5
 80042c6:	f027 0720 	bic.w	r7, r7, #32
 80042ca:	bfbb      	ittet	lt
 80042cc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80042d0:	461d      	movlt	r5, r3
 80042d2:	2300      	movge	r3, #0
 80042d4:	232d      	movlt	r3, #45	; 0x2d
 80042d6:	bfb8      	it	lt
 80042d8:	4614      	movlt	r4, r2
 80042da:	2f46      	cmp	r7, #70	; 0x46
 80042dc:	700b      	strb	r3, [r1, #0]
 80042de:	d004      	beq.n	80042ea <__cvt+0x40>
 80042e0:	2f45      	cmp	r7, #69	; 0x45
 80042e2:	d100      	bne.n	80042e6 <__cvt+0x3c>
 80042e4:	3601      	adds	r6, #1
 80042e6:	2102      	movs	r1, #2
 80042e8:	e000      	b.n	80042ec <__cvt+0x42>
 80042ea:	2103      	movs	r1, #3
 80042ec:	ab03      	add	r3, sp, #12
 80042ee:	9301      	str	r3, [sp, #4]
 80042f0:	ab02      	add	r3, sp, #8
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	4632      	mov	r2, r6
 80042f6:	4653      	mov	r3, sl
 80042f8:	ec45 4b10 	vmov	d0, r4, r5
 80042fc:	f000 fcd8 	bl	8004cb0 <_dtoa_r>
 8004300:	2f47      	cmp	r7, #71	; 0x47
 8004302:	4680      	mov	r8, r0
 8004304:	d102      	bne.n	800430c <__cvt+0x62>
 8004306:	f019 0f01 	tst.w	r9, #1
 800430a:	d026      	beq.n	800435a <__cvt+0xb0>
 800430c:	2f46      	cmp	r7, #70	; 0x46
 800430e:	eb08 0906 	add.w	r9, r8, r6
 8004312:	d111      	bne.n	8004338 <__cvt+0x8e>
 8004314:	f898 3000 	ldrb.w	r3, [r8]
 8004318:	2b30      	cmp	r3, #48	; 0x30
 800431a:	d10a      	bne.n	8004332 <__cvt+0x88>
 800431c:	2200      	movs	r2, #0
 800431e:	2300      	movs	r3, #0
 8004320:	4620      	mov	r0, r4
 8004322:	4629      	mov	r1, r5
 8004324:	f7fc fbd8 	bl	8000ad8 <__aeabi_dcmpeq>
 8004328:	b918      	cbnz	r0, 8004332 <__cvt+0x88>
 800432a:	f1c6 0601 	rsb	r6, r6, #1
 800432e:	f8ca 6000 	str.w	r6, [sl]
 8004332:	f8da 3000 	ldr.w	r3, [sl]
 8004336:	4499      	add	r9, r3
 8004338:	2200      	movs	r2, #0
 800433a:	2300      	movs	r3, #0
 800433c:	4620      	mov	r0, r4
 800433e:	4629      	mov	r1, r5
 8004340:	f7fc fbca 	bl	8000ad8 <__aeabi_dcmpeq>
 8004344:	b938      	cbnz	r0, 8004356 <__cvt+0xac>
 8004346:	2230      	movs	r2, #48	; 0x30
 8004348:	9b03      	ldr	r3, [sp, #12]
 800434a:	454b      	cmp	r3, r9
 800434c:	d205      	bcs.n	800435a <__cvt+0xb0>
 800434e:	1c59      	adds	r1, r3, #1
 8004350:	9103      	str	r1, [sp, #12]
 8004352:	701a      	strb	r2, [r3, #0]
 8004354:	e7f8      	b.n	8004348 <__cvt+0x9e>
 8004356:	f8cd 900c 	str.w	r9, [sp, #12]
 800435a:	9b03      	ldr	r3, [sp, #12]
 800435c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800435e:	eba3 0308 	sub.w	r3, r3, r8
 8004362:	4640      	mov	r0, r8
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	b004      	add	sp, #16
 8004368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800436c <__exponent>:
 800436c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800436e:	2900      	cmp	r1, #0
 8004370:	4604      	mov	r4, r0
 8004372:	bfba      	itte	lt
 8004374:	4249      	neglt	r1, r1
 8004376:	232d      	movlt	r3, #45	; 0x2d
 8004378:	232b      	movge	r3, #43	; 0x2b
 800437a:	2909      	cmp	r1, #9
 800437c:	f804 2b02 	strb.w	r2, [r4], #2
 8004380:	7043      	strb	r3, [r0, #1]
 8004382:	dd20      	ble.n	80043c6 <__exponent+0x5a>
 8004384:	f10d 0307 	add.w	r3, sp, #7
 8004388:	461f      	mov	r7, r3
 800438a:	260a      	movs	r6, #10
 800438c:	fb91 f5f6 	sdiv	r5, r1, r6
 8004390:	fb06 1115 	mls	r1, r6, r5, r1
 8004394:	3130      	adds	r1, #48	; 0x30
 8004396:	2d09      	cmp	r5, #9
 8004398:	f803 1c01 	strb.w	r1, [r3, #-1]
 800439c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80043a0:	4629      	mov	r1, r5
 80043a2:	dc09      	bgt.n	80043b8 <__exponent+0x4c>
 80043a4:	3130      	adds	r1, #48	; 0x30
 80043a6:	3b02      	subs	r3, #2
 80043a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80043ac:	42bb      	cmp	r3, r7
 80043ae:	4622      	mov	r2, r4
 80043b0:	d304      	bcc.n	80043bc <__exponent+0x50>
 80043b2:	1a10      	subs	r0, r2, r0
 80043b4:	b003      	add	sp, #12
 80043b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043b8:	4613      	mov	r3, r2
 80043ba:	e7e7      	b.n	800438c <__exponent+0x20>
 80043bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043c0:	f804 2b01 	strb.w	r2, [r4], #1
 80043c4:	e7f2      	b.n	80043ac <__exponent+0x40>
 80043c6:	2330      	movs	r3, #48	; 0x30
 80043c8:	4419      	add	r1, r3
 80043ca:	7083      	strb	r3, [r0, #2]
 80043cc:	1d02      	adds	r2, r0, #4
 80043ce:	70c1      	strb	r1, [r0, #3]
 80043d0:	e7ef      	b.n	80043b2 <__exponent+0x46>
	...

080043d4 <_printf_float>:
 80043d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d8:	b08d      	sub	sp, #52	; 0x34
 80043da:	460c      	mov	r4, r1
 80043dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80043e0:	4616      	mov	r6, r2
 80043e2:	461f      	mov	r7, r3
 80043e4:	4605      	mov	r5, r0
 80043e6:	f001 fae5 	bl	80059b4 <_localeconv_r>
 80043ea:	6803      	ldr	r3, [r0, #0]
 80043ec:	9304      	str	r3, [sp, #16]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fb fef6 	bl	80001e0 <strlen>
 80043f4:	2300      	movs	r3, #0
 80043f6:	930a      	str	r3, [sp, #40]	; 0x28
 80043f8:	f8d8 3000 	ldr.w	r3, [r8]
 80043fc:	9005      	str	r0, [sp, #20]
 80043fe:	3307      	adds	r3, #7
 8004400:	f023 0307 	bic.w	r3, r3, #7
 8004404:	f103 0208 	add.w	r2, r3, #8
 8004408:	f894 a018 	ldrb.w	sl, [r4, #24]
 800440c:	f8d4 b000 	ldr.w	fp, [r4]
 8004410:	f8c8 2000 	str.w	r2, [r8]
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800441c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004420:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004424:	9307      	str	r3, [sp, #28]
 8004426:	f8cd 8018 	str.w	r8, [sp, #24]
 800442a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800442e:	4ba7      	ldr	r3, [pc, #668]	; (80046cc <_printf_float+0x2f8>)
 8004430:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004434:	f7fc fb82 	bl	8000b3c <__aeabi_dcmpun>
 8004438:	bb70      	cbnz	r0, 8004498 <_printf_float+0xc4>
 800443a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800443e:	4ba3      	ldr	r3, [pc, #652]	; (80046cc <_printf_float+0x2f8>)
 8004440:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004444:	f7fc fb5c 	bl	8000b00 <__aeabi_dcmple>
 8004448:	bb30      	cbnz	r0, 8004498 <_printf_float+0xc4>
 800444a:	2200      	movs	r2, #0
 800444c:	2300      	movs	r3, #0
 800444e:	4640      	mov	r0, r8
 8004450:	4649      	mov	r1, r9
 8004452:	f7fc fb4b 	bl	8000aec <__aeabi_dcmplt>
 8004456:	b110      	cbz	r0, 800445e <_printf_float+0x8a>
 8004458:	232d      	movs	r3, #45	; 0x2d
 800445a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800445e:	4a9c      	ldr	r2, [pc, #624]	; (80046d0 <_printf_float+0x2fc>)
 8004460:	4b9c      	ldr	r3, [pc, #624]	; (80046d4 <_printf_float+0x300>)
 8004462:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004466:	bf8c      	ite	hi
 8004468:	4690      	movhi	r8, r2
 800446a:	4698      	movls	r8, r3
 800446c:	2303      	movs	r3, #3
 800446e:	f02b 0204 	bic.w	r2, fp, #4
 8004472:	6123      	str	r3, [r4, #16]
 8004474:	6022      	str	r2, [r4, #0]
 8004476:	f04f 0900 	mov.w	r9, #0
 800447a:	9700      	str	r7, [sp, #0]
 800447c:	4633      	mov	r3, r6
 800447e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004480:	4621      	mov	r1, r4
 8004482:	4628      	mov	r0, r5
 8004484:	f000 f9e6 	bl	8004854 <_printf_common>
 8004488:	3001      	adds	r0, #1
 800448a:	f040 808d 	bne.w	80045a8 <_printf_float+0x1d4>
 800448e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004492:	b00d      	add	sp, #52	; 0x34
 8004494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004498:	4642      	mov	r2, r8
 800449a:	464b      	mov	r3, r9
 800449c:	4640      	mov	r0, r8
 800449e:	4649      	mov	r1, r9
 80044a0:	f7fc fb4c 	bl	8000b3c <__aeabi_dcmpun>
 80044a4:	b110      	cbz	r0, 80044ac <_printf_float+0xd8>
 80044a6:	4a8c      	ldr	r2, [pc, #560]	; (80046d8 <_printf_float+0x304>)
 80044a8:	4b8c      	ldr	r3, [pc, #560]	; (80046dc <_printf_float+0x308>)
 80044aa:	e7da      	b.n	8004462 <_printf_float+0x8e>
 80044ac:	6861      	ldr	r1, [r4, #4]
 80044ae:	1c4b      	adds	r3, r1, #1
 80044b0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80044b4:	a80a      	add	r0, sp, #40	; 0x28
 80044b6:	d13e      	bne.n	8004536 <_printf_float+0x162>
 80044b8:	2306      	movs	r3, #6
 80044ba:	6063      	str	r3, [r4, #4]
 80044bc:	2300      	movs	r3, #0
 80044be:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80044c2:	ab09      	add	r3, sp, #36	; 0x24
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	ec49 8b10 	vmov	d0, r8, r9
 80044ca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80044ce:	6022      	str	r2, [r4, #0]
 80044d0:	f8cd a004 	str.w	sl, [sp, #4]
 80044d4:	6861      	ldr	r1, [r4, #4]
 80044d6:	4628      	mov	r0, r5
 80044d8:	f7ff fee7 	bl	80042aa <__cvt>
 80044dc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80044e0:	2b47      	cmp	r3, #71	; 0x47
 80044e2:	4680      	mov	r8, r0
 80044e4:	d109      	bne.n	80044fa <_printf_float+0x126>
 80044e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044e8:	1cd8      	adds	r0, r3, #3
 80044ea:	db02      	blt.n	80044f2 <_printf_float+0x11e>
 80044ec:	6862      	ldr	r2, [r4, #4]
 80044ee:	4293      	cmp	r3, r2
 80044f0:	dd47      	ble.n	8004582 <_printf_float+0x1ae>
 80044f2:	f1aa 0a02 	sub.w	sl, sl, #2
 80044f6:	fa5f fa8a 	uxtb.w	sl, sl
 80044fa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80044fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004500:	d824      	bhi.n	800454c <_printf_float+0x178>
 8004502:	3901      	subs	r1, #1
 8004504:	4652      	mov	r2, sl
 8004506:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800450a:	9109      	str	r1, [sp, #36]	; 0x24
 800450c:	f7ff ff2e 	bl	800436c <__exponent>
 8004510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004512:	1813      	adds	r3, r2, r0
 8004514:	2a01      	cmp	r2, #1
 8004516:	4681      	mov	r9, r0
 8004518:	6123      	str	r3, [r4, #16]
 800451a:	dc02      	bgt.n	8004522 <_printf_float+0x14e>
 800451c:	6822      	ldr	r2, [r4, #0]
 800451e:	07d1      	lsls	r1, r2, #31
 8004520:	d501      	bpl.n	8004526 <_printf_float+0x152>
 8004522:	3301      	adds	r3, #1
 8004524:	6123      	str	r3, [r4, #16]
 8004526:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0a5      	beq.n	800447a <_printf_float+0xa6>
 800452e:	232d      	movs	r3, #45	; 0x2d
 8004530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004534:	e7a1      	b.n	800447a <_printf_float+0xa6>
 8004536:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800453a:	f000 8177 	beq.w	800482c <_printf_float+0x458>
 800453e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004542:	d1bb      	bne.n	80044bc <_printf_float+0xe8>
 8004544:	2900      	cmp	r1, #0
 8004546:	d1b9      	bne.n	80044bc <_printf_float+0xe8>
 8004548:	2301      	movs	r3, #1
 800454a:	e7b6      	b.n	80044ba <_printf_float+0xe6>
 800454c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004550:	d119      	bne.n	8004586 <_printf_float+0x1b2>
 8004552:	2900      	cmp	r1, #0
 8004554:	6863      	ldr	r3, [r4, #4]
 8004556:	dd0c      	ble.n	8004572 <_printf_float+0x19e>
 8004558:	6121      	str	r1, [r4, #16]
 800455a:	b913      	cbnz	r3, 8004562 <_printf_float+0x18e>
 800455c:	6822      	ldr	r2, [r4, #0]
 800455e:	07d2      	lsls	r2, r2, #31
 8004560:	d502      	bpl.n	8004568 <_printf_float+0x194>
 8004562:	3301      	adds	r3, #1
 8004564:	440b      	add	r3, r1
 8004566:	6123      	str	r3, [r4, #16]
 8004568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800456a:	65a3      	str	r3, [r4, #88]	; 0x58
 800456c:	f04f 0900 	mov.w	r9, #0
 8004570:	e7d9      	b.n	8004526 <_printf_float+0x152>
 8004572:	b913      	cbnz	r3, 800457a <_printf_float+0x1a6>
 8004574:	6822      	ldr	r2, [r4, #0]
 8004576:	07d0      	lsls	r0, r2, #31
 8004578:	d501      	bpl.n	800457e <_printf_float+0x1aa>
 800457a:	3302      	adds	r3, #2
 800457c:	e7f3      	b.n	8004566 <_printf_float+0x192>
 800457e:	2301      	movs	r3, #1
 8004580:	e7f1      	b.n	8004566 <_printf_float+0x192>
 8004582:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004586:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800458a:	4293      	cmp	r3, r2
 800458c:	db05      	blt.n	800459a <_printf_float+0x1c6>
 800458e:	6822      	ldr	r2, [r4, #0]
 8004590:	6123      	str	r3, [r4, #16]
 8004592:	07d1      	lsls	r1, r2, #31
 8004594:	d5e8      	bpl.n	8004568 <_printf_float+0x194>
 8004596:	3301      	adds	r3, #1
 8004598:	e7e5      	b.n	8004566 <_printf_float+0x192>
 800459a:	2b00      	cmp	r3, #0
 800459c:	bfd4      	ite	le
 800459e:	f1c3 0302 	rsble	r3, r3, #2
 80045a2:	2301      	movgt	r3, #1
 80045a4:	4413      	add	r3, r2
 80045a6:	e7de      	b.n	8004566 <_printf_float+0x192>
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	055a      	lsls	r2, r3, #21
 80045ac:	d407      	bmi.n	80045be <_printf_float+0x1ea>
 80045ae:	6923      	ldr	r3, [r4, #16]
 80045b0:	4642      	mov	r2, r8
 80045b2:	4631      	mov	r1, r6
 80045b4:	4628      	mov	r0, r5
 80045b6:	47b8      	blx	r7
 80045b8:	3001      	adds	r0, #1
 80045ba:	d12b      	bne.n	8004614 <_printf_float+0x240>
 80045bc:	e767      	b.n	800448e <_printf_float+0xba>
 80045be:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80045c2:	f240 80dc 	bls.w	800477e <_printf_float+0x3aa>
 80045c6:	2200      	movs	r2, #0
 80045c8:	2300      	movs	r3, #0
 80045ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045ce:	f7fc fa83 	bl	8000ad8 <__aeabi_dcmpeq>
 80045d2:	2800      	cmp	r0, #0
 80045d4:	d033      	beq.n	800463e <_printf_float+0x26a>
 80045d6:	2301      	movs	r3, #1
 80045d8:	4a41      	ldr	r2, [pc, #260]	; (80046e0 <_printf_float+0x30c>)
 80045da:	4631      	mov	r1, r6
 80045dc:	4628      	mov	r0, r5
 80045de:	47b8      	blx	r7
 80045e0:	3001      	adds	r0, #1
 80045e2:	f43f af54 	beq.w	800448e <_printf_float+0xba>
 80045e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045ea:	429a      	cmp	r2, r3
 80045ec:	db02      	blt.n	80045f4 <_printf_float+0x220>
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	07d8      	lsls	r0, r3, #31
 80045f2:	d50f      	bpl.n	8004614 <_printf_float+0x240>
 80045f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045f8:	4631      	mov	r1, r6
 80045fa:	4628      	mov	r0, r5
 80045fc:	47b8      	blx	r7
 80045fe:	3001      	adds	r0, #1
 8004600:	f43f af45 	beq.w	800448e <_printf_float+0xba>
 8004604:	f04f 0800 	mov.w	r8, #0
 8004608:	f104 091a 	add.w	r9, r4, #26
 800460c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800460e:	3b01      	subs	r3, #1
 8004610:	4543      	cmp	r3, r8
 8004612:	dc09      	bgt.n	8004628 <_printf_float+0x254>
 8004614:	6823      	ldr	r3, [r4, #0]
 8004616:	079b      	lsls	r3, r3, #30
 8004618:	f100 8103 	bmi.w	8004822 <_printf_float+0x44e>
 800461c:	68e0      	ldr	r0, [r4, #12]
 800461e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004620:	4298      	cmp	r0, r3
 8004622:	bfb8      	it	lt
 8004624:	4618      	movlt	r0, r3
 8004626:	e734      	b.n	8004492 <_printf_float+0xbe>
 8004628:	2301      	movs	r3, #1
 800462a:	464a      	mov	r2, r9
 800462c:	4631      	mov	r1, r6
 800462e:	4628      	mov	r0, r5
 8004630:	47b8      	blx	r7
 8004632:	3001      	adds	r0, #1
 8004634:	f43f af2b 	beq.w	800448e <_printf_float+0xba>
 8004638:	f108 0801 	add.w	r8, r8, #1
 800463c:	e7e6      	b.n	800460c <_printf_float+0x238>
 800463e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004640:	2b00      	cmp	r3, #0
 8004642:	dc2b      	bgt.n	800469c <_printf_float+0x2c8>
 8004644:	2301      	movs	r3, #1
 8004646:	4a26      	ldr	r2, [pc, #152]	; (80046e0 <_printf_float+0x30c>)
 8004648:	4631      	mov	r1, r6
 800464a:	4628      	mov	r0, r5
 800464c:	47b8      	blx	r7
 800464e:	3001      	adds	r0, #1
 8004650:	f43f af1d 	beq.w	800448e <_printf_float+0xba>
 8004654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004656:	b923      	cbnz	r3, 8004662 <_printf_float+0x28e>
 8004658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800465a:	b913      	cbnz	r3, 8004662 <_printf_float+0x28e>
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	07d9      	lsls	r1, r3, #31
 8004660:	d5d8      	bpl.n	8004614 <_printf_float+0x240>
 8004662:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004666:	4631      	mov	r1, r6
 8004668:	4628      	mov	r0, r5
 800466a:	47b8      	blx	r7
 800466c:	3001      	adds	r0, #1
 800466e:	f43f af0e 	beq.w	800448e <_printf_float+0xba>
 8004672:	f04f 0900 	mov.w	r9, #0
 8004676:	f104 0a1a 	add.w	sl, r4, #26
 800467a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800467c:	425b      	negs	r3, r3
 800467e:	454b      	cmp	r3, r9
 8004680:	dc01      	bgt.n	8004686 <_printf_float+0x2b2>
 8004682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004684:	e794      	b.n	80045b0 <_printf_float+0x1dc>
 8004686:	2301      	movs	r3, #1
 8004688:	4652      	mov	r2, sl
 800468a:	4631      	mov	r1, r6
 800468c:	4628      	mov	r0, r5
 800468e:	47b8      	blx	r7
 8004690:	3001      	adds	r0, #1
 8004692:	f43f aefc 	beq.w	800448e <_printf_float+0xba>
 8004696:	f109 0901 	add.w	r9, r9, #1
 800469a:	e7ee      	b.n	800467a <_printf_float+0x2a6>
 800469c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800469e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046a0:	429a      	cmp	r2, r3
 80046a2:	bfa8      	it	ge
 80046a4:	461a      	movge	r2, r3
 80046a6:	2a00      	cmp	r2, #0
 80046a8:	4691      	mov	r9, r2
 80046aa:	dd07      	ble.n	80046bc <_printf_float+0x2e8>
 80046ac:	4613      	mov	r3, r2
 80046ae:	4631      	mov	r1, r6
 80046b0:	4642      	mov	r2, r8
 80046b2:	4628      	mov	r0, r5
 80046b4:	47b8      	blx	r7
 80046b6:	3001      	adds	r0, #1
 80046b8:	f43f aee9 	beq.w	800448e <_printf_float+0xba>
 80046bc:	f104 031a 	add.w	r3, r4, #26
 80046c0:	f04f 0b00 	mov.w	fp, #0
 80046c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046c8:	9306      	str	r3, [sp, #24]
 80046ca:	e015      	b.n	80046f8 <_printf_float+0x324>
 80046cc:	7fefffff 	.word	0x7fefffff
 80046d0:	08006958 	.word	0x08006958
 80046d4:	08006954 	.word	0x08006954
 80046d8:	08006960 	.word	0x08006960
 80046dc:	0800695c 	.word	0x0800695c
 80046e0:	08006964 	.word	0x08006964
 80046e4:	2301      	movs	r3, #1
 80046e6:	9a06      	ldr	r2, [sp, #24]
 80046e8:	4631      	mov	r1, r6
 80046ea:	4628      	mov	r0, r5
 80046ec:	47b8      	blx	r7
 80046ee:	3001      	adds	r0, #1
 80046f0:	f43f aecd 	beq.w	800448e <_printf_float+0xba>
 80046f4:	f10b 0b01 	add.w	fp, fp, #1
 80046f8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80046fc:	ebaa 0309 	sub.w	r3, sl, r9
 8004700:	455b      	cmp	r3, fp
 8004702:	dcef      	bgt.n	80046e4 <_printf_float+0x310>
 8004704:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004708:	429a      	cmp	r2, r3
 800470a:	44d0      	add	r8, sl
 800470c:	db15      	blt.n	800473a <_printf_float+0x366>
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	07da      	lsls	r2, r3, #31
 8004712:	d412      	bmi.n	800473a <_printf_float+0x366>
 8004714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004716:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004718:	eba3 020a 	sub.w	r2, r3, sl
 800471c:	eba3 0a01 	sub.w	sl, r3, r1
 8004720:	4592      	cmp	sl, r2
 8004722:	bfa8      	it	ge
 8004724:	4692      	movge	sl, r2
 8004726:	f1ba 0f00 	cmp.w	sl, #0
 800472a:	dc0e      	bgt.n	800474a <_printf_float+0x376>
 800472c:	f04f 0800 	mov.w	r8, #0
 8004730:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004734:	f104 091a 	add.w	r9, r4, #26
 8004738:	e019      	b.n	800476e <_printf_float+0x39a>
 800473a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800473e:	4631      	mov	r1, r6
 8004740:	4628      	mov	r0, r5
 8004742:	47b8      	blx	r7
 8004744:	3001      	adds	r0, #1
 8004746:	d1e5      	bne.n	8004714 <_printf_float+0x340>
 8004748:	e6a1      	b.n	800448e <_printf_float+0xba>
 800474a:	4653      	mov	r3, sl
 800474c:	4642      	mov	r2, r8
 800474e:	4631      	mov	r1, r6
 8004750:	4628      	mov	r0, r5
 8004752:	47b8      	blx	r7
 8004754:	3001      	adds	r0, #1
 8004756:	d1e9      	bne.n	800472c <_printf_float+0x358>
 8004758:	e699      	b.n	800448e <_printf_float+0xba>
 800475a:	2301      	movs	r3, #1
 800475c:	464a      	mov	r2, r9
 800475e:	4631      	mov	r1, r6
 8004760:	4628      	mov	r0, r5
 8004762:	47b8      	blx	r7
 8004764:	3001      	adds	r0, #1
 8004766:	f43f ae92 	beq.w	800448e <_printf_float+0xba>
 800476a:	f108 0801 	add.w	r8, r8, #1
 800476e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004772:	1a9b      	subs	r3, r3, r2
 8004774:	eba3 030a 	sub.w	r3, r3, sl
 8004778:	4543      	cmp	r3, r8
 800477a:	dcee      	bgt.n	800475a <_printf_float+0x386>
 800477c:	e74a      	b.n	8004614 <_printf_float+0x240>
 800477e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004780:	2a01      	cmp	r2, #1
 8004782:	dc01      	bgt.n	8004788 <_printf_float+0x3b4>
 8004784:	07db      	lsls	r3, r3, #31
 8004786:	d53a      	bpl.n	80047fe <_printf_float+0x42a>
 8004788:	2301      	movs	r3, #1
 800478a:	4642      	mov	r2, r8
 800478c:	4631      	mov	r1, r6
 800478e:	4628      	mov	r0, r5
 8004790:	47b8      	blx	r7
 8004792:	3001      	adds	r0, #1
 8004794:	f43f ae7b 	beq.w	800448e <_printf_float+0xba>
 8004798:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800479c:	4631      	mov	r1, r6
 800479e:	4628      	mov	r0, r5
 80047a0:	47b8      	blx	r7
 80047a2:	3001      	adds	r0, #1
 80047a4:	f108 0801 	add.w	r8, r8, #1
 80047a8:	f43f ae71 	beq.w	800448e <_printf_float+0xba>
 80047ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047ae:	2200      	movs	r2, #0
 80047b0:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80047b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047b8:	2300      	movs	r3, #0
 80047ba:	f7fc f98d 	bl	8000ad8 <__aeabi_dcmpeq>
 80047be:	b9c8      	cbnz	r0, 80047f4 <_printf_float+0x420>
 80047c0:	4653      	mov	r3, sl
 80047c2:	4642      	mov	r2, r8
 80047c4:	4631      	mov	r1, r6
 80047c6:	4628      	mov	r0, r5
 80047c8:	47b8      	blx	r7
 80047ca:	3001      	adds	r0, #1
 80047cc:	d10e      	bne.n	80047ec <_printf_float+0x418>
 80047ce:	e65e      	b.n	800448e <_printf_float+0xba>
 80047d0:	2301      	movs	r3, #1
 80047d2:	4652      	mov	r2, sl
 80047d4:	4631      	mov	r1, r6
 80047d6:	4628      	mov	r0, r5
 80047d8:	47b8      	blx	r7
 80047da:	3001      	adds	r0, #1
 80047dc:	f43f ae57 	beq.w	800448e <_printf_float+0xba>
 80047e0:	f108 0801 	add.w	r8, r8, #1
 80047e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047e6:	3b01      	subs	r3, #1
 80047e8:	4543      	cmp	r3, r8
 80047ea:	dcf1      	bgt.n	80047d0 <_printf_float+0x3fc>
 80047ec:	464b      	mov	r3, r9
 80047ee:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047f2:	e6de      	b.n	80045b2 <_printf_float+0x1de>
 80047f4:	f04f 0800 	mov.w	r8, #0
 80047f8:	f104 0a1a 	add.w	sl, r4, #26
 80047fc:	e7f2      	b.n	80047e4 <_printf_float+0x410>
 80047fe:	2301      	movs	r3, #1
 8004800:	e7df      	b.n	80047c2 <_printf_float+0x3ee>
 8004802:	2301      	movs	r3, #1
 8004804:	464a      	mov	r2, r9
 8004806:	4631      	mov	r1, r6
 8004808:	4628      	mov	r0, r5
 800480a:	47b8      	blx	r7
 800480c:	3001      	adds	r0, #1
 800480e:	f43f ae3e 	beq.w	800448e <_printf_float+0xba>
 8004812:	f108 0801 	add.w	r8, r8, #1
 8004816:	68e3      	ldr	r3, [r4, #12]
 8004818:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800481a:	1a9b      	subs	r3, r3, r2
 800481c:	4543      	cmp	r3, r8
 800481e:	dcf0      	bgt.n	8004802 <_printf_float+0x42e>
 8004820:	e6fc      	b.n	800461c <_printf_float+0x248>
 8004822:	f04f 0800 	mov.w	r8, #0
 8004826:	f104 0919 	add.w	r9, r4, #25
 800482a:	e7f4      	b.n	8004816 <_printf_float+0x442>
 800482c:	2900      	cmp	r1, #0
 800482e:	f43f ae8b 	beq.w	8004548 <_printf_float+0x174>
 8004832:	2300      	movs	r3, #0
 8004834:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004838:	ab09      	add	r3, sp, #36	; 0x24
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	ec49 8b10 	vmov	d0, r8, r9
 8004840:	6022      	str	r2, [r4, #0]
 8004842:	f8cd a004 	str.w	sl, [sp, #4]
 8004846:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800484a:	4628      	mov	r0, r5
 800484c:	f7ff fd2d 	bl	80042aa <__cvt>
 8004850:	4680      	mov	r8, r0
 8004852:	e648      	b.n	80044e6 <_printf_float+0x112>

08004854 <_printf_common>:
 8004854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004858:	4691      	mov	r9, r2
 800485a:	461f      	mov	r7, r3
 800485c:	688a      	ldr	r2, [r1, #8]
 800485e:	690b      	ldr	r3, [r1, #16]
 8004860:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004864:	4293      	cmp	r3, r2
 8004866:	bfb8      	it	lt
 8004868:	4613      	movlt	r3, r2
 800486a:	f8c9 3000 	str.w	r3, [r9]
 800486e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004872:	4606      	mov	r6, r0
 8004874:	460c      	mov	r4, r1
 8004876:	b112      	cbz	r2, 800487e <_printf_common+0x2a>
 8004878:	3301      	adds	r3, #1
 800487a:	f8c9 3000 	str.w	r3, [r9]
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	0699      	lsls	r1, r3, #26
 8004882:	bf42      	ittt	mi
 8004884:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004888:	3302      	addmi	r3, #2
 800488a:	f8c9 3000 	strmi.w	r3, [r9]
 800488e:	6825      	ldr	r5, [r4, #0]
 8004890:	f015 0506 	ands.w	r5, r5, #6
 8004894:	d107      	bne.n	80048a6 <_printf_common+0x52>
 8004896:	f104 0a19 	add.w	sl, r4, #25
 800489a:	68e3      	ldr	r3, [r4, #12]
 800489c:	f8d9 2000 	ldr.w	r2, [r9]
 80048a0:	1a9b      	subs	r3, r3, r2
 80048a2:	42ab      	cmp	r3, r5
 80048a4:	dc28      	bgt.n	80048f8 <_printf_common+0xa4>
 80048a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048aa:	6822      	ldr	r2, [r4, #0]
 80048ac:	3300      	adds	r3, #0
 80048ae:	bf18      	it	ne
 80048b0:	2301      	movne	r3, #1
 80048b2:	0692      	lsls	r2, r2, #26
 80048b4:	d42d      	bmi.n	8004912 <_printf_common+0xbe>
 80048b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048ba:	4639      	mov	r1, r7
 80048bc:	4630      	mov	r0, r6
 80048be:	47c0      	blx	r8
 80048c0:	3001      	adds	r0, #1
 80048c2:	d020      	beq.n	8004906 <_printf_common+0xb2>
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	68e5      	ldr	r5, [r4, #12]
 80048c8:	f8d9 2000 	ldr.w	r2, [r9]
 80048cc:	f003 0306 	and.w	r3, r3, #6
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	bf08      	it	eq
 80048d4:	1aad      	subeq	r5, r5, r2
 80048d6:	68a3      	ldr	r3, [r4, #8]
 80048d8:	6922      	ldr	r2, [r4, #16]
 80048da:	bf0c      	ite	eq
 80048dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048e0:	2500      	movne	r5, #0
 80048e2:	4293      	cmp	r3, r2
 80048e4:	bfc4      	itt	gt
 80048e6:	1a9b      	subgt	r3, r3, r2
 80048e8:	18ed      	addgt	r5, r5, r3
 80048ea:	f04f 0900 	mov.w	r9, #0
 80048ee:	341a      	adds	r4, #26
 80048f0:	454d      	cmp	r5, r9
 80048f2:	d11a      	bne.n	800492a <_printf_common+0xd6>
 80048f4:	2000      	movs	r0, #0
 80048f6:	e008      	b.n	800490a <_printf_common+0xb6>
 80048f8:	2301      	movs	r3, #1
 80048fa:	4652      	mov	r2, sl
 80048fc:	4639      	mov	r1, r7
 80048fe:	4630      	mov	r0, r6
 8004900:	47c0      	blx	r8
 8004902:	3001      	adds	r0, #1
 8004904:	d103      	bne.n	800490e <_printf_common+0xba>
 8004906:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800490a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800490e:	3501      	adds	r5, #1
 8004910:	e7c3      	b.n	800489a <_printf_common+0x46>
 8004912:	18e1      	adds	r1, r4, r3
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	2030      	movs	r0, #48	; 0x30
 8004918:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800491c:	4422      	add	r2, r4
 800491e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004922:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004926:	3302      	adds	r3, #2
 8004928:	e7c5      	b.n	80048b6 <_printf_common+0x62>
 800492a:	2301      	movs	r3, #1
 800492c:	4622      	mov	r2, r4
 800492e:	4639      	mov	r1, r7
 8004930:	4630      	mov	r0, r6
 8004932:	47c0      	blx	r8
 8004934:	3001      	adds	r0, #1
 8004936:	d0e6      	beq.n	8004906 <_printf_common+0xb2>
 8004938:	f109 0901 	add.w	r9, r9, #1
 800493c:	e7d8      	b.n	80048f0 <_printf_common+0x9c>
	...

08004940 <_printf_i>:
 8004940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004944:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004948:	460c      	mov	r4, r1
 800494a:	7e09      	ldrb	r1, [r1, #24]
 800494c:	b085      	sub	sp, #20
 800494e:	296e      	cmp	r1, #110	; 0x6e
 8004950:	4617      	mov	r7, r2
 8004952:	4606      	mov	r6, r0
 8004954:	4698      	mov	r8, r3
 8004956:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004958:	f000 80b3 	beq.w	8004ac2 <_printf_i+0x182>
 800495c:	d822      	bhi.n	80049a4 <_printf_i+0x64>
 800495e:	2963      	cmp	r1, #99	; 0x63
 8004960:	d036      	beq.n	80049d0 <_printf_i+0x90>
 8004962:	d80a      	bhi.n	800497a <_printf_i+0x3a>
 8004964:	2900      	cmp	r1, #0
 8004966:	f000 80b9 	beq.w	8004adc <_printf_i+0x19c>
 800496a:	2958      	cmp	r1, #88	; 0x58
 800496c:	f000 8083 	beq.w	8004a76 <_printf_i+0x136>
 8004970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004974:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004978:	e032      	b.n	80049e0 <_printf_i+0xa0>
 800497a:	2964      	cmp	r1, #100	; 0x64
 800497c:	d001      	beq.n	8004982 <_printf_i+0x42>
 800497e:	2969      	cmp	r1, #105	; 0x69
 8004980:	d1f6      	bne.n	8004970 <_printf_i+0x30>
 8004982:	6820      	ldr	r0, [r4, #0]
 8004984:	6813      	ldr	r3, [r2, #0]
 8004986:	0605      	lsls	r5, r0, #24
 8004988:	f103 0104 	add.w	r1, r3, #4
 800498c:	d52a      	bpl.n	80049e4 <_printf_i+0xa4>
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6011      	str	r1, [r2, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	da03      	bge.n	800499e <_printf_i+0x5e>
 8004996:	222d      	movs	r2, #45	; 0x2d
 8004998:	425b      	negs	r3, r3
 800499a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800499e:	486f      	ldr	r0, [pc, #444]	; (8004b5c <_printf_i+0x21c>)
 80049a0:	220a      	movs	r2, #10
 80049a2:	e039      	b.n	8004a18 <_printf_i+0xd8>
 80049a4:	2973      	cmp	r1, #115	; 0x73
 80049a6:	f000 809d 	beq.w	8004ae4 <_printf_i+0x1a4>
 80049aa:	d808      	bhi.n	80049be <_printf_i+0x7e>
 80049ac:	296f      	cmp	r1, #111	; 0x6f
 80049ae:	d020      	beq.n	80049f2 <_printf_i+0xb2>
 80049b0:	2970      	cmp	r1, #112	; 0x70
 80049b2:	d1dd      	bne.n	8004970 <_printf_i+0x30>
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	f043 0320 	orr.w	r3, r3, #32
 80049ba:	6023      	str	r3, [r4, #0]
 80049bc:	e003      	b.n	80049c6 <_printf_i+0x86>
 80049be:	2975      	cmp	r1, #117	; 0x75
 80049c0:	d017      	beq.n	80049f2 <_printf_i+0xb2>
 80049c2:	2978      	cmp	r1, #120	; 0x78
 80049c4:	d1d4      	bne.n	8004970 <_printf_i+0x30>
 80049c6:	2378      	movs	r3, #120	; 0x78
 80049c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049cc:	4864      	ldr	r0, [pc, #400]	; (8004b60 <_printf_i+0x220>)
 80049ce:	e055      	b.n	8004a7c <_printf_i+0x13c>
 80049d0:	6813      	ldr	r3, [r2, #0]
 80049d2:	1d19      	adds	r1, r3, #4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6011      	str	r1, [r2, #0]
 80049d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049e0:	2301      	movs	r3, #1
 80049e2:	e08c      	b.n	8004afe <_printf_i+0x1be>
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6011      	str	r1, [r2, #0]
 80049e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049ec:	bf18      	it	ne
 80049ee:	b21b      	sxthne	r3, r3
 80049f0:	e7cf      	b.n	8004992 <_printf_i+0x52>
 80049f2:	6813      	ldr	r3, [r2, #0]
 80049f4:	6825      	ldr	r5, [r4, #0]
 80049f6:	1d18      	adds	r0, r3, #4
 80049f8:	6010      	str	r0, [r2, #0]
 80049fa:	0628      	lsls	r0, r5, #24
 80049fc:	d501      	bpl.n	8004a02 <_printf_i+0xc2>
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	e002      	b.n	8004a08 <_printf_i+0xc8>
 8004a02:	0668      	lsls	r0, r5, #25
 8004a04:	d5fb      	bpl.n	80049fe <_printf_i+0xbe>
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	4854      	ldr	r0, [pc, #336]	; (8004b5c <_printf_i+0x21c>)
 8004a0a:	296f      	cmp	r1, #111	; 0x6f
 8004a0c:	bf14      	ite	ne
 8004a0e:	220a      	movne	r2, #10
 8004a10:	2208      	moveq	r2, #8
 8004a12:	2100      	movs	r1, #0
 8004a14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a18:	6865      	ldr	r5, [r4, #4]
 8004a1a:	60a5      	str	r5, [r4, #8]
 8004a1c:	2d00      	cmp	r5, #0
 8004a1e:	f2c0 8095 	blt.w	8004b4c <_printf_i+0x20c>
 8004a22:	6821      	ldr	r1, [r4, #0]
 8004a24:	f021 0104 	bic.w	r1, r1, #4
 8004a28:	6021      	str	r1, [r4, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d13d      	bne.n	8004aaa <_printf_i+0x16a>
 8004a2e:	2d00      	cmp	r5, #0
 8004a30:	f040 808e 	bne.w	8004b50 <_printf_i+0x210>
 8004a34:	4665      	mov	r5, ip
 8004a36:	2a08      	cmp	r2, #8
 8004a38:	d10b      	bne.n	8004a52 <_printf_i+0x112>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	07db      	lsls	r3, r3, #31
 8004a3e:	d508      	bpl.n	8004a52 <_printf_i+0x112>
 8004a40:	6923      	ldr	r3, [r4, #16]
 8004a42:	6862      	ldr	r2, [r4, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	bfde      	ittt	le
 8004a48:	2330      	movle	r3, #48	; 0x30
 8004a4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a4e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a52:	ebac 0305 	sub.w	r3, ip, r5
 8004a56:	6123      	str	r3, [r4, #16]
 8004a58:	f8cd 8000 	str.w	r8, [sp]
 8004a5c:	463b      	mov	r3, r7
 8004a5e:	aa03      	add	r2, sp, #12
 8004a60:	4621      	mov	r1, r4
 8004a62:	4630      	mov	r0, r6
 8004a64:	f7ff fef6 	bl	8004854 <_printf_common>
 8004a68:	3001      	adds	r0, #1
 8004a6a:	d14d      	bne.n	8004b08 <_printf_i+0x1c8>
 8004a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a70:	b005      	add	sp, #20
 8004a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a76:	4839      	ldr	r0, [pc, #228]	; (8004b5c <_printf_i+0x21c>)
 8004a78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004a7c:	6813      	ldr	r3, [r2, #0]
 8004a7e:	6821      	ldr	r1, [r4, #0]
 8004a80:	1d1d      	adds	r5, r3, #4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6015      	str	r5, [r2, #0]
 8004a86:	060a      	lsls	r2, r1, #24
 8004a88:	d50b      	bpl.n	8004aa2 <_printf_i+0x162>
 8004a8a:	07ca      	lsls	r2, r1, #31
 8004a8c:	bf44      	itt	mi
 8004a8e:	f041 0120 	orrmi.w	r1, r1, #32
 8004a92:	6021      	strmi	r1, [r4, #0]
 8004a94:	b91b      	cbnz	r3, 8004a9e <_printf_i+0x15e>
 8004a96:	6822      	ldr	r2, [r4, #0]
 8004a98:	f022 0220 	bic.w	r2, r2, #32
 8004a9c:	6022      	str	r2, [r4, #0]
 8004a9e:	2210      	movs	r2, #16
 8004aa0:	e7b7      	b.n	8004a12 <_printf_i+0xd2>
 8004aa2:	064d      	lsls	r5, r1, #25
 8004aa4:	bf48      	it	mi
 8004aa6:	b29b      	uxthmi	r3, r3
 8004aa8:	e7ef      	b.n	8004a8a <_printf_i+0x14a>
 8004aaa:	4665      	mov	r5, ip
 8004aac:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ab0:	fb02 3311 	mls	r3, r2, r1, r3
 8004ab4:	5cc3      	ldrb	r3, [r0, r3]
 8004ab6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004aba:	460b      	mov	r3, r1
 8004abc:	2900      	cmp	r1, #0
 8004abe:	d1f5      	bne.n	8004aac <_printf_i+0x16c>
 8004ac0:	e7b9      	b.n	8004a36 <_printf_i+0xf6>
 8004ac2:	6813      	ldr	r3, [r2, #0]
 8004ac4:	6825      	ldr	r5, [r4, #0]
 8004ac6:	6961      	ldr	r1, [r4, #20]
 8004ac8:	1d18      	adds	r0, r3, #4
 8004aca:	6010      	str	r0, [r2, #0]
 8004acc:	0628      	lsls	r0, r5, #24
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	d501      	bpl.n	8004ad6 <_printf_i+0x196>
 8004ad2:	6019      	str	r1, [r3, #0]
 8004ad4:	e002      	b.n	8004adc <_printf_i+0x19c>
 8004ad6:	066a      	lsls	r2, r5, #25
 8004ad8:	d5fb      	bpl.n	8004ad2 <_printf_i+0x192>
 8004ada:	8019      	strh	r1, [r3, #0]
 8004adc:	2300      	movs	r3, #0
 8004ade:	6123      	str	r3, [r4, #16]
 8004ae0:	4665      	mov	r5, ip
 8004ae2:	e7b9      	b.n	8004a58 <_printf_i+0x118>
 8004ae4:	6813      	ldr	r3, [r2, #0]
 8004ae6:	1d19      	adds	r1, r3, #4
 8004ae8:	6011      	str	r1, [r2, #0]
 8004aea:	681d      	ldr	r5, [r3, #0]
 8004aec:	6862      	ldr	r2, [r4, #4]
 8004aee:	2100      	movs	r1, #0
 8004af0:	4628      	mov	r0, r5
 8004af2:	f7fb fb7d 	bl	80001f0 <memchr>
 8004af6:	b108      	cbz	r0, 8004afc <_printf_i+0x1bc>
 8004af8:	1b40      	subs	r0, r0, r5
 8004afa:	6060      	str	r0, [r4, #4]
 8004afc:	6863      	ldr	r3, [r4, #4]
 8004afe:	6123      	str	r3, [r4, #16]
 8004b00:	2300      	movs	r3, #0
 8004b02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b06:	e7a7      	b.n	8004a58 <_printf_i+0x118>
 8004b08:	6923      	ldr	r3, [r4, #16]
 8004b0a:	462a      	mov	r2, r5
 8004b0c:	4639      	mov	r1, r7
 8004b0e:	4630      	mov	r0, r6
 8004b10:	47c0      	blx	r8
 8004b12:	3001      	adds	r0, #1
 8004b14:	d0aa      	beq.n	8004a6c <_printf_i+0x12c>
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	079b      	lsls	r3, r3, #30
 8004b1a:	d413      	bmi.n	8004b44 <_printf_i+0x204>
 8004b1c:	68e0      	ldr	r0, [r4, #12]
 8004b1e:	9b03      	ldr	r3, [sp, #12]
 8004b20:	4298      	cmp	r0, r3
 8004b22:	bfb8      	it	lt
 8004b24:	4618      	movlt	r0, r3
 8004b26:	e7a3      	b.n	8004a70 <_printf_i+0x130>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	464a      	mov	r2, r9
 8004b2c:	4639      	mov	r1, r7
 8004b2e:	4630      	mov	r0, r6
 8004b30:	47c0      	blx	r8
 8004b32:	3001      	adds	r0, #1
 8004b34:	d09a      	beq.n	8004a6c <_printf_i+0x12c>
 8004b36:	3501      	adds	r5, #1
 8004b38:	68e3      	ldr	r3, [r4, #12]
 8004b3a:	9a03      	ldr	r2, [sp, #12]
 8004b3c:	1a9b      	subs	r3, r3, r2
 8004b3e:	42ab      	cmp	r3, r5
 8004b40:	dcf2      	bgt.n	8004b28 <_printf_i+0x1e8>
 8004b42:	e7eb      	b.n	8004b1c <_printf_i+0x1dc>
 8004b44:	2500      	movs	r5, #0
 8004b46:	f104 0919 	add.w	r9, r4, #25
 8004b4a:	e7f5      	b.n	8004b38 <_printf_i+0x1f8>
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1ac      	bne.n	8004aaa <_printf_i+0x16a>
 8004b50:	7803      	ldrb	r3, [r0, #0]
 8004b52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b5a:	e76c      	b.n	8004a36 <_printf_i+0xf6>
 8004b5c:	08006966 	.word	0x08006966
 8004b60:	08006977 	.word	0x08006977

08004b64 <iprintf>:
 8004b64:	b40f      	push	{r0, r1, r2, r3}
 8004b66:	4b0a      	ldr	r3, [pc, #40]	; (8004b90 <iprintf+0x2c>)
 8004b68:	b513      	push	{r0, r1, r4, lr}
 8004b6a:	681c      	ldr	r4, [r3, #0]
 8004b6c:	b124      	cbz	r4, 8004b78 <iprintf+0x14>
 8004b6e:	69a3      	ldr	r3, [r4, #24]
 8004b70:	b913      	cbnz	r3, 8004b78 <iprintf+0x14>
 8004b72:	4620      	mov	r0, r4
 8004b74:	f000 fe94 	bl	80058a0 <__sinit>
 8004b78:	ab05      	add	r3, sp, #20
 8004b7a:	9a04      	ldr	r2, [sp, #16]
 8004b7c:	68a1      	ldr	r1, [r4, #8]
 8004b7e:	9301      	str	r3, [sp, #4]
 8004b80:	4620      	mov	r0, r4
 8004b82:	f001 fae9 	bl	8006158 <_vfiprintf_r>
 8004b86:	b002      	add	sp, #8
 8004b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b8c:	b004      	add	sp, #16
 8004b8e:	4770      	bx	lr
 8004b90:	2000000c 	.word	0x2000000c

08004b94 <quorem>:
 8004b94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b98:	6903      	ldr	r3, [r0, #16]
 8004b9a:	690c      	ldr	r4, [r1, #16]
 8004b9c:	42a3      	cmp	r3, r4
 8004b9e:	4680      	mov	r8, r0
 8004ba0:	f2c0 8082 	blt.w	8004ca8 <quorem+0x114>
 8004ba4:	3c01      	subs	r4, #1
 8004ba6:	f101 0714 	add.w	r7, r1, #20
 8004baa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004bae:	f100 0614 	add.w	r6, r0, #20
 8004bb2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004bb6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004bba:	eb06 030c 	add.w	r3, r6, ip
 8004bbe:	3501      	adds	r5, #1
 8004bc0:	eb07 090c 	add.w	r9, r7, ip
 8004bc4:	9301      	str	r3, [sp, #4]
 8004bc6:	fbb0 f5f5 	udiv	r5, r0, r5
 8004bca:	b395      	cbz	r5, 8004c32 <quorem+0x9e>
 8004bcc:	f04f 0a00 	mov.w	sl, #0
 8004bd0:	4638      	mov	r0, r7
 8004bd2:	46b6      	mov	lr, r6
 8004bd4:	46d3      	mov	fp, sl
 8004bd6:	f850 2b04 	ldr.w	r2, [r0], #4
 8004bda:	b293      	uxth	r3, r2
 8004bdc:	fb05 a303 	mla	r3, r5, r3, sl
 8004be0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	ebab 0303 	sub.w	r3, fp, r3
 8004bea:	0c12      	lsrs	r2, r2, #16
 8004bec:	f8de b000 	ldr.w	fp, [lr]
 8004bf0:	fb05 a202 	mla	r2, r5, r2, sl
 8004bf4:	fa13 f38b 	uxtah	r3, r3, fp
 8004bf8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004bfc:	fa1f fb82 	uxth.w	fp, r2
 8004c00:	f8de 2000 	ldr.w	r2, [lr]
 8004c04:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004c08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c12:	4581      	cmp	r9, r0
 8004c14:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004c18:	f84e 3b04 	str.w	r3, [lr], #4
 8004c1c:	d2db      	bcs.n	8004bd6 <quorem+0x42>
 8004c1e:	f856 300c 	ldr.w	r3, [r6, ip]
 8004c22:	b933      	cbnz	r3, 8004c32 <quorem+0x9e>
 8004c24:	9b01      	ldr	r3, [sp, #4]
 8004c26:	3b04      	subs	r3, #4
 8004c28:	429e      	cmp	r6, r3
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	d330      	bcc.n	8004c90 <quorem+0xfc>
 8004c2e:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c32:	4640      	mov	r0, r8
 8004c34:	f001 f8ea 	bl	8005e0c <__mcmp>
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	db25      	blt.n	8004c88 <quorem+0xf4>
 8004c3c:	3501      	adds	r5, #1
 8004c3e:	4630      	mov	r0, r6
 8004c40:	f04f 0c00 	mov.w	ip, #0
 8004c44:	f857 2b04 	ldr.w	r2, [r7], #4
 8004c48:	f8d0 e000 	ldr.w	lr, [r0]
 8004c4c:	b293      	uxth	r3, r2
 8004c4e:	ebac 0303 	sub.w	r3, ip, r3
 8004c52:	0c12      	lsrs	r2, r2, #16
 8004c54:	fa13 f38e 	uxtah	r3, r3, lr
 8004c58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c66:	45b9      	cmp	r9, r7
 8004c68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c6c:	f840 3b04 	str.w	r3, [r0], #4
 8004c70:	d2e8      	bcs.n	8004c44 <quorem+0xb0>
 8004c72:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004c76:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004c7a:	b92a      	cbnz	r2, 8004c88 <quorem+0xf4>
 8004c7c:	3b04      	subs	r3, #4
 8004c7e:	429e      	cmp	r6, r3
 8004c80:	461a      	mov	r2, r3
 8004c82:	d30b      	bcc.n	8004c9c <quorem+0x108>
 8004c84:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c88:	4628      	mov	r0, r5
 8004c8a:	b003      	add	sp, #12
 8004c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c90:	6812      	ldr	r2, [r2, #0]
 8004c92:	3b04      	subs	r3, #4
 8004c94:	2a00      	cmp	r2, #0
 8004c96:	d1ca      	bne.n	8004c2e <quorem+0x9a>
 8004c98:	3c01      	subs	r4, #1
 8004c9a:	e7c5      	b.n	8004c28 <quorem+0x94>
 8004c9c:	6812      	ldr	r2, [r2, #0]
 8004c9e:	3b04      	subs	r3, #4
 8004ca0:	2a00      	cmp	r2, #0
 8004ca2:	d1ef      	bne.n	8004c84 <quorem+0xf0>
 8004ca4:	3c01      	subs	r4, #1
 8004ca6:	e7ea      	b.n	8004c7e <quorem+0xea>
 8004ca8:	2000      	movs	r0, #0
 8004caa:	e7ee      	b.n	8004c8a <quorem+0xf6>
 8004cac:	0000      	movs	r0, r0
	...

08004cb0 <_dtoa_r>:
 8004cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb4:	ec57 6b10 	vmov	r6, r7, d0
 8004cb8:	b097      	sub	sp, #92	; 0x5c
 8004cba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004cbc:	9106      	str	r1, [sp, #24]
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	920b      	str	r2, [sp, #44]	; 0x2c
 8004cc2:	9312      	str	r3, [sp, #72]	; 0x48
 8004cc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004cc8:	e9cd 6700 	strd	r6, r7, [sp]
 8004ccc:	b93d      	cbnz	r5, 8004cde <_dtoa_r+0x2e>
 8004cce:	2010      	movs	r0, #16
 8004cd0:	f000 fe7e 	bl	80059d0 <malloc>
 8004cd4:	6260      	str	r0, [r4, #36]	; 0x24
 8004cd6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004cda:	6005      	str	r5, [r0, #0]
 8004cdc:	60c5      	str	r5, [r0, #12]
 8004cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ce0:	6819      	ldr	r1, [r3, #0]
 8004ce2:	b151      	cbz	r1, 8004cfa <_dtoa_r+0x4a>
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	604a      	str	r2, [r1, #4]
 8004ce8:	2301      	movs	r3, #1
 8004cea:	4093      	lsls	r3, r2
 8004cec:	608b      	str	r3, [r1, #8]
 8004cee:	4620      	mov	r0, r4
 8004cf0:	f000 feaa 	bl	8005a48 <_Bfree>
 8004cf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	1e3b      	subs	r3, r7, #0
 8004cfc:	bfbb      	ittet	lt
 8004cfe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d02:	9301      	strlt	r3, [sp, #4]
 8004d04:	2300      	movge	r3, #0
 8004d06:	2201      	movlt	r2, #1
 8004d08:	bfac      	ite	ge
 8004d0a:	f8c8 3000 	strge.w	r3, [r8]
 8004d0e:	f8c8 2000 	strlt.w	r2, [r8]
 8004d12:	4baf      	ldr	r3, [pc, #700]	; (8004fd0 <_dtoa_r+0x320>)
 8004d14:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004d18:	ea33 0308 	bics.w	r3, r3, r8
 8004d1c:	d114      	bne.n	8004d48 <_dtoa_r+0x98>
 8004d1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d20:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	9b00      	ldr	r3, [sp, #0]
 8004d28:	b923      	cbnz	r3, 8004d34 <_dtoa_r+0x84>
 8004d2a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	f000 8542 	beq.w	80057b8 <_dtoa_r+0xb08>
 8004d34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d36:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004fe4 <_dtoa_r+0x334>
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 8544 	beq.w	80057c8 <_dtoa_r+0xb18>
 8004d40:	f10b 0303 	add.w	r3, fp, #3
 8004d44:	f000 bd3e 	b.w	80057c4 <_dtoa_r+0xb14>
 8004d48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2300      	movs	r3, #0
 8004d50:	4630      	mov	r0, r6
 8004d52:	4639      	mov	r1, r7
 8004d54:	f7fb fec0 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d58:	4681      	mov	r9, r0
 8004d5a:	b168      	cbz	r0, 8004d78 <_dtoa_r+0xc8>
 8004d5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d5e:	2301      	movs	r3, #1
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 8524 	beq.w	80057b2 <_dtoa_r+0xb02>
 8004d6a:	4b9a      	ldr	r3, [pc, #616]	; (8004fd4 <_dtoa_r+0x324>)
 8004d6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d6e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	f000 bd28 	b.w	80057c8 <_dtoa_r+0xb18>
 8004d78:	aa14      	add	r2, sp, #80	; 0x50
 8004d7a:	a915      	add	r1, sp, #84	; 0x54
 8004d7c:	ec47 6b10 	vmov	d0, r6, r7
 8004d80:	4620      	mov	r0, r4
 8004d82:	f001 f8ba 	bl	8005efa <__d2b>
 8004d86:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004d8a:	9004      	str	r0, [sp, #16]
 8004d8c:	2d00      	cmp	r5, #0
 8004d8e:	d07c      	beq.n	8004e8a <_dtoa_r+0x1da>
 8004d90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004d94:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004d98:	46b2      	mov	sl, r6
 8004d9a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004d9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004da2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004da6:	2200      	movs	r2, #0
 8004da8:	4b8b      	ldr	r3, [pc, #556]	; (8004fd8 <_dtoa_r+0x328>)
 8004daa:	4650      	mov	r0, sl
 8004dac:	4659      	mov	r1, fp
 8004dae:	f7fb fa73 	bl	8000298 <__aeabi_dsub>
 8004db2:	a381      	add	r3, pc, #516	; (adr r3, 8004fb8 <_dtoa_r+0x308>)
 8004db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db8:	f7fb fc26 	bl	8000608 <__aeabi_dmul>
 8004dbc:	a380      	add	r3, pc, #512	; (adr r3, 8004fc0 <_dtoa_r+0x310>)
 8004dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc2:	f7fb fa6b 	bl	800029c <__adddf3>
 8004dc6:	4606      	mov	r6, r0
 8004dc8:	4628      	mov	r0, r5
 8004dca:	460f      	mov	r7, r1
 8004dcc:	f7fb fbb2 	bl	8000534 <__aeabi_i2d>
 8004dd0:	a37d      	add	r3, pc, #500	; (adr r3, 8004fc8 <_dtoa_r+0x318>)
 8004dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd6:	f7fb fc17 	bl	8000608 <__aeabi_dmul>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4630      	mov	r0, r6
 8004de0:	4639      	mov	r1, r7
 8004de2:	f7fb fa5b 	bl	800029c <__adddf3>
 8004de6:	4606      	mov	r6, r0
 8004de8:	460f      	mov	r7, r1
 8004dea:	f7fb febd 	bl	8000b68 <__aeabi_d2iz>
 8004dee:	2200      	movs	r2, #0
 8004df0:	4682      	mov	sl, r0
 8004df2:	2300      	movs	r3, #0
 8004df4:	4630      	mov	r0, r6
 8004df6:	4639      	mov	r1, r7
 8004df8:	f7fb fe78 	bl	8000aec <__aeabi_dcmplt>
 8004dfc:	b148      	cbz	r0, 8004e12 <_dtoa_r+0x162>
 8004dfe:	4650      	mov	r0, sl
 8004e00:	f7fb fb98 	bl	8000534 <__aeabi_i2d>
 8004e04:	4632      	mov	r2, r6
 8004e06:	463b      	mov	r3, r7
 8004e08:	f7fb fe66 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e0c:	b908      	cbnz	r0, 8004e12 <_dtoa_r+0x162>
 8004e0e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e12:	f1ba 0f16 	cmp.w	sl, #22
 8004e16:	d859      	bhi.n	8004ecc <_dtoa_r+0x21c>
 8004e18:	4970      	ldr	r1, [pc, #448]	; (8004fdc <_dtoa_r+0x32c>)
 8004e1a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004e1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e26:	f7fb fe7f 	bl	8000b28 <__aeabi_dcmpgt>
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	d050      	beq.n	8004ed0 <_dtoa_r+0x220>
 8004e2e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e32:	2300      	movs	r3, #0
 8004e34:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004e38:	1b5d      	subs	r5, r3, r5
 8004e3a:	f1b5 0801 	subs.w	r8, r5, #1
 8004e3e:	bf49      	itett	mi
 8004e40:	f1c5 0301 	rsbmi	r3, r5, #1
 8004e44:	2300      	movpl	r3, #0
 8004e46:	9305      	strmi	r3, [sp, #20]
 8004e48:	f04f 0800 	movmi.w	r8, #0
 8004e4c:	bf58      	it	pl
 8004e4e:	9305      	strpl	r3, [sp, #20]
 8004e50:	f1ba 0f00 	cmp.w	sl, #0
 8004e54:	db3e      	blt.n	8004ed4 <_dtoa_r+0x224>
 8004e56:	2300      	movs	r3, #0
 8004e58:	44d0      	add	r8, sl
 8004e5a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004e5e:	9307      	str	r3, [sp, #28]
 8004e60:	9b06      	ldr	r3, [sp, #24]
 8004e62:	2b09      	cmp	r3, #9
 8004e64:	f200 8090 	bhi.w	8004f88 <_dtoa_r+0x2d8>
 8004e68:	2b05      	cmp	r3, #5
 8004e6a:	bfc4      	itt	gt
 8004e6c:	3b04      	subgt	r3, #4
 8004e6e:	9306      	strgt	r3, [sp, #24]
 8004e70:	9b06      	ldr	r3, [sp, #24]
 8004e72:	f1a3 0302 	sub.w	r3, r3, #2
 8004e76:	bfcc      	ite	gt
 8004e78:	2500      	movgt	r5, #0
 8004e7a:	2501      	movle	r5, #1
 8004e7c:	2b03      	cmp	r3, #3
 8004e7e:	f200 808f 	bhi.w	8004fa0 <_dtoa_r+0x2f0>
 8004e82:	e8df f003 	tbb	[pc, r3]
 8004e86:	7f7d      	.short	0x7f7d
 8004e88:	7131      	.short	0x7131
 8004e8a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004e8e:	441d      	add	r5, r3
 8004e90:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004e94:	2820      	cmp	r0, #32
 8004e96:	dd13      	ble.n	8004ec0 <_dtoa_r+0x210>
 8004e98:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004e9c:	9b00      	ldr	r3, [sp, #0]
 8004e9e:	fa08 f800 	lsl.w	r8, r8, r0
 8004ea2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004ea6:	fa23 f000 	lsr.w	r0, r3, r0
 8004eaa:	ea48 0000 	orr.w	r0, r8, r0
 8004eae:	f7fb fb31 	bl	8000514 <__aeabi_ui2d>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	4682      	mov	sl, r0
 8004eb6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004eba:	3d01      	subs	r5, #1
 8004ebc:	9313      	str	r3, [sp, #76]	; 0x4c
 8004ebe:	e772      	b.n	8004da6 <_dtoa_r+0xf6>
 8004ec0:	9b00      	ldr	r3, [sp, #0]
 8004ec2:	f1c0 0020 	rsb	r0, r0, #32
 8004ec6:	fa03 f000 	lsl.w	r0, r3, r0
 8004eca:	e7f0      	b.n	8004eae <_dtoa_r+0x1fe>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e7b1      	b.n	8004e34 <_dtoa_r+0x184>
 8004ed0:	900f      	str	r0, [sp, #60]	; 0x3c
 8004ed2:	e7b0      	b.n	8004e36 <_dtoa_r+0x186>
 8004ed4:	9b05      	ldr	r3, [sp, #20]
 8004ed6:	eba3 030a 	sub.w	r3, r3, sl
 8004eda:	9305      	str	r3, [sp, #20]
 8004edc:	f1ca 0300 	rsb	r3, sl, #0
 8004ee0:	9307      	str	r3, [sp, #28]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	930e      	str	r3, [sp, #56]	; 0x38
 8004ee6:	e7bb      	b.n	8004e60 <_dtoa_r+0x1b0>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	930a      	str	r3, [sp, #40]	; 0x28
 8004eec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	dd59      	ble.n	8004fa6 <_dtoa_r+0x2f6>
 8004ef2:	9302      	str	r3, [sp, #8]
 8004ef4:	4699      	mov	r9, r3
 8004ef6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004ef8:	2200      	movs	r2, #0
 8004efa:	6072      	str	r2, [r6, #4]
 8004efc:	2204      	movs	r2, #4
 8004efe:	f102 0014 	add.w	r0, r2, #20
 8004f02:	4298      	cmp	r0, r3
 8004f04:	6871      	ldr	r1, [r6, #4]
 8004f06:	d953      	bls.n	8004fb0 <_dtoa_r+0x300>
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f000 fd69 	bl	80059e0 <_Balloc>
 8004f0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f10:	6030      	str	r0, [r6, #0]
 8004f12:	f1b9 0f0e 	cmp.w	r9, #14
 8004f16:	f8d3 b000 	ldr.w	fp, [r3]
 8004f1a:	f200 80e6 	bhi.w	80050ea <_dtoa_r+0x43a>
 8004f1e:	2d00      	cmp	r5, #0
 8004f20:	f000 80e3 	beq.w	80050ea <_dtoa_r+0x43a>
 8004f24:	ed9d 7b00 	vldr	d7, [sp]
 8004f28:	f1ba 0f00 	cmp.w	sl, #0
 8004f2c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004f30:	dd74      	ble.n	800501c <_dtoa_r+0x36c>
 8004f32:	4a2a      	ldr	r2, [pc, #168]	; (8004fdc <_dtoa_r+0x32c>)
 8004f34:	f00a 030f 	and.w	r3, sl, #15
 8004f38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f3c:	ed93 7b00 	vldr	d7, [r3]
 8004f40:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004f44:	06f0      	lsls	r0, r6, #27
 8004f46:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004f4a:	d565      	bpl.n	8005018 <_dtoa_r+0x368>
 8004f4c:	4b24      	ldr	r3, [pc, #144]	; (8004fe0 <_dtoa_r+0x330>)
 8004f4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f52:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f56:	f7fb fc81 	bl	800085c <__aeabi_ddiv>
 8004f5a:	e9cd 0100 	strd	r0, r1, [sp]
 8004f5e:	f006 060f 	and.w	r6, r6, #15
 8004f62:	2503      	movs	r5, #3
 8004f64:	4f1e      	ldr	r7, [pc, #120]	; (8004fe0 <_dtoa_r+0x330>)
 8004f66:	e04c      	b.n	8005002 <_dtoa_r+0x352>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8004f6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f6e:	4453      	add	r3, sl
 8004f70:	f103 0901 	add.w	r9, r3, #1
 8004f74:	9302      	str	r3, [sp, #8]
 8004f76:	464b      	mov	r3, r9
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	bfb8      	it	lt
 8004f7c:	2301      	movlt	r3, #1
 8004f7e:	e7ba      	b.n	8004ef6 <_dtoa_r+0x246>
 8004f80:	2300      	movs	r3, #0
 8004f82:	e7b2      	b.n	8004eea <_dtoa_r+0x23a>
 8004f84:	2300      	movs	r3, #0
 8004f86:	e7f0      	b.n	8004f6a <_dtoa_r+0x2ba>
 8004f88:	2501      	movs	r5, #1
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	9306      	str	r3, [sp, #24]
 8004f8e:	950a      	str	r5, [sp, #40]	; 0x28
 8004f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f94:	9302      	str	r3, [sp, #8]
 8004f96:	4699      	mov	r9, r3
 8004f98:	2200      	movs	r2, #0
 8004f9a:	2312      	movs	r3, #18
 8004f9c:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f9e:	e7aa      	b.n	8004ef6 <_dtoa_r+0x246>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	930a      	str	r3, [sp, #40]	; 0x28
 8004fa4:	e7f4      	b.n	8004f90 <_dtoa_r+0x2e0>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	9302      	str	r3, [sp, #8]
 8004faa:	4699      	mov	r9, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	e7f5      	b.n	8004f9c <_dtoa_r+0x2ec>
 8004fb0:	3101      	adds	r1, #1
 8004fb2:	6071      	str	r1, [r6, #4]
 8004fb4:	0052      	lsls	r2, r2, #1
 8004fb6:	e7a2      	b.n	8004efe <_dtoa_r+0x24e>
 8004fb8:	636f4361 	.word	0x636f4361
 8004fbc:	3fd287a7 	.word	0x3fd287a7
 8004fc0:	8b60c8b3 	.word	0x8b60c8b3
 8004fc4:	3fc68a28 	.word	0x3fc68a28
 8004fc8:	509f79fb 	.word	0x509f79fb
 8004fcc:	3fd34413 	.word	0x3fd34413
 8004fd0:	7ff00000 	.word	0x7ff00000
 8004fd4:	08006965 	.word	0x08006965
 8004fd8:	3ff80000 	.word	0x3ff80000
 8004fdc:	08006a20 	.word	0x08006a20
 8004fe0:	080069f8 	.word	0x080069f8
 8004fe4:	08006991 	.word	0x08006991
 8004fe8:	07f1      	lsls	r1, r6, #31
 8004fea:	d508      	bpl.n	8004ffe <_dtoa_r+0x34e>
 8004fec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ff4:	f7fb fb08 	bl	8000608 <__aeabi_dmul>
 8004ff8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004ffc:	3501      	adds	r5, #1
 8004ffe:	1076      	asrs	r6, r6, #1
 8005000:	3708      	adds	r7, #8
 8005002:	2e00      	cmp	r6, #0
 8005004:	d1f0      	bne.n	8004fe8 <_dtoa_r+0x338>
 8005006:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800500a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800500e:	f7fb fc25 	bl	800085c <__aeabi_ddiv>
 8005012:	e9cd 0100 	strd	r0, r1, [sp]
 8005016:	e01a      	b.n	800504e <_dtoa_r+0x39e>
 8005018:	2502      	movs	r5, #2
 800501a:	e7a3      	b.n	8004f64 <_dtoa_r+0x2b4>
 800501c:	f000 80a0 	beq.w	8005160 <_dtoa_r+0x4b0>
 8005020:	f1ca 0600 	rsb	r6, sl, #0
 8005024:	4b9f      	ldr	r3, [pc, #636]	; (80052a4 <_dtoa_r+0x5f4>)
 8005026:	4fa0      	ldr	r7, [pc, #640]	; (80052a8 <_dtoa_r+0x5f8>)
 8005028:	f006 020f 	and.w	r2, r6, #15
 800502c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005034:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005038:	f7fb fae6 	bl	8000608 <__aeabi_dmul>
 800503c:	e9cd 0100 	strd	r0, r1, [sp]
 8005040:	1136      	asrs	r6, r6, #4
 8005042:	2300      	movs	r3, #0
 8005044:	2502      	movs	r5, #2
 8005046:	2e00      	cmp	r6, #0
 8005048:	d17f      	bne.n	800514a <_dtoa_r+0x49a>
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e1      	bne.n	8005012 <_dtoa_r+0x362>
 800504e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8087 	beq.w	8005164 <_dtoa_r+0x4b4>
 8005056:	e9dd 6700 	ldrd	r6, r7, [sp]
 800505a:	2200      	movs	r2, #0
 800505c:	4b93      	ldr	r3, [pc, #588]	; (80052ac <_dtoa_r+0x5fc>)
 800505e:	4630      	mov	r0, r6
 8005060:	4639      	mov	r1, r7
 8005062:	f7fb fd43 	bl	8000aec <__aeabi_dcmplt>
 8005066:	2800      	cmp	r0, #0
 8005068:	d07c      	beq.n	8005164 <_dtoa_r+0x4b4>
 800506a:	f1b9 0f00 	cmp.w	r9, #0
 800506e:	d079      	beq.n	8005164 <_dtoa_r+0x4b4>
 8005070:	9b02      	ldr	r3, [sp, #8]
 8005072:	2b00      	cmp	r3, #0
 8005074:	dd35      	ble.n	80050e2 <_dtoa_r+0x432>
 8005076:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800507a:	9308      	str	r3, [sp, #32]
 800507c:	4639      	mov	r1, r7
 800507e:	2200      	movs	r2, #0
 8005080:	4b8b      	ldr	r3, [pc, #556]	; (80052b0 <_dtoa_r+0x600>)
 8005082:	4630      	mov	r0, r6
 8005084:	f7fb fac0 	bl	8000608 <__aeabi_dmul>
 8005088:	e9cd 0100 	strd	r0, r1, [sp]
 800508c:	9f02      	ldr	r7, [sp, #8]
 800508e:	3501      	adds	r5, #1
 8005090:	4628      	mov	r0, r5
 8005092:	f7fb fa4f 	bl	8000534 <__aeabi_i2d>
 8005096:	e9dd 2300 	ldrd	r2, r3, [sp]
 800509a:	f7fb fab5 	bl	8000608 <__aeabi_dmul>
 800509e:	2200      	movs	r2, #0
 80050a0:	4b84      	ldr	r3, [pc, #528]	; (80052b4 <_dtoa_r+0x604>)
 80050a2:	f7fb f8fb 	bl	800029c <__adddf3>
 80050a6:	4605      	mov	r5, r0
 80050a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80050ac:	2f00      	cmp	r7, #0
 80050ae:	d15d      	bne.n	800516c <_dtoa_r+0x4bc>
 80050b0:	2200      	movs	r2, #0
 80050b2:	4b81      	ldr	r3, [pc, #516]	; (80052b8 <_dtoa_r+0x608>)
 80050b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050b8:	f7fb f8ee 	bl	8000298 <__aeabi_dsub>
 80050bc:	462a      	mov	r2, r5
 80050be:	4633      	mov	r3, r6
 80050c0:	e9cd 0100 	strd	r0, r1, [sp]
 80050c4:	f7fb fd30 	bl	8000b28 <__aeabi_dcmpgt>
 80050c8:	2800      	cmp	r0, #0
 80050ca:	f040 8288 	bne.w	80055de <_dtoa_r+0x92e>
 80050ce:	462a      	mov	r2, r5
 80050d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80050d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050d8:	f7fb fd08 	bl	8000aec <__aeabi_dcmplt>
 80050dc:	2800      	cmp	r0, #0
 80050de:	f040 827c 	bne.w	80055da <_dtoa_r+0x92a>
 80050e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80050e6:	e9cd 2300 	strd	r2, r3, [sp]
 80050ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f2c0 8150 	blt.w	8005392 <_dtoa_r+0x6e2>
 80050f2:	f1ba 0f0e 	cmp.w	sl, #14
 80050f6:	f300 814c 	bgt.w	8005392 <_dtoa_r+0x6e2>
 80050fa:	4b6a      	ldr	r3, [pc, #424]	; (80052a4 <_dtoa_r+0x5f4>)
 80050fc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005100:	ed93 7b00 	vldr	d7, [r3]
 8005104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005106:	2b00      	cmp	r3, #0
 8005108:	ed8d 7b02 	vstr	d7, [sp, #8]
 800510c:	f280 80d8 	bge.w	80052c0 <_dtoa_r+0x610>
 8005110:	f1b9 0f00 	cmp.w	r9, #0
 8005114:	f300 80d4 	bgt.w	80052c0 <_dtoa_r+0x610>
 8005118:	f040 825e 	bne.w	80055d8 <_dtoa_r+0x928>
 800511c:	2200      	movs	r2, #0
 800511e:	4b66      	ldr	r3, [pc, #408]	; (80052b8 <_dtoa_r+0x608>)
 8005120:	ec51 0b17 	vmov	r0, r1, d7
 8005124:	f7fb fa70 	bl	8000608 <__aeabi_dmul>
 8005128:	e9dd 2300 	ldrd	r2, r3, [sp]
 800512c:	f7fb fcf2 	bl	8000b14 <__aeabi_dcmpge>
 8005130:	464f      	mov	r7, r9
 8005132:	464e      	mov	r6, r9
 8005134:	2800      	cmp	r0, #0
 8005136:	f040 8234 	bne.w	80055a2 <_dtoa_r+0x8f2>
 800513a:	2331      	movs	r3, #49	; 0x31
 800513c:	f10b 0501 	add.w	r5, fp, #1
 8005140:	f88b 3000 	strb.w	r3, [fp]
 8005144:	f10a 0a01 	add.w	sl, sl, #1
 8005148:	e22f      	b.n	80055aa <_dtoa_r+0x8fa>
 800514a:	07f2      	lsls	r2, r6, #31
 800514c:	d505      	bpl.n	800515a <_dtoa_r+0x4aa>
 800514e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005152:	f7fb fa59 	bl	8000608 <__aeabi_dmul>
 8005156:	3501      	adds	r5, #1
 8005158:	2301      	movs	r3, #1
 800515a:	1076      	asrs	r6, r6, #1
 800515c:	3708      	adds	r7, #8
 800515e:	e772      	b.n	8005046 <_dtoa_r+0x396>
 8005160:	2502      	movs	r5, #2
 8005162:	e774      	b.n	800504e <_dtoa_r+0x39e>
 8005164:	f8cd a020 	str.w	sl, [sp, #32]
 8005168:	464f      	mov	r7, r9
 800516a:	e791      	b.n	8005090 <_dtoa_r+0x3e0>
 800516c:	4b4d      	ldr	r3, [pc, #308]	; (80052a4 <_dtoa_r+0x5f4>)
 800516e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005172:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005178:	2b00      	cmp	r3, #0
 800517a:	d047      	beq.n	800520c <_dtoa_r+0x55c>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	2000      	movs	r0, #0
 8005182:	494e      	ldr	r1, [pc, #312]	; (80052bc <_dtoa_r+0x60c>)
 8005184:	f7fb fb6a 	bl	800085c <__aeabi_ddiv>
 8005188:	462a      	mov	r2, r5
 800518a:	4633      	mov	r3, r6
 800518c:	f7fb f884 	bl	8000298 <__aeabi_dsub>
 8005190:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005194:	465d      	mov	r5, fp
 8005196:	e9dd 0100 	ldrd	r0, r1, [sp]
 800519a:	f7fb fce5 	bl	8000b68 <__aeabi_d2iz>
 800519e:	4606      	mov	r6, r0
 80051a0:	f7fb f9c8 	bl	8000534 <__aeabi_i2d>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051ac:	f7fb f874 	bl	8000298 <__aeabi_dsub>
 80051b0:	3630      	adds	r6, #48	; 0x30
 80051b2:	f805 6b01 	strb.w	r6, [r5], #1
 80051b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80051ba:	e9cd 0100 	strd	r0, r1, [sp]
 80051be:	f7fb fc95 	bl	8000aec <__aeabi_dcmplt>
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d163      	bne.n	800528e <_dtoa_r+0x5de>
 80051c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051ca:	2000      	movs	r0, #0
 80051cc:	4937      	ldr	r1, [pc, #220]	; (80052ac <_dtoa_r+0x5fc>)
 80051ce:	f7fb f863 	bl	8000298 <__aeabi_dsub>
 80051d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80051d6:	f7fb fc89 	bl	8000aec <__aeabi_dcmplt>
 80051da:	2800      	cmp	r0, #0
 80051dc:	f040 80b7 	bne.w	800534e <_dtoa_r+0x69e>
 80051e0:	eba5 030b 	sub.w	r3, r5, fp
 80051e4:	429f      	cmp	r7, r3
 80051e6:	f77f af7c 	ble.w	80050e2 <_dtoa_r+0x432>
 80051ea:	2200      	movs	r2, #0
 80051ec:	4b30      	ldr	r3, [pc, #192]	; (80052b0 <_dtoa_r+0x600>)
 80051ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051f2:	f7fb fa09 	bl	8000608 <__aeabi_dmul>
 80051f6:	2200      	movs	r2, #0
 80051f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80051fc:	4b2c      	ldr	r3, [pc, #176]	; (80052b0 <_dtoa_r+0x600>)
 80051fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005202:	f7fb fa01 	bl	8000608 <__aeabi_dmul>
 8005206:	e9cd 0100 	strd	r0, r1, [sp]
 800520a:	e7c4      	b.n	8005196 <_dtoa_r+0x4e6>
 800520c:	462a      	mov	r2, r5
 800520e:	4633      	mov	r3, r6
 8005210:	f7fb f9fa 	bl	8000608 <__aeabi_dmul>
 8005214:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005218:	eb0b 0507 	add.w	r5, fp, r7
 800521c:	465e      	mov	r6, fp
 800521e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005222:	f7fb fca1 	bl	8000b68 <__aeabi_d2iz>
 8005226:	4607      	mov	r7, r0
 8005228:	f7fb f984 	bl	8000534 <__aeabi_i2d>
 800522c:	3730      	adds	r7, #48	; 0x30
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005236:	f7fb f82f 	bl	8000298 <__aeabi_dsub>
 800523a:	f806 7b01 	strb.w	r7, [r6], #1
 800523e:	42ae      	cmp	r6, r5
 8005240:	e9cd 0100 	strd	r0, r1, [sp]
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	d126      	bne.n	8005298 <_dtoa_r+0x5e8>
 800524a:	4b1c      	ldr	r3, [pc, #112]	; (80052bc <_dtoa_r+0x60c>)
 800524c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005250:	f7fb f824 	bl	800029c <__adddf3>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	e9dd 0100 	ldrd	r0, r1, [sp]
 800525c:	f7fb fc64 	bl	8000b28 <__aeabi_dcmpgt>
 8005260:	2800      	cmp	r0, #0
 8005262:	d174      	bne.n	800534e <_dtoa_r+0x69e>
 8005264:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005268:	2000      	movs	r0, #0
 800526a:	4914      	ldr	r1, [pc, #80]	; (80052bc <_dtoa_r+0x60c>)
 800526c:	f7fb f814 	bl	8000298 <__aeabi_dsub>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005278:	f7fb fc38 	bl	8000aec <__aeabi_dcmplt>
 800527c:	2800      	cmp	r0, #0
 800527e:	f43f af30 	beq.w	80050e2 <_dtoa_r+0x432>
 8005282:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005286:	2b30      	cmp	r3, #48	; 0x30
 8005288:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800528c:	d002      	beq.n	8005294 <_dtoa_r+0x5e4>
 800528e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005292:	e04a      	b.n	800532a <_dtoa_r+0x67a>
 8005294:	4615      	mov	r5, r2
 8005296:	e7f4      	b.n	8005282 <_dtoa_r+0x5d2>
 8005298:	4b05      	ldr	r3, [pc, #20]	; (80052b0 <_dtoa_r+0x600>)
 800529a:	f7fb f9b5 	bl	8000608 <__aeabi_dmul>
 800529e:	e9cd 0100 	strd	r0, r1, [sp]
 80052a2:	e7bc      	b.n	800521e <_dtoa_r+0x56e>
 80052a4:	08006a20 	.word	0x08006a20
 80052a8:	080069f8 	.word	0x080069f8
 80052ac:	3ff00000 	.word	0x3ff00000
 80052b0:	40240000 	.word	0x40240000
 80052b4:	401c0000 	.word	0x401c0000
 80052b8:	40140000 	.word	0x40140000
 80052bc:	3fe00000 	.word	0x3fe00000
 80052c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80052c4:	465d      	mov	r5, fp
 80052c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052ca:	4630      	mov	r0, r6
 80052cc:	4639      	mov	r1, r7
 80052ce:	f7fb fac5 	bl	800085c <__aeabi_ddiv>
 80052d2:	f7fb fc49 	bl	8000b68 <__aeabi_d2iz>
 80052d6:	4680      	mov	r8, r0
 80052d8:	f7fb f92c 	bl	8000534 <__aeabi_i2d>
 80052dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052e0:	f7fb f992 	bl	8000608 <__aeabi_dmul>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	4630      	mov	r0, r6
 80052ea:	4639      	mov	r1, r7
 80052ec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80052f0:	f7fa ffd2 	bl	8000298 <__aeabi_dsub>
 80052f4:	f805 6b01 	strb.w	r6, [r5], #1
 80052f8:	eba5 060b 	sub.w	r6, r5, fp
 80052fc:	45b1      	cmp	r9, r6
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	d139      	bne.n	8005378 <_dtoa_r+0x6c8>
 8005304:	f7fa ffca 	bl	800029c <__adddf3>
 8005308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800530c:	4606      	mov	r6, r0
 800530e:	460f      	mov	r7, r1
 8005310:	f7fb fc0a 	bl	8000b28 <__aeabi_dcmpgt>
 8005314:	b9c8      	cbnz	r0, 800534a <_dtoa_r+0x69a>
 8005316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800531a:	4630      	mov	r0, r6
 800531c:	4639      	mov	r1, r7
 800531e:	f7fb fbdb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005322:	b110      	cbz	r0, 800532a <_dtoa_r+0x67a>
 8005324:	f018 0f01 	tst.w	r8, #1
 8005328:	d10f      	bne.n	800534a <_dtoa_r+0x69a>
 800532a:	9904      	ldr	r1, [sp, #16]
 800532c:	4620      	mov	r0, r4
 800532e:	f000 fb8b 	bl	8005a48 <_Bfree>
 8005332:	2300      	movs	r3, #0
 8005334:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005336:	702b      	strb	r3, [r5, #0]
 8005338:	f10a 0301 	add.w	r3, sl, #1
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 8241 	beq.w	80057c8 <_dtoa_r+0xb18>
 8005346:	601d      	str	r5, [r3, #0]
 8005348:	e23e      	b.n	80057c8 <_dtoa_r+0xb18>
 800534a:	f8cd a020 	str.w	sl, [sp, #32]
 800534e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005352:	2a39      	cmp	r2, #57	; 0x39
 8005354:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8005358:	d108      	bne.n	800536c <_dtoa_r+0x6bc>
 800535a:	459b      	cmp	fp, r3
 800535c:	d10a      	bne.n	8005374 <_dtoa_r+0x6c4>
 800535e:	9b08      	ldr	r3, [sp, #32]
 8005360:	3301      	adds	r3, #1
 8005362:	9308      	str	r3, [sp, #32]
 8005364:	2330      	movs	r3, #48	; 0x30
 8005366:	f88b 3000 	strb.w	r3, [fp]
 800536a:	465b      	mov	r3, fp
 800536c:	781a      	ldrb	r2, [r3, #0]
 800536e:	3201      	adds	r2, #1
 8005370:	701a      	strb	r2, [r3, #0]
 8005372:	e78c      	b.n	800528e <_dtoa_r+0x5de>
 8005374:	461d      	mov	r5, r3
 8005376:	e7ea      	b.n	800534e <_dtoa_r+0x69e>
 8005378:	2200      	movs	r2, #0
 800537a:	4b9b      	ldr	r3, [pc, #620]	; (80055e8 <_dtoa_r+0x938>)
 800537c:	f7fb f944 	bl	8000608 <__aeabi_dmul>
 8005380:	2200      	movs	r2, #0
 8005382:	2300      	movs	r3, #0
 8005384:	4606      	mov	r6, r0
 8005386:	460f      	mov	r7, r1
 8005388:	f7fb fba6 	bl	8000ad8 <__aeabi_dcmpeq>
 800538c:	2800      	cmp	r0, #0
 800538e:	d09a      	beq.n	80052c6 <_dtoa_r+0x616>
 8005390:	e7cb      	b.n	800532a <_dtoa_r+0x67a>
 8005392:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005394:	2a00      	cmp	r2, #0
 8005396:	f000 808b 	beq.w	80054b0 <_dtoa_r+0x800>
 800539a:	9a06      	ldr	r2, [sp, #24]
 800539c:	2a01      	cmp	r2, #1
 800539e:	dc6e      	bgt.n	800547e <_dtoa_r+0x7ce>
 80053a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053a2:	2a00      	cmp	r2, #0
 80053a4:	d067      	beq.n	8005476 <_dtoa_r+0x7c6>
 80053a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053aa:	9f07      	ldr	r7, [sp, #28]
 80053ac:	9d05      	ldr	r5, [sp, #20]
 80053ae:	9a05      	ldr	r2, [sp, #20]
 80053b0:	2101      	movs	r1, #1
 80053b2:	441a      	add	r2, r3
 80053b4:	4620      	mov	r0, r4
 80053b6:	9205      	str	r2, [sp, #20]
 80053b8:	4498      	add	r8, r3
 80053ba:	f000 fbe5 	bl	8005b88 <__i2b>
 80053be:	4606      	mov	r6, r0
 80053c0:	2d00      	cmp	r5, #0
 80053c2:	dd0c      	ble.n	80053de <_dtoa_r+0x72e>
 80053c4:	f1b8 0f00 	cmp.w	r8, #0
 80053c8:	dd09      	ble.n	80053de <_dtoa_r+0x72e>
 80053ca:	4545      	cmp	r5, r8
 80053cc:	9a05      	ldr	r2, [sp, #20]
 80053ce:	462b      	mov	r3, r5
 80053d0:	bfa8      	it	ge
 80053d2:	4643      	movge	r3, r8
 80053d4:	1ad2      	subs	r2, r2, r3
 80053d6:	9205      	str	r2, [sp, #20]
 80053d8:	1aed      	subs	r5, r5, r3
 80053da:	eba8 0803 	sub.w	r8, r8, r3
 80053de:	9b07      	ldr	r3, [sp, #28]
 80053e0:	b1eb      	cbz	r3, 800541e <_dtoa_r+0x76e>
 80053e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d067      	beq.n	80054b8 <_dtoa_r+0x808>
 80053e8:	b18f      	cbz	r7, 800540e <_dtoa_r+0x75e>
 80053ea:	4631      	mov	r1, r6
 80053ec:	463a      	mov	r2, r7
 80053ee:	4620      	mov	r0, r4
 80053f0:	f000 fc6a 	bl	8005cc8 <__pow5mult>
 80053f4:	9a04      	ldr	r2, [sp, #16]
 80053f6:	4601      	mov	r1, r0
 80053f8:	4606      	mov	r6, r0
 80053fa:	4620      	mov	r0, r4
 80053fc:	f000 fbcd 	bl	8005b9a <__multiply>
 8005400:	9904      	ldr	r1, [sp, #16]
 8005402:	9008      	str	r0, [sp, #32]
 8005404:	4620      	mov	r0, r4
 8005406:	f000 fb1f 	bl	8005a48 <_Bfree>
 800540a:	9b08      	ldr	r3, [sp, #32]
 800540c:	9304      	str	r3, [sp, #16]
 800540e:	9b07      	ldr	r3, [sp, #28]
 8005410:	1bda      	subs	r2, r3, r7
 8005412:	d004      	beq.n	800541e <_dtoa_r+0x76e>
 8005414:	9904      	ldr	r1, [sp, #16]
 8005416:	4620      	mov	r0, r4
 8005418:	f000 fc56 	bl	8005cc8 <__pow5mult>
 800541c:	9004      	str	r0, [sp, #16]
 800541e:	2101      	movs	r1, #1
 8005420:	4620      	mov	r0, r4
 8005422:	f000 fbb1 	bl	8005b88 <__i2b>
 8005426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005428:	4607      	mov	r7, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 81d0 	beq.w	80057d0 <_dtoa_r+0xb20>
 8005430:	461a      	mov	r2, r3
 8005432:	4601      	mov	r1, r0
 8005434:	4620      	mov	r0, r4
 8005436:	f000 fc47 	bl	8005cc8 <__pow5mult>
 800543a:	9b06      	ldr	r3, [sp, #24]
 800543c:	2b01      	cmp	r3, #1
 800543e:	4607      	mov	r7, r0
 8005440:	dc40      	bgt.n	80054c4 <_dtoa_r+0x814>
 8005442:	9b00      	ldr	r3, [sp, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d139      	bne.n	80054bc <_dtoa_r+0x80c>
 8005448:	9b01      	ldr	r3, [sp, #4]
 800544a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800544e:	2b00      	cmp	r3, #0
 8005450:	d136      	bne.n	80054c0 <_dtoa_r+0x810>
 8005452:	9b01      	ldr	r3, [sp, #4]
 8005454:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005458:	0d1b      	lsrs	r3, r3, #20
 800545a:	051b      	lsls	r3, r3, #20
 800545c:	b12b      	cbz	r3, 800546a <_dtoa_r+0x7ba>
 800545e:	9b05      	ldr	r3, [sp, #20]
 8005460:	3301      	adds	r3, #1
 8005462:	9305      	str	r3, [sp, #20]
 8005464:	f108 0801 	add.w	r8, r8, #1
 8005468:	2301      	movs	r3, #1
 800546a:	9307      	str	r3, [sp, #28]
 800546c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800546e:	2b00      	cmp	r3, #0
 8005470:	d12a      	bne.n	80054c8 <_dtoa_r+0x818>
 8005472:	2001      	movs	r0, #1
 8005474:	e030      	b.n	80054d8 <_dtoa_r+0x828>
 8005476:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005478:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800547c:	e795      	b.n	80053aa <_dtoa_r+0x6fa>
 800547e:	9b07      	ldr	r3, [sp, #28]
 8005480:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8005484:	42bb      	cmp	r3, r7
 8005486:	bfbf      	itttt	lt
 8005488:	9b07      	ldrlt	r3, [sp, #28]
 800548a:	9707      	strlt	r7, [sp, #28]
 800548c:	1afa      	sublt	r2, r7, r3
 800548e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005490:	bfbb      	ittet	lt
 8005492:	189b      	addlt	r3, r3, r2
 8005494:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005496:	1bdf      	subge	r7, r3, r7
 8005498:	2700      	movlt	r7, #0
 800549a:	f1b9 0f00 	cmp.w	r9, #0
 800549e:	bfb5      	itete	lt
 80054a0:	9b05      	ldrlt	r3, [sp, #20]
 80054a2:	9d05      	ldrge	r5, [sp, #20]
 80054a4:	eba3 0509 	sublt.w	r5, r3, r9
 80054a8:	464b      	movge	r3, r9
 80054aa:	bfb8      	it	lt
 80054ac:	2300      	movlt	r3, #0
 80054ae:	e77e      	b.n	80053ae <_dtoa_r+0x6fe>
 80054b0:	9f07      	ldr	r7, [sp, #28]
 80054b2:	9d05      	ldr	r5, [sp, #20]
 80054b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80054b6:	e783      	b.n	80053c0 <_dtoa_r+0x710>
 80054b8:	9a07      	ldr	r2, [sp, #28]
 80054ba:	e7ab      	b.n	8005414 <_dtoa_r+0x764>
 80054bc:	2300      	movs	r3, #0
 80054be:	e7d4      	b.n	800546a <_dtoa_r+0x7ba>
 80054c0:	9b00      	ldr	r3, [sp, #0]
 80054c2:	e7d2      	b.n	800546a <_dtoa_r+0x7ba>
 80054c4:	2300      	movs	r3, #0
 80054c6:	9307      	str	r3, [sp, #28]
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80054ce:	6918      	ldr	r0, [r3, #16]
 80054d0:	f000 fb0c 	bl	8005aec <__hi0bits>
 80054d4:	f1c0 0020 	rsb	r0, r0, #32
 80054d8:	4440      	add	r0, r8
 80054da:	f010 001f 	ands.w	r0, r0, #31
 80054de:	d047      	beq.n	8005570 <_dtoa_r+0x8c0>
 80054e0:	f1c0 0320 	rsb	r3, r0, #32
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	dd3b      	ble.n	8005560 <_dtoa_r+0x8b0>
 80054e8:	9b05      	ldr	r3, [sp, #20]
 80054ea:	f1c0 001c 	rsb	r0, r0, #28
 80054ee:	4403      	add	r3, r0
 80054f0:	9305      	str	r3, [sp, #20]
 80054f2:	4405      	add	r5, r0
 80054f4:	4480      	add	r8, r0
 80054f6:	9b05      	ldr	r3, [sp, #20]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	dd05      	ble.n	8005508 <_dtoa_r+0x858>
 80054fc:	461a      	mov	r2, r3
 80054fe:	9904      	ldr	r1, [sp, #16]
 8005500:	4620      	mov	r0, r4
 8005502:	f000 fc2f 	bl	8005d64 <__lshift>
 8005506:	9004      	str	r0, [sp, #16]
 8005508:	f1b8 0f00 	cmp.w	r8, #0
 800550c:	dd05      	ble.n	800551a <_dtoa_r+0x86a>
 800550e:	4639      	mov	r1, r7
 8005510:	4642      	mov	r2, r8
 8005512:	4620      	mov	r0, r4
 8005514:	f000 fc26 	bl	8005d64 <__lshift>
 8005518:	4607      	mov	r7, r0
 800551a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800551c:	b353      	cbz	r3, 8005574 <_dtoa_r+0x8c4>
 800551e:	4639      	mov	r1, r7
 8005520:	9804      	ldr	r0, [sp, #16]
 8005522:	f000 fc73 	bl	8005e0c <__mcmp>
 8005526:	2800      	cmp	r0, #0
 8005528:	da24      	bge.n	8005574 <_dtoa_r+0x8c4>
 800552a:	2300      	movs	r3, #0
 800552c:	220a      	movs	r2, #10
 800552e:	9904      	ldr	r1, [sp, #16]
 8005530:	4620      	mov	r0, r4
 8005532:	f000 faa0 	bl	8005a76 <__multadd>
 8005536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005538:	9004      	str	r0, [sp, #16]
 800553a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 814d 	beq.w	80057de <_dtoa_r+0xb2e>
 8005544:	2300      	movs	r3, #0
 8005546:	4631      	mov	r1, r6
 8005548:	220a      	movs	r2, #10
 800554a:	4620      	mov	r0, r4
 800554c:	f000 fa93 	bl	8005a76 <__multadd>
 8005550:	9b02      	ldr	r3, [sp, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	4606      	mov	r6, r0
 8005556:	dc4f      	bgt.n	80055f8 <_dtoa_r+0x948>
 8005558:	9b06      	ldr	r3, [sp, #24]
 800555a:	2b02      	cmp	r3, #2
 800555c:	dd4c      	ble.n	80055f8 <_dtoa_r+0x948>
 800555e:	e011      	b.n	8005584 <_dtoa_r+0x8d4>
 8005560:	d0c9      	beq.n	80054f6 <_dtoa_r+0x846>
 8005562:	9a05      	ldr	r2, [sp, #20]
 8005564:	331c      	adds	r3, #28
 8005566:	441a      	add	r2, r3
 8005568:	9205      	str	r2, [sp, #20]
 800556a:	441d      	add	r5, r3
 800556c:	4498      	add	r8, r3
 800556e:	e7c2      	b.n	80054f6 <_dtoa_r+0x846>
 8005570:	4603      	mov	r3, r0
 8005572:	e7f6      	b.n	8005562 <_dtoa_r+0x8b2>
 8005574:	f1b9 0f00 	cmp.w	r9, #0
 8005578:	dc38      	bgt.n	80055ec <_dtoa_r+0x93c>
 800557a:	9b06      	ldr	r3, [sp, #24]
 800557c:	2b02      	cmp	r3, #2
 800557e:	dd35      	ble.n	80055ec <_dtoa_r+0x93c>
 8005580:	f8cd 9008 	str.w	r9, [sp, #8]
 8005584:	9b02      	ldr	r3, [sp, #8]
 8005586:	b963      	cbnz	r3, 80055a2 <_dtoa_r+0x8f2>
 8005588:	4639      	mov	r1, r7
 800558a:	2205      	movs	r2, #5
 800558c:	4620      	mov	r0, r4
 800558e:	f000 fa72 	bl	8005a76 <__multadd>
 8005592:	4601      	mov	r1, r0
 8005594:	4607      	mov	r7, r0
 8005596:	9804      	ldr	r0, [sp, #16]
 8005598:	f000 fc38 	bl	8005e0c <__mcmp>
 800559c:	2800      	cmp	r0, #0
 800559e:	f73f adcc 	bgt.w	800513a <_dtoa_r+0x48a>
 80055a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055a4:	465d      	mov	r5, fp
 80055a6:	ea6f 0a03 	mvn.w	sl, r3
 80055aa:	f04f 0900 	mov.w	r9, #0
 80055ae:	4639      	mov	r1, r7
 80055b0:	4620      	mov	r0, r4
 80055b2:	f000 fa49 	bl	8005a48 <_Bfree>
 80055b6:	2e00      	cmp	r6, #0
 80055b8:	f43f aeb7 	beq.w	800532a <_dtoa_r+0x67a>
 80055bc:	f1b9 0f00 	cmp.w	r9, #0
 80055c0:	d005      	beq.n	80055ce <_dtoa_r+0x91e>
 80055c2:	45b1      	cmp	r9, r6
 80055c4:	d003      	beq.n	80055ce <_dtoa_r+0x91e>
 80055c6:	4649      	mov	r1, r9
 80055c8:	4620      	mov	r0, r4
 80055ca:	f000 fa3d 	bl	8005a48 <_Bfree>
 80055ce:	4631      	mov	r1, r6
 80055d0:	4620      	mov	r0, r4
 80055d2:	f000 fa39 	bl	8005a48 <_Bfree>
 80055d6:	e6a8      	b.n	800532a <_dtoa_r+0x67a>
 80055d8:	2700      	movs	r7, #0
 80055da:	463e      	mov	r6, r7
 80055dc:	e7e1      	b.n	80055a2 <_dtoa_r+0x8f2>
 80055de:	f8dd a020 	ldr.w	sl, [sp, #32]
 80055e2:	463e      	mov	r6, r7
 80055e4:	e5a9      	b.n	800513a <_dtoa_r+0x48a>
 80055e6:	bf00      	nop
 80055e8:	40240000 	.word	0x40240000
 80055ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 80fa 	beq.w	80057ec <_dtoa_r+0xb3c>
 80055f8:	2d00      	cmp	r5, #0
 80055fa:	dd05      	ble.n	8005608 <_dtoa_r+0x958>
 80055fc:	4631      	mov	r1, r6
 80055fe:	462a      	mov	r2, r5
 8005600:	4620      	mov	r0, r4
 8005602:	f000 fbaf 	bl	8005d64 <__lshift>
 8005606:	4606      	mov	r6, r0
 8005608:	9b07      	ldr	r3, [sp, #28]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d04c      	beq.n	80056a8 <_dtoa_r+0x9f8>
 800560e:	6871      	ldr	r1, [r6, #4]
 8005610:	4620      	mov	r0, r4
 8005612:	f000 f9e5 	bl	80059e0 <_Balloc>
 8005616:	6932      	ldr	r2, [r6, #16]
 8005618:	3202      	adds	r2, #2
 800561a:	4605      	mov	r5, r0
 800561c:	0092      	lsls	r2, r2, #2
 800561e:	f106 010c 	add.w	r1, r6, #12
 8005622:	300c      	adds	r0, #12
 8005624:	f7fe fe2e 	bl	8004284 <memcpy>
 8005628:	2201      	movs	r2, #1
 800562a:	4629      	mov	r1, r5
 800562c:	4620      	mov	r0, r4
 800562e:	f000 fb99 	bl	8005d64 <__lshift>
 8005632:	9b00      	ldr	r3, [sp, #0]
 8005634:	f8cd b014 	str.w	fp, [sp, #20]
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	46b1      	mov	r9, r6
 800563e:	9307      	str	r3, [sp, #28]
 8005640:	4606      	mov	r6, r0
 8005642:	4639      	mov	r1, r7
 8005644:	9804      	ldr	r0, [sp, #16]
 8005646:	f7ff faa5 	bl	8004b94 <quorem>
 800564a:	4649      	mov	r1, r9
 800564c:	4605      	mov	r5, r0
 800564e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005652:	9804      	ldr	r0, [sp, #16]
 8005654:	f000 fbda 	bl	8005e0c <__mcmp>
 8005658:	4632      	mov	r2, r6
 800565a:	9000      	str	r0, [sp, #0]
 800565c:	4639      	mov	r1, r7
 800565e:	4620      	mov	r0, r4
 8005660:	f000 fbee 	bl	8005e40 <__mdiff>
 8005664:	68c3      	ldr	r3, [r0, #12]
 8005666:	4602      	mov	r2, r0
 8005668:	bb03      	cbnz	r3, 80056ac <_dtoa_r+0x9fc>
 800566a:	4601      	mov	r1, r0
 800566c:	9008      	str	r0, [sp, #32]
 800566e:	9804      	ldr	r0, [sp, #16]
 8005670:	f000 fbcc 	bl	8005e0c <__mcmp>
 8005674:	9a08      	ldr	r2, [sp, #32]
 8005676:	4603      	mov	r3, r0
 8005678:	4611      	mov	r1, r2
 800567a:	4620      	mov	r0, r4
 800567c:	9308      	str	r3, [sp, #32]
 800567e:	f000 f9e3 	bl	8005a48 <_Bfree>
 8005682:	9b08      	ldr	r3, [sp, #32]
 8005684:	b9a3      	cbnz	r3, 80056b0 <_dtoa_r+0xa00>
 8005686:	9a06      	ldr	r2, [sp, #24]
 8005688:	b992      	cbnz	r2, 80056b0 <_dtoa_r+0xa00>
 800568a:	9a07      	ldr	r2, [sp, #28]
 800568c:	b982      	cbnz	r2, 80056b0 <_dtoa_r+0xa00>
 800568e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005692:	d029      	beq.n	80056e8 <_dtoa_r+0xa38>
 8005694:	9b00      	ldr	r3, [sp, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	dd01      	ble.n	800569e <_dtoa_r+0x9ee>
 800569a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800569e:	9b05      	ldr	r3, [sp, #20]
 80056a0:	1c5d      	adds	r5, r3, #1
 80056a2:	f883 8000 	strb.w	r8, [r3]
 80056a6:	e782      	b.n	80055ae <_dtoa_r+0x8fe>
 80056a8:	4630      	mov	r0, r6
 80056aa:	e7c2      	b.n	8005632 <_dtoa_r+0x982>
 80056ac:	2301      	movs	r3, #1
 80056ae:	e7e3      	b.n	8005678 <_dtoa_r+0x9c8>
 80056b0:	9a00      	ldr	r2, [sp, #0]
 80056b2:	2a00      	cmp	r2, #0
 80056b4:	db04      	blt.n	80056c0 <_dtoa_r+0xa10>
 80056b6:	d125      	bne.n	8005704 <_dtoa_r+0xa54>
 80056b8:	9a06      	ldr	r2, [sp, #24]
 80056ba:	bb1a      	cbnz	r2, 8005704 <_dtoa_r+0xa54>
 80056bc:	9a07      	ldr	r2, [sp, #28]
 80056be:	bb0a      	cbnz	r2, 8005704 <_dtoa_r+0xa54>
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	ddec      	ble.n	800569e <_dtoa_r+0x9ee>
 80056c4:	2201      	movs	r2, #1
 80056c6:	9904      	ldr	r1, [sp, #16]
 80056c8:	4620      	mov	r0, r4
 80056ca:	f000 fb4b 	bl	8005d64 <__lshift>
 80056ce:	4639      	mov	r1, r7
 80056d0:	9004      	str	r0, [sp, #16]
 80056d2:	f000 fb9b 	bl	8005e0c <__mcmp>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	dc03      	bgt.n	80056e2 <_dtoa_r+0xa32>
 80056da:	d1e0      	bne.n	800569e <_dtoa_r+0x9ee>
 80056dc:	f018 0f01 	tst.w	r8, #1
 80056e0:	d0dd      	beq.n	800569e <_dtoa_r+0x9ee>
 80056e2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80056e6:	d1d8      	bne.n	800569a <_dtoa_r+0x9ea>
 80056e8:	9b05      	ldr	r3, [sp, #20]
 80056ea:	9a05      	ldr	r2, [sp, #20]
 80056ec:	1c5d      	adds	r5, r3, #1
 80056ee:	2339      	movs	r3, #57	; 0x39
 80056f0:	7013      	strb	r3, [r2, #0]
 80056f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80056f6:	2b39      	cmp	r3, #57	; 0x39
 80056f8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80056fc:	d04f      	beq.n	800579e <_dtoa_r+0xaee>
 80056fe:	3301      	adds	r3, #1
 8005700:	7013      	strb	r3, [r2, #0]
 8005702:	e754      	b.n	80055ae <_dtoa_r+0x8fe>
 8005704:	9a05      	ldr	r2, [sp, #20]
 8005706:	2b00      	cmp	r3, #0
 8005708:	f102 0501 	add.w	r5, r2, #1
 800570c:	dd06      	ble.n	800571c <_dtoa_r+0xa6c>
 800570e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005712:	d0e9      	beq.n	80056e8 <_dtoa_r+0xa38>
 8005714:	f108 0801 	add.w	r8, r8, #1
 8005718:	9b05      	ldr	r3, [sp, #20]
 800571a:	e7c2      	b.n	80056a2 <_dtoa_r+0x9f2>
 800571c:	9a02      	ldr	r2, [sp, #8]
 800571e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005722:	eba5 030b 	sub.w	r3, r5, fp
 8005726:	4293      	cmp	r3, r2
 8005728:	d021      	beq.n	800576e <_dtoa_r+0xabe>
 800572a:	2300      	movs	r3, #0
 800572c:	220a      	movs	r2, #10
 800572e:	9904      	ldr	r1, [sp, #16]
 8005730:	4620      	mov	r0, r4
 8005732:	f000 f9a0 	bl	8005a76 <__multadd>
 8005736:	45b1      	cmp	r9, r6
 8005738:	9004      	str	r0, [sp, #16]
 800573a:	f04f 0300 	mov.w	r3, #0
 800573e:	f04f 020a 	mov.w	r2, #10
 8005742:	4649      	mov	r1, r9
 8005744:	4620      	mov	r0, r4
 8005746:	d105      	bne.n	8005754 <_dtoa_r+0xaa4>
 8005748:	f000 f995 	bl	8005a76 <__multadd>
 800574c:	4681      	mov	r9, r0
 800574e:	4606      	mov	r6, r0
 8005750:	9505      	str	r5, [sp, #20]
 8005752:	e776      	b.n	8005642 <_dtoa_r+0x992>
 8005754:	f000 f98f 	bl	8005a76 <__multadd>
 8005758:	4631      	mov	r1, r6
 800575a:	4681      	mov	r9, r0
 800575c:	2300      	movs	r3, #0
 800575e:	220a      	movs	r2, #10
 8005760:	4620      	mov	r0, r4
 8005762:	f000 f988 	bl	8005a76 <__multadd>
 8005766:	4606      	mov	r6, r0
 8005768:	e7f2      	b.n	8005750 <_dtoa_r+0xaa0>
 800576a:	f04f 0900 	mov.w	r9, #0
 800576e:	2201      	movs	r2, #1
 8005770:	9904      	ldr	r1, [sp, #16]
 8005772:	4620      	mov	r0, r4
 8005774:	f000 faf6 	bl	8005d64 <__lshift>
 8005778:	4639      	mov	r1, r7
 800577a:	9004      	str	r0, [sp, #16]
 800577c:	f000 fb46 	bl	8005e0c <__mcmp>
 8005780:	2800      	cmp	r0, #0
 8005782:	dcb6      	bgt.n	80056f2 <_dtoa_r+0xa42>
 8005784:	d102      	bne.n	800578c <_dtoa_r+0xadc>
 8005786:	f018 0f01 	tst.w	r8, #1
 800578a:	d1b2      	bne.n	80056f2 <_dtoa_r+0xa42>
 800578c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005790:	2b30      	cmp	r3, #48	; 0x30
 8005792:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005796:	f47f af0a 	bne.w	80055ae <_dtoa_r+0x8fe>
 800579a:	4615      	mov	r5, r2
 800579c:	e7f6      	b.n	800578c <_dtoa_r+0xadc>
 800579e:	4593      	cmp	fp, r2
 80057a0:	d105      	bne.n	80057ae <_dtoa_r+0xafe>
 80057a2:	2331      	movs	r3, #49	; 0x31
 80057a4:	f10a 0a01 	add.w	sl, sl, #1
 80057a8:	f88b 3000 	strb.w	r3, [fp]
 80057ac:	e6ff      	b.n	80055ae <_dtoa_r+0x8fe>
 80057ae:	4615      	mov	r5, r2
 80057b0:	e79f      	b.n	80056f2 <_dtoa_r+0xa42>
 80057b2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005818 <_dtoa_r+0xb68>
 80057b6:	e007      	b.n	80057c8 <_dtoa_r+0xb18>
 80057b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057ba:	f8df b060 	ldr.w	fp, [pc, #96]	; 800581c <_dtoa_r+0xb6c>
 80057be:	b11b      	cbz	r3, 80057c8 <_dtoa_r+0xb18>
 80057c0:	f10b 0308 	add.w	r3, fp, #8
 80057c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	4658      	mov	r0, fp
 80057ca:	b017      	add	sp, #92	; 0x5c
 80057cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d0:	9b06      	ldr	r3, [sp, #24]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	f77f ae35 	ble.w	8005442 <_dtoa_r+0x792>
 80057d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057da:	9307      	str	r3, [sp, #28]
 80057dc:	e649      	b.n	8005472 <_dtoa_r+0x7c2>
 80057de:	9b02      	ldr	r3, [sp, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	dc03      	bgt.n	80057ec <_dtoa_r+0xb3c>
 80057e4:	9b06      	ldr	r3, [sp, #24]
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	f73f aecc 	bgt.w	8005584 <_dtoa_r+0x8d4>
 80057ec:	465d      	mov	r5, fp
 80057ee:	4639      	mov	r1, r7
 80057f0:	9804      	ldr	r0, [sp, #16]
 80057f2:	f7ff f9cf 	bl	8004b94 <quorem>
 80057f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80057fa:	f805 8b01 	strb.w	r8, [r5], #1
 80057fe:	9a02      	ldr	r2, [sp, #8]
 8005800:	eba5 030b 	sub.w	r3, r5, fp
 8005804:	429a      	cmp	r2, r3
 8005806:	ddb0      	ble.n	800576a <_dtoa_r+0xaba>
 8005808:	2300      	movs	r3, #0
 800580a:	220a      	movs	r2, #10
 800580c:	9904      	ldr	r1, [sp, #16]
 800580e:	4620      	mov	r0, r4
 8005810:	f000 f931 	bl	8005a76 <__multadd>
 8005814:	9004      	str	r0, [sp, #16]
 8005816:	e7ea      	b.n	80057ee <_dtoa_r+0xb3e>
 8005818:	08006964 	.word	0x08006964
 800581c:	08006988 	.word	0x08006988

08005820 <std>:
 8005820:	2300      	movs	r3, #0
 8005822:	b510      	push	{r4, lr}
 8005824:	4604      	mov	r4, r0
 8005826:	e9c0 3300 	strd	r3, r3, [r0]
 800582a:	6083      	str	r3, [r0, #8]
 800582c:	8181      	strh	r1, [r0, #12]
 800582e:	6643      	str	r3, [r0, #100]	; 0x64
 8005830:	81c2      	strh	r2, [r0, #14]
 8005832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005836:	6183      	str	r3, [r0, #24]
 8005838:	4619      	mov	r1, r3
 800583a:	2208      	movs	r2, #8
 800583c:	305c      	adds	r0, #92	; 0x5c
 800583e:	f7fe fd2c 	bl	800429a <memset>
 8005842:	4b05      	ldr	r3, [pc, #20]	; (8005858 <std+0x38>)
 8005844:	6263      	str	r3, [r4, #36]	; 0x24
 8005846:	4b05      	ldr	r3, [pc, #20]	; (800585c <std+0x3c>)
 8005848:	62a3      	str	r3, [r4, #40]	; 0x28
 800584a:	4b05      	ldr	r3, [pc, #20]	; (8005860 <std+0x40>)
 800584c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800584e:	4b05      	ldr	r3, [pc, #20]	; (8005864 <std+0x44>)
 8005850:	6224      	str	r4, [r4, #32]
 8005852:	6323      	str	r3, [r4, #48]	; 0x30
 8005854:	bd10      	pop	{r4, pc}
 8005856:	bf00      	nop
 8005858:	080063a5 	.word	0x080063a5
 800585c:	080063c7 	.word	0x080063c7
 8005860:	080063ff 	.word	0x080063ff
 8005864:	08006423 	.word	0x08006423

08005868 <_cleanup_r>:
 8005868:	4901      	ldr	r1, [pc, #4]	; (8005870 <_cleanup_r+0x8>)
 800586a:	f000 b885 	b.w	8005978 <_fwalk_reent>
 800586e:	bf00      	nop
 8005870:	080066fd 	.word	0x080066fd

08005874 <__sfmoreglue>:
 8005874:	b570      	push	{r4, r5, r6, lr}
 8005876:	1e4a      	subs	r2, r1, #1
 8005878:	2568      	movs	r5, #104	; 0x68
 800587a:	4355      	muls	r5, r2
 800587c:	460e      	mov	r6, r1
 800587e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005882:	f000 fbe5 	bl	8006050 <_malloc_r>
 8005886:	4604      	mov	r4, r0
 8005888:	b140      	cbz	r0, 800589c <__sfmoreglue+0x28>
 800588a:	2100      	movs	r1, #0
 800588c:	e9c0 1600 	strd	r1, r6, [r0]
 8005890:	300c      	adds	r0, #12
 8005892:	60a0      	str	r0, [r4, #8]
 8005894:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005898:	f7fe fcff 	bl	800429a <memset>
 800589c:	4620      	mov	r0, r4
 800589e:	bd70      	pop	{r4, r5, r6, pc}

080058a0 <__sinit>:
 80058a0:	6983      	ldr	r3, [r0, #24]
 80058a2:	b510      	push	{r4, lr}
 80058a4:	4604      	mov	r4, r0
 80058a6:	bb33      	cbnz	r3, 80058f6 <__sinit+0x56>
 80058a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80058ac:	6503      	str	r3, [r0, #80]	; 0x50
 80058ae:	4b12      	ldr	r3, [pc, #72]	; (80058f8 <__sinit+0x58>)
 80058b0:	4a12      	ldr	r2, [pc, #72]	; (80058fc <__sinit+0x5c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6282      	str	r2, [r0, #40]	; 0x28
 80058b6:	4298      	cmp	r0, r3
 80058b8:	bf04      	itt	eq
 80058ba:	2301      	moveq	r3, #1
 80058bc:	6183      	streq	r3, [r0, #24]
 80058be:	f000 f81f 	bl	8005900 <__sfp>
 80058c2:	6060      	str	r0, [r4, #4]
 80058c4:	4620      	mov	r0, r4
 80058c6:	f000 f81b 	bl	8005900 <__sfp>
 80058ca:	60a0      	str	r0, [r4, #8]
 80058cc:	4620      	mov	r0, r4
 80058ce:	f000 f817 	bl	8005900 <__sfp>
 80058d2:	2200      	movs	r2, #0
 80058d4:	60e0      	str	r0, [r4, #12]
 80058d6:	2104      	movs	r1, #4
 80058d8:	6860      	ldr	r0, [r4, #4]
 80058da:	f7ff ffa1 	bl	8005820 <std>
 80058de:	2201      	movs	r2, #1
 80058e0:	2109      	movs	r1, #9
 80058e2:	68a0      	ldr	r0, [r4, #8]
 80058e4:	f7ff ff9c 	bl	8005820 <std>
 80058e8:	2202      	movs	r2, #2
 80058ea:	2112      	movs	r1, #18
 80058ec:	68e0      	ldr	r0, [r4, #12]
 80058ee:	f7ff ff97 	bl	8005820 <std>
 80058f2:	2301      	movs	r3, #1
 80058f4:	61a3      	str	r3, [r4, #24]
 80058f6:	bd10      	pop	{r4, pc}
 80058f8:	08006950 	.word	0x08006950
 80058fc:	08005869 	.word	0x08005869

08005900 <__sfp>:
 8005900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005902:	4b1b      	ldr	r3, [pc, #108]	; (8005970 <__sfp+0x70>)
 8005904:	681e      	ldr	r6, [r3, #0]
 8005906:	69b3      	ldr	r3, [r6, #24]
 8005908:	4607      	mov	r7, r0
 800590a:	b913      	cbnz	r3, 8005912 <__sfp+0x12>
 800590c:	4630      	mov	r0, r6
 800590e:	f7ff ffc7 	bl	80058a0 <__sinit>
 8005912:	3648      	adds	r6, #72	; 0x48
 8005914:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005918:	3b01      	subs	r3, #1
 800591a:	d503      	bpl.n	8005924 <__sfp+0x24>
 800591c:	6833      	ldr	r3, [r6, #0]
 800591e:	b133      	cbz	r3, 800592e <__sfp+0x2e>
 8005920:	6836      	ldr	r6, [r6, #0]
 8005922:	e7f7      	b.n	8005914 <__sfp+0x14>
 8005924:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005928:	b16d      	cbz	r5, 8005946 <__sfp+0x46>
 800592a:	3468      	adds	r4, #104	; 0x68
 800592c:	e7f4      	b.n	8005918 <__sfp+0x18>
 800592e:	2104      	movs	r1, #4
 8005930:	4638      	mov	r0, r7
 8005932:	f7ff ff9f 	bl	8005874 <__sfmoreglue>
 8005936:	6030      	str	r0, [r6, #0]
 8005938:	2800      	cmp	r0, #0
 800593a:	d1f1      	bne.n	8005920 <__sfp+0x20>
 800593c:	230c      	movs	r3, #12
 800593e:	603b      	str	r3, [r7, #0]
 8005940:	4604      	mov	r4, r0
 8005942:	4620      	mov	r0, r4
 8005944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005946:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <__sfp+0x74>)
 8005948:	6665      	str	r5, [r4, #100]	; 0x64
 800594a:	e9c4 5500 	strd	r5, r5, [r4]
 800594e:	60a5      	str	r5, [r4, #8]
 8005950:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005954:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005958:	2208      	movs	r2, #8
 800595a:	4629      	mov	r1, r5
 800595c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005960:	f7fe fc9b 	bl	800429a <memset>
 8005964:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005968:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800596c:	e7e9      	b.n	8005942 <__sfp+0x42>
 800596e:	bf00      	nop
 8005970:	08006950 	.word	0x08006950
 8005974:	ffff0001 	.word	0xffff0001

08005978 <_fwalk_reent>:
 8005978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800597c:	4680      	mov	r8, r0
 800597e:	4689      	mov	r9, r1
 8005980:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005984:	2600      	movs	r6, #0
 8005986:	b914      	cbnz	r4, 800598e <_fwalk_reent+0x16>
 8005988:	4630      	mov	r0, r6
 800598a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800598e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005992:	3f01      	subs	r7, #1
 8005994:	d501      	bpl.n	800599a <_fwalk_reent+0x22>
 8005996:	6824      	ldr	r4, [r4, #0]
 8005998:	e7f5      	b.n	8005986 <_fwalk_reent+0xe>
 800599a:	89ab      	ldrh	r3, [r5, #12]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d907      	bls.n	80059b0 <_fwalk_reent+0x38>
 80059a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059a4:	3301      	adds	r3, #1
 80059a6:	d003      	beq.n	80059b0 <_fwalk_reent+0x38>
 80059a8:	4629      	mov	r1, r5
 80059aa:	4640      	mov	r0, r8
 80059ac:	47c8      	blx	r9
 80059ae:	4306      	orrs	r6, r0
 80059b0:	3568      	adds	r5, #104	; 0x68
 80059b2:	e7ee      	b.n	8005992 <_fwalk_reent+0x1a>

080059b4 <_localeconv_r>:
 80059b4:	4b04      	ldr	r3, [pc, #16]	; (80059c8 <_localeconv_r+0x14>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6a18      	ldr	r0, [r3, #32]
 80059ba:	4b04      	ldr	r3, [pc, #16]	; (80059cc <_localeconv_r+0x18>)
 80059bc:	2800      	cmp	r0, #0
 80059be:	bf08      	it	eq
 80059c0:	4618      	moveq	r0, r3
 80059c2:	30f0      	adds	r0, #240	; 0xf0
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	2000000c 	.word	0x2000000c
 80059cc:	20000070 	.word	0x20000070

080059d0 <malloc>:
 80059d0:	4b02      	ldr	r3, [pc, #8]	; (80059dc <malloc+0xc>)
 80059d2:	4601      	mov	r1, r0
 80059d4:	6818      	ldr	r0, [r3, #0]
 80059d6:	f000 bb3b 	b.w	8006050 <_malloc_r>
 80059da:	bf00      	nop
 80059dc:	2000000c 	.word	0x2000000c

080059e0 <_Balloc>:
 80059e0:	b570      	push	{r4, r5, r6, lr}
 80059e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80059e4:	4604      	mov	r4, r0
 80059e6:	460e      	mov	r6, r1
 80059e8:	b93d      	cbnz	r5, 80059fa <_Balloc+0x1a>
 80059ea:	2010      	movs	r0, #16
 80059ec:	f7ff fff0 	bl	80059d0 <malloc>
 80059f0:	6260      	str	r0, [r4, #36]	; 0x24
 80059f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80059f6:	6005      	str	r5, [r0, #0]
 80059f8:	60c5      	str	r5, [r0, #12]
 80059fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80059fc:	68eb      	ldr	r3, [r5, #12]
 80059fe:	b183      	cbz	r3, 8005a22 <_Balloc+0x42>
 8005a00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005a08:	b9b8      	cbnz	r0, 8005a3a <_Balloc+0x5a>
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	fa01 f506 	lsl.w	r5, r1, r6
 8005a10:	1d6a      	adds	r2, r5, #5
 8005a12:	0092      	lsls	r2, r2, #2
 8005a14:	4620      	mov	r0, r4
 8005a16:	f000 fabf 	bl	8005f98 <_calloc_r>
 8005a1a:	b160      	cbz	r0, 8005a36 <_Balloc+0x56>
 8005a1c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005a20:	e00e      	b.n	8005a40 <_Balloc+0x60>
 8005a22:	2221      	movs	r2, #33	; 0x21
 8005a24:	2104      	movs	r1, #4
 8005a26:	4620      	mov	r0, r4
 8005a28:	f000 fab6 	bl	8005f98 <_calloc_r>
 8005a2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a2e:	60e8      	str	r0, [r5, #12]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e4      	bne.n	8005a00 <_Balloc+0x20>
 8005a36:	2000      	movs	r0, #0
 8005a38:	bd70      	pop	{r4, r5, r6, pc}
 8005a3a:	6802      	ldr	r2, [r0, #0]
 8005a3c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005a40:	2300      	movs	r3, #0
 8005a42:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a46:	e7f7      	b.n	8005a38 <_Balloc+0x58>

08005a48 <_Bfree>:
 8005a48:	b570      	push	{r4, r5, r6, lr}
 8005a4a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005a4c:	4606      	mov	r6, r0
 8005a4e:	460d      	mov	r5, r1
 8005a50:	b93c      	cbnz	r4, 8005a62 <_Bfree+0x1a>
 8005a52:	2010      	movs	r0, #16
 8005a54:	f7ff ffbc 	bl	80059d0 <malloc>
 8005a58:	6270      	str	r0, [r6, #36]	; 0x24
 8005a5a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a5e:	6004      	str	r4, [r0, #0]
 8005a60:	60c4      	str	r4, [r0, #12]
 8005a62:	b13d      	cbz	r5, 8005a74 <_Bfree+0x2c>
 8005a64:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005a66:	686a      	ldr	r2, [r5, #4]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a6e:	6029      	str	r1, [r5, #0]
 8005a70:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005a74:	bd70      	pop	{r4, r5, r6, pc}

08005a76 <__multadd>:
 8005a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a7a:	690d      	ldr	r5, [r1, #16]
 8005a7c:	461f      	mov	r7, r3
 8005a7e:	4606      	mov	r6, r0
 8005a80:	460c      	mov	r4, r1
 8005a82:	f101 0c14 	add.w	ip, r1, #20
 8005a86:	2300      	movs	r3, #0
 8005a88:	f8dc 0000 	ldr.w	r0, [ip]
 8005a8c:	b281      	uxth	r1, r0
 8005a8e:	fb02 7101 	mla	r1, r2, r1, r7
 8005a92:	0c0f      	lsrs	r7, r1, #16
 8005a94:	0c00      	lsrs	r0, r0, #16
 8005a96:	fb02 7000 	mla	r0, r2, r0, r7
 8005a9a:	b289      	uxth	r1, r1
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005aa2:	429d      	cmp	r5, r3
 8005aa4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005aa8:	f84c 1b04 	str.w	r1, [ip], #4
 8005aac:	dcec      	bgt.n	8005a88 <__multadd+0x12>
 8005aae:	b1d7      	cbz	r7, 8005ae6 <__multadd+0x70>
 8005ab0:	68a3      	ldr	r3, [r4, #8]
 8005ab2:	42ab      	cmp	r3, r5
 8005ab4:	dc12      	bgt.n	8005adc <__multadd+0x66>
 8005ab6:	6861      	ldr	r1, [r4, #4]
 8005ab8:	4630      	mov	r0, r6
 8005aba:	3101      	adds	r1, #1
 8005abc:	f7ff ff90 	bl	80059e0 <_Balloc>
 8005ac0:	6922      	ldr	r2, [r4, #16]
 8005ac2:	3202      	adds	r2, #2
 8005ac4:	f104 010c 	add.w	r1, r4, #12
 8005ac8:	4680      	mov	r8, r0
 8005aca:	0092      	lsls	r2, r2, #2
 8005acc:	300c      	adds	r0, #12
 8005ace:	f7fe fbd9 	bl	8004284 <memcpy>
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	f7ff ffb7 	bl	8005a48 <_Bfree>
 8005ada:	4644      	mov	r4, r8
 8005adc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ae0:	3501      	adds	r5, #1
 8005ae2:	615f      	str	r7, [r3, #20]
 8005ae4:	6125      	str	r5, [r4, #16]
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005aec <__hi0bits>:
 8005aec:	0c02      	lsrs	r2, r0, #16
 8005aee:	0412      	lsls	r2, r2, #16
 8005af0:	4603      	mov	r3, r0
 8005af2:	b9b2      	cbnz	r2, 8005b22 <__hi0bits+0x36>
 8005af4:	0403      	lsls	r3, r0, #16
 8005af6:	2010      	movs	r0, #16
 8005af8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005afc:	bf04      	itt	eq
 8005afe:	021b      	lsleq	r3, r3, #8
 8005b00:	3008      	addeq	r0, #8
 8005b02:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005b06:	bf04      	itt	eq
 8005b08:	011b      	lsleq	r3, r3, #4
 8005b0a:	3004      	addeq	r0, #4
 8005b0c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005b10:	bf04      	itt	eq
 8005b12:	009b      	lsleq	r3, r3, #2
 8005b14:	3002      	addeq	r0, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	db06      	blt.n	8005b28 <__hi0bits+0x3c>
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	d503      	bpl.n	8005b26 <__hi0bits+0x3a>
 8005b1e:	3001      	adds	r0, #1
 8005b20:	4770      	bx	lr
 8005b22:	2000      	movs	r0, #0
 8005b24:	e7e8      	b.n	8005af8 <__hi0bits+0xc>
 8005b26:	2020      	movs	r0, #32
 8005b28:	4770      	bx	lr

08005b2a <__lo0bits>:
 8005b2a:	6803      	ldr	r3, [r0, #0]
 8005b2c:	f013 0207 	ands.w	r2, r3, #7
 8005b30:	4601      	mov	r1, r0
 8005b32:	d00b      	beq.n	8005b4c <__lo0bits+0x22>
 8005b34:	07da      	lsls	r2, r3, #31
 8005b36:	d423      	bmi.n	8005b80 <__lo0bits+0x56>
 8005b38:	0798      	lsls	r0, r3, #30
 8005b3a:	bf49      	itett	mi
 8005b3c:	085b      	lsrmi	r3, r3, #1
 8005b3e:	089b      	lsrpl	r3, r3, #2
 8005b40:	2001      	movmi	r0, #1
 8005b42:	600b      	strmi	r3, [r1, #0]
 8005b44:	bf5c      	itt	pl
 8005b46:	600b      	strpl	r3, [r1, #0]
 8005b48:	2002      	movpl	r0, #2
 8005b4a:	4770      	bx	lr
 8005b4c:	b298      	uxth	r0, r3
 8005b4e:	b9a8      	cbnz	r0, 8005b7c <__lo0bits+0x52>
 8005b50:	0c1b      	lsrs	r3, r3, #16
 8005b52:	2010      	movs	r0, #16
 8005b54:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005b58:	bf04      	itt	eq
 8005b5a:	0a1b      	lsreq	r3, r3, #8
 8005b5c:	3008      	addeq	r0, #8
 8005b5e:	071a      	lsls	r2, r3, #28
 8005b60:	bf04      	itt	eq
 8005b62:	091b      	lsreq	r3, r3, #4
 8005b64:	3004      	addeq	r0, #4
 8005b66:	079a      	lsls	r2, r3, #30
 8005b68:	bf04      	itt	eq
 8005b6a:	089b      	lsreq	r3, r3, #2
 8005b6c:	3002      	addeq	r0, #2
 8005b6e:	07da      	lsls	r2, r3, #31
 8005b70:	d402      	bmi.n	8005b78 <__lo0bits+0x4e>
 8005b72:	085b      	lsrs	r3, r3, #1
 8005b74:	d006      	beq.n	8005b84 <__lo0bits+0x5a>
 8005b76:	3001      	adds	r0, #1
 8005b78:	600b      	str	r3, [r1, #0]
 8005b7a:	4770      	bx	lr
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	e7e9      	b.n	8005b54 <__lo0bits+0x2a>
 8005b80:	2000      	movs	r0, #0
 8005b82:	4770      	bx	lr
 8005b84:	2020      	movs	r0, #32
 8005b86:	4770      	bx	lr

08005b88 <__i2b>:
 8005b88:	b510      	push	{r4, lr}
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	f7ff ff27 	bl	80059e0 <_Balloc>
 8005b92:	2201      	movs	r2, #1
 8005b94:	6144      	str	r4, [r0, #20]
 8005b96:	6102      	str	r2, [r0, #16]
 8005b98:	bd10      	pop	{r4, pc}

08005b9a <__multiply>:
 8005b9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9e:	4614      	mov	r4, r2
 8005ba0:	690a      	ldr	r2, [r1, #16]
 8005ba2:	6923      	ldr	r3, [r4, #16]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	bfb8      	it	lt
 8005ba8:	460b      	movlt	r3, r1
 8005baa:	4688      	mov	r8, r1
 8005bac:	bfbc      	itt	lt
 8005bae:	46a0      	movlt	r8, r4
 8005bb0:	461c      	movlt	r4, r3
 8005bb2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005bb6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005bba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005bbe:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005bc2:	eb07 0609 	add.w	r6, r7, r9
 8005bc6:	42b3      	cmp	r3, r6
 8005bc8:	bfb8      	it	lt
 8005bca:	3101      	addlt	r1, #1
 8005bcc:	f7ff ff08 	bl	80059e0 <_Balloc>
 8005bd0:	f100 0514 	add.w	r5, r0, #20
 8005bd4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005bd8:	462b      	mov	r3, r5
 8005bda:	2200      	movs	r2, #0
 8005bdc:	4573      	cmp	r3, lr
 8005bde:	d316      	bcc.n	8005c0e <__multiply+0x74>
 8005be0:	f104 0214 	add.w	r2, r4, #20
 8005be4:	f108 0114 	add.w	r1, r8, #20
 8005be8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005bec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	9b00      	ldr	r3, [sp, #0]
 8005bf4:	9201      	str	r2, [sp, #4]
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d80c      	bhi.n	8005c14 <__multiply+0x7a>
 8005bfa:	2e00      	cmp	r6, #0
 8005bfc:	dd03      	ble.n	8005c06 <__multiply+0x6c>
 8005bfe:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d05d      	beq.n	8005cc2 <__multiply+0x128>
 8005c06:	6106      	str	r6, [r0, #16]
 8005c08:	b003      	add	sp, #12
 8005c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c0e:	f843 2b04 	str.w	r2, [r3], #4
 8005c12:	e7e3      	b.n	8005bdc <__multiply+0x42>
 8005c14:	f8b2 b000 	ldrh.w	fp, [r2]
 8005c18:	f1bb 0f00 	cmp.w	fp, #0
 8005c1c:	d023      	beq.n	8005c66 <__multiply+0xcc>
 8005c1e:	4689      	mov	r9, r1
 8005c20:	46ac      	mov	ip, r5
 8005c22:	f04f 0800 	mov.w	r8, #0
 8005c26:	f859 4b04 	ldr.w	r4, [r9], #4
 8005c2a:	f8dc a000 	ldr.w	sl, [ip]
 8005c2e:	b2a3      	uxth	r3, r4
 8005c30:	fa1f fa8a 	uxth.w	sl, sl
 8005c34:	fb0b a303 	mla	r3, fp, r3, sl
 8005c38:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005c3c:	f8dc 4000 	ldr.w	r4, [ip]
 8005c40:	4443      	add	r3, r8
 8005c42:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005c46:	fb0b 840a 	mla	r4, fp, sl, r8
 8005c4a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005c4e:	46e2      	mov	sl, ip
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005c56:	454f      	cmp	r7, r9
 8005c58:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005c5c:	f84a 3b04 	str.w	r3, [sl], #4
 8005c60:	d82b      	bhi.n	8005cba <__multiply+0x120>
 8005c62:	f8cc 8004 	str.w	r8, [ip, #4]
 8005c66:	9b01      	ldr	r3, [sp, #4]
 8005c68:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005c6c:	3204      	adds	r2, #4
 8005c6e:	f1ba 0f00 	cmp.w	sl, #0
 8005c72:	d020      	beq.n	8005cb6 <__multiply+0x11c>
 8005c74:	682b      	ldr	r3, [r5, #0]
 8005c76:	4689      	mov	r9, r1
 8005c78:	46a8      	mov	r8, r5
 8005c7a:	f04f 0b00 	mov.w	fp, #0
 8005c7e:	f8b9 c000 	ldrh.w	ip, [r9]
 8005c82:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005c86:	fb0a 440c 	mla	r4, sl, ip, r4
 8005c8a:	445c      	add	r4, fp
 8005c8c:	46c4      	mov	ip, r8
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005c94:	f84c 3b04 	str.w	r3, [ip], #4
 8005c98:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c9c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005ca0:	0c1b      	lsrs	r3, r3, #16
 8005ca2:	fb0a b303 	mla	r3, sl, r3, fp
 8005ca6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005caa:	454f      	cmp	r7, r9
 8005cac:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005cb0:	d805      	bhi.n	8005cbe <__multiply+0x124>
 8005cb2:	f8c8 3004 	str.w	r3, [r8, #4]
 8005cb6:	3504      	adds	r5, #4
 8005cb8:	e79b      	b.n	8005bf2 <__multiply+0x58>
 8005cba:	46d4      	mov	ip, sl
 8005cbc:	e7b3      	b.n	8005c26 <__multiply+0x8c>
 8005cbe:	46e0      	mov	r8, ip
 8005cc0:	e7dd      	b.n	8005c7e <__multiply+0xe4>
 8005cc2:	3e01      	subs	r6, #1
 8005cc4:	e799      	b.n	8005bfa <__multiply+0x60>
	...

08005cc8 <__pow5mult>:
 8005cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ccc:	4615      	mov	r5, r2
 8005cce:	f012 0203 	ands.w	r2, r2, #3
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	460f      	mov	r7, r1
 8005cd6:	d007      	beq.n	8005ce8 <__pow5mult+0x20>
 8005cd8:	3a01      	subs	r2, #1
 8005cda:	4c21      	ldr	r4, [pc, #132]	; (8005d60 <__pow5mult+0x98>)
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005ce2:	f7ff fec8 	bl	8005a76 <__multadd>
 8005ce6:	4607      	mov	r7, r0
 8005ce8:	10ad      	asrs	r5, r5, #2
 8005cea:	d035      	beq.n	8005d58 <__pow5mult+0x90>
 8005cec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005cee:	b93c      	cbnz	r4, 8005d00 <__pow5mult+0x38>
 8005cf0:	2010      	movs	r0, #16
 8005cf2:	f7ff fe6d 	bl	80059d0 <malloc>
 8005cf6:	6270      	str	r0, [r6, #36]	; 0x24
 8005cf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005cfc:	6004      	str	r4, [r0, #0]
 8005cfe:	60c4      	str	r4, [r0, #12]
 8005d00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d08:	b94c      	cbnz	r4, 8005d1e <__pow5mult+0x56>
 8005d0a:	f240 2171 	movw	r1, #625	; 0x271
 8005d0e:	4630      	mov	r0, r6
 8005d10:	f7ff ff3a 	bl	8005b88 <__i2b>
 8005d14:	2300      	movs	r3, #0
 8005d16:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	6003      	str	r3, [r0, #0]
 8005d1e:	f04f 0800 	mov.w	r8, #0
 8005d22:	07eb      	lsls	r3, r5, #31
 8005d24:	d50a      	bpl.n	8005d3c <__pow5mult+0x74>
 8005d26:	4639      	mov	r1, r7
 8005d28:	4622      	mov	r2, r4
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	f7ff ff35 	bl	8005b9a <__multiply>
 8005d30:	4639      	mov	r1, r7
 8005d32:	4681      	mov	r9, r0
 8005d34:	4630      	mov	r0, r6
 8005d36:	f7ff fe87 	bl	8005a48 <_Bfree>
 8005d3a:	464f      	mov	r7, r9
 8005d3c:	106d      	asrs	r5, r5, #1
 8005d3e:	d00b      	beq.n	8005d58 <__pow5mult+0x90>
 8005d40:	6820      	ldr	r0, [r4, #0]
 8005d42:	b938      	cbnz	r0, 8005d54 <__pow5mult+0x8c>
 8005d44:	4622      	mov	r2, r4
 8005d46:	4621      	mov	r1, r4
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f7ff ff26 	bl	8005b9a <__multiply>
 8005d4e:	6020      	str	r0, [r4, #0]
 8005d50:	f8c0 8000 	str.w	r8, [r0]
 8005d54:	4604      	mov	r4, r0
 8005d56:	e7e4      	b.n	8005d22 <__pow5mult+0x5a>
 8005d58:	4638      	mov	r0, r7
 8005d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d5e:	bf00      	nop
 8005d60:	08006ae8 	.word	0x08006ae8

08005d64 <__lshift>:
 8005d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d68:	460c      	mov	r4, r1
 8005d6a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d6e:	6923      	ldr	r3, [r4, #16]
 8005d70:	6849      	ldr	r1, [r1, #4]
 8005d72:	eb0a 0903 	add.w	r9, sl, r3
 8005d76:	68a3      	ldr	r3, [r4, #8]
 8005d78:	4607      	mov	r7, r0
 8005d7a:	4616      	mov	r6, r2
 8005d7c:	f109 0501 	add.w	r5, r9, #1
 8005d80:	42ab      	cmp	r3, r5
 8005d82:	db32      	blt.n	8005dea <__lshift+0x86>
 8005d84:	4638      	mov	r0, r7
 8005d86:	f7ff fe2b 	bl	80059e0 <_Balloc>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	4680      	mov	r8, r0
 8005d8e:	f100 0114 	add.w	r1, r0, #20
 8005d92:	461a      	mov	r2, r3
 8005d94:	4553      	cmp	r3, sl
 8005d96:	db2b      	blt.n	8005df0 <__lshift+0x8c>
 8005d98:	6920      	ldr	r0, [r4, #16]
 8005d9a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d9e:	f104 0314 	add.w	r3, r4, #20
 8005da2:	f016 021f 	ands.w	r2, r6, #31
 8005da6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005daa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005dae:	d025      	beq.n	8005dfc <__lshift+0x98>
 8005db0:	f1c2 0e20 	rsb	lr, r2, #32
 8005db4:	2000      	movs	r0, #0
 8005db6:	681e      	ldr	r6, [r3, #0]
 8005db8:	468a      	mov	sl, r1
 8005dba:	4096      	lsls	r6, r2
 8005dbc:	4330      	orrs	r0, r6
 8005dbe:	f84a 0b04 	str.w	r0, [sl], #4
 8005dc2:	f853 0b04 	ldr.w	r0, [r3], #4
 8005dc6:	459c      	cmp	ip, r3
 8005dc8:	fa20 f00e 	lsr.w	r0, r0, lr
 8005dcc:	d814      	bhi.n	8005df8 <__lshift+0x94>
 8005dce:	6048      	str	r0, [r1, #4]
 8005dd0:	b108      	cbz	r0, 8005dd6 <__lshift+0x72>
 8005dd2:	f109 0502 	add.w	r5, r9, #2
 8005dd6:	3d01      	subs	r5, #1
 8005dd8:	4638      	mov	r0, r7
 8005dda:	f8c8 5010 	str.w	r5, [r8, #16]
 8005dde:	4621      	mov	r1, r4
 8005de0:	f7ff fe32 	bl	8005a48 <_Bfree>
 8005de4:	4640      	mov	r0, r8
 8005de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dea:	3101      	adds	r1, #1
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	e7c7      	b.n	8005d80 <__lshift+0x1c>
 8005df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005df4:	3301      	adds	r3, #1
 8005df6:	e7cd      	b.n	8005d94 <__lshift+0x30>
 8005df8:	4651      	mov	r1, sl
 8005dfa:	e7dc      	b.n	8005db6 <__lshift+0x52>
 8005dfc:	3904      	subs	r1, #4
 8005dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e02:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e06:	459c      	cmp	ip, r3
 8005e08:	d8f9      	bhi.n	8005dfe <__lshift+0x9a>
 8005e0a:	e7e4      	b.n	8005dd6 <__lshift+0x72>

08005e0c <__mcmp>:
 8005e0c:	6903      	ldr	r3, [r0, #16]
 8005e0e:	690a      	ldr	r2, [r1, #16]
 8005e10:	1a9b      	subs	r3, r3, r2
 8005e12:	b530      	push	{r4, r5, lr}
 8005e14:	d10c      	bne.n	8005e30 <__mcmp+0x24>
 8005e16:	0092      	lsls	r2, r2, #2
 8005e18:	3014      	adds	r0, #20
 8005e1a:	3114      	adds	r1, #20
 8005e1c:	1884      	adds	r4, r0, r2
 8005e1e:	4411      	add	r1, r2
 8005e20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e28:	4295      	cmp	r5, r2
 8005e2a:	d003      	beq.n	8005e34 <__mcmp+0x28>
 8005e2c:	d305      	bcc.n	8005e3a <__mcmp+0x2e>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	4618      	mov	r0, r3
 8005e32:	bd30      	pop	{r4, r5, pc}
 8005e34:	42a0      	cmp	r0, r4
 8005e36:	d3f3      	bcc.n	8005e20 <__mcmp+0x14>
 8005e38:	e7fa      	b.n	8005e30 <__mcmp+0x24>
 8005e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e3e:	e7f7      	b.n	8005e30 <__mcmp+0x24>

08005e40 <__mdiff>:
 8005e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e44:	460d      	mov	r5, r1
 8005e46:	4607      	mov	r7, r0
 8005e48:	4611      	mov	r1, r2
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	4614      	mov	r4, r2
 8005e4e:	f7ff ffdd 	bl	8005e0c <__mcmp>
 8005e52:	1e06      	subs	r6, r0, #0
 8005e54:	d108      	bne.n	8005e68 <__mdiff+0x28>
 8005e56:	4631      	mov	r1, r6
 8005e58:	4638      	mov	r0, r7
 8005e5a:	f7ff fdc1 	bl	80059e0 <_Balloc>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e68:	bfa4      	itt	ge
 8005e6a:	4623      	movge	r3, r4
 8005e6c:	462c      	movge	r4, r5
 8005e6e:	4638      	mov	r0, r7
 8005e70:	6861      	ldr	r1, [r4, #4]
 8005e72:	bfa6      	itte	ge
 8005e74:	461d      	movge	r5, r3
 8005e76:	2600      	movge	r6, #0
 8005e78:	2601      	movlt	r6, #1
 8005e7a:	f7ff fdb1 	bl	80059e0 <_Balloc>
 8005e7e:	692b      	ldr	r3, [r5, #16]
 8005e80:	60c6      	str	r6, [r0, #12]
 8005e82:	6926      	ldr	r6, [r4, #16]
 8005e84:	f105 0914 	add.w	r9, r5, #20
 8005e88:	f104 0214 	add.w	r2, r4, #20
 8005e8c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005e90:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005e94:	f100 0514 	add.w	r5, r0, #20
 8005e98:	f04f 0e00 	mov.w	lr, #0
 8005e9c:	f852 ab04 	ldr.w	sl, [r2], #4
 8005ea0:	f859 4b04 	ldr.w	r4, [r9], #4
 8005ea4:	fa1e f18a 	uxtah	r1, lr, sl
 8005ea8:	b2a3      	uxth	r3, r4
 8005eaa:	1ac9      	subs	r1, r1, r3
 8005eac:	0c23      	lsrs	r3, r4, #16
 8005eae:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005eb2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005eb6:	b289      	uxth	r1, r1
 8005eb8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005ebc:	45c8      	cmp	r8, r9
 8005ebe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005ec2:	4694      	mov	ip, r2
 8005ec4:	f845 3b04 	str.w	r3, [r5], #4
 8005ec8:	d8e8      	bhi.n	8005e9c <__mdiff+0x5c>
 8005eca:	45bc      	cmp	ip, r7
 8005ecc:	d304      	bcc.n	8005ed8 <__mdiff+0x98>
 8005ece:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005ed2:	b183      	cbz	r3, 8005ef6 <__mdiff+0xb6>
 8005ed4:	6106      	str	r6, [r0, #16]
 8005ed6:	e7c5      	b.n	8005e64 <__mdiff+0x24>
 8005ed8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005edc:	fa1e f381 	uxtah	r3, lr, r1
 8005ee0:	141a      	asrs	r2, r3, #16
 8005ee2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005eec:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005ef0:	f845 3b04 	str.w	r3, [r5], #4
 8005ef4:	e7e9      	b.n	8005eca <__mdiff+0x8a>
 8005ef6:	3e01      	subs	r6, #1
 8005ef8:	e7e9      	b.n	8005ece <__mdiff+0x8e>

08005efa <__d2b>:
 8005efa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005efe:	460e      	mov	r6, r1
 8005f00:	2101      	movs	r1, #1
 8005f02:	ec59 8b10 	vmov	r8, r9, d0
 8005f06:	4615      	mov	r5, r2
 8005f08:	f7ff fd6a 	bl	80059e0 <_Balloc>
 8005f0c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005f10:	4607      	mov	r7, r0
 8005f12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f16:	bb34      	cbnz	r4, 8005f66 <__d2b+0x6c>
 8005f18:	9301      	str	r3, [sp, #4]
 8005f1a:	f1b8 0300 	subs.w	r3, r8, #0
 8005f1e:	d027      	beq.n	8005f70 <__d2b+0x76>
 8005f20:	a802      	add	r0, sp, #8
 8005f22:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005f26:	f7ff fe00 	bl	8005b2a <__lo0bits>
 8005f2a:	9900      	ldr	r1, [sp, #0]
 8005f2c:	b1f0      	cbz	r0, 8005f6c <__d2b+0x72>
 8005f2e:	9a01      	ldr	r2, [sp, #4]
 8005f30:	f1c0 0320 	rsb	r3, r0, #32
 8005f34:	fa02 f303 	lsl.w	r3, r2, r3
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	40c2      	lsrs	r2, r0
 8005f3c:	617b      	str	r3, [r7, #20]
 8005f3e:	9201      	str	r2, [sp, #4]
 8005f40:	9b01      	ldr	r3, [sp, #4]
 8005f42:	61bb      	str	r3, [r7, #24]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	bf14      	ite	ne
 8005f48:	2102      	movne	r1, #2
 8005f4a:	2101      	moveq	r1, #1
 8005f4c:	6139      	str	r1, [r7, #16]
 8005f4e:	b1c4      	cbz	r4, 8005f82 <__d2b+0x88>
 8005f50:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005f54:	4404      	add	r4, r0
 8005f56:	6034      	str	r4, [r6, #0]
 8005f58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f5c:	6028      	str	r0, [r5, #0]
 8005f5e:	4638      	mov	r0, r7
 8005f60:	b003      	add	sp, #12
 8005f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f6a:	e7d5      	b.n	8005f18 <__d2b+0x1e>
 8005f6c:	6179      	str	r1, [r7, #20]
 8005f6e:	e7e7      	b.n	8005f40 <__d2b+0x46>
 8005f70:	a801      	add	r0, sp, #4
 8005f72:	f7ff fdda 	bl	8005b2a <__lo0bits>
 8005f76:	9b01      	ldr	r3, [sp, #4]
 8005f78:	617b      	str	r3, [r7, #20]
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	6139      	str	r1, [r7, #16]
 8005f7e:	3020      	adds	r0, #32
 8005f80:	e7e5      	b.n	8005f4e <__d2b+0x54>
 8005f82:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005f86:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f8a:	6030      	str	r0, [r6, #0]
 8005f8c:	6918      	ldr	r0, [r3, #16]
 8005f8e:	f7ff fdad 	bl	8005aec <__hi0bits>
 8005f92:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005f96:	e7e1      	b.n	8005f5c <__d2b+0x62>

08005f98 <_calloc_r>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	fb02 f401 	mul.w	r4, r2, r1
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	f000 f856 	bl	8006050 <_malloc_r>
 8005fa4:	4605      	mov	r5, r0
 8005fa6:	b118      	cbz	r0, 8005fb0 <_calloc_r+0x18>
 8005fa8:	4622      	mov	r2, r4
 8005faa:	2100      	movs	r1, #0
 8005fac:	f7fe f975 	bl	800429a <memset>
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}

08005fb4 <_free_r>:
 8005fb4:	b538      	push	{r3, r4, r5, lr}
 8005fb6:	4605      	mov	r5, r0
 8005fb8:	2900      	cmp	r1, #0
 8005fba:	d045      	beq.n	8006048 <_free_r+0x94>
 8005fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fc0:	1f0c      	subs	r4, r1, #4
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	bfb8      	it	lt
 8005fc6:	18e4      	addlt	r4, r4, r3
 8005fc8:	f000 fc4a 	bl	8006860 <__malloc_lock>
 8005fcc:	4a1f      	ldr	r2, [pc, #124]	; (800604c <_free_r+0x98>)
 8005fce:	6813      	ldr	r3, [r2, #0]
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	b933      	cbnz	r3, 8005fe2 <_free_r+0x2e>
 8005fd4:	6063      	str	r3, [r4, #4]
 8005fd6:	6014      	str	r4, [r2, #0]
 8005fd8:	4628      	mov	r0, r5
 8005fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fde:	f000 bc40 	b.w	8006862 <__malloc_unlock>
 8005fe2:	42a3      	cmp	r3, r4
 8005fe4:	d90c      	bls.n	8006000 <_free_r+0x4c>
 8005fe6:	6821      	ldr	r1, [r4, #0]
 8005fe8:	1862      	adds	r2, r4, r1
 8005fea:	4293      	cmp	r3, r2
 8005fec:	bf04      	itt	eq
 8005fee:	681a      	ldreq	r2, [r3, #0]
 8005ff0:	685b      	ldreq	r3, [r3, #4]
 8005ff2:	6063      	str	r3, [r4, #4]
 8005ff4:	bf04      	itt	eq
 8005ff6:	1852      	addeq	r2, r2, r1
 8005ff8:	6022      	streq	r2, [r4, #0]
 8005ffa:	6004      	str	r4, [r0, #0]
 8005ffc:	e7ec      	b.n	8005fd8 <_free_r+0x24>
 8005ffe:	4613      	mov	r3, r2
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	b10a      	cbz	r2, 8006008 <_free_r+0x54>
 8006004:	42a2      	cmp	r2, r4
 8006006:	d9fa      	bls.n	8005ffe <_free_r+0x4a>
 8006008:	6819      	ldr	r1, [r3, #0]
 800600a:	1858      	adds	r0, r3, r1
 800600c:	42a0      	cmp	r0, r4
 800600e:	d10b      	bne.n	8006028 <_free_r+0x74>
 8006010:	6820      	ldr	r0, [r4, #0]
 8006012:	4401      	add	r1, r0
 8006014:	1858      	adds	r0, r3, r1
 8006016:	4282      	cmp	r2, r0
 8006018:	6019      	str	r1, [r3, #0]
 800601a:	d1dd      	bne.n	8005fd8 <_free_r+0x24>
 800601c:	6810      	ldr	r0, [r2, #0]
 800601e:	6852      	ldr	r2, [r2, #4]
 8006020:	605a      	str	r2, [r3, #4]
 8006022:	4401      	add	r1, r0
 8006024:	6019      	str	r1, [r3, #0]
 8006026:	e7d7      	b.n	8005fd8 <_free_r+0x24>
 8006028:	d902      	bls.n	8006030 <_free_r+0x7c>
 800602a:	230c      	movs	r3, #12
 800602c:	602b      	str	r3, [r5, #0]
 800602e:	e7d3      	b.n	8005fd8 <_free_r+0x24>
 8006030:	6820      	ldr	r0, [r4, #0]
 8006032:	1821      	adds	r1, r4, r0
 8006034:	428a      	cmp	r2, r1
 8006036:	bf04      	itt	eq
 8006038:	6811      	ldreq	r1, [r2, #0]
 800603a:	6852      	ldreq	r2, [r2, #4]
 800603c:	6062      	str	r2, [r4, #4]
 800603e:	bf04      	itt	eq
 8006040:	1809      	addeq	r1, r1, r0
 8006042:	6021      	streq	r1, [r4, #0]
 8006044:	605c      	str	r4, [r3, #4]
 8006046:	e7c7      	b.n	8005fd8 <_free_r+0x24>
 8006048:	bd38      	pop	{r3, r4, r5, pc}
 800604a:	bf00      	nop
 800604c:	200001fc 	.word	0x200001fc

08006050 <_malloc_r>:
 8006050:	b570      	push	{r4, r5, r6, lr}
 8006052:	1ccd      	adds	r5, r1, #3
 8006054:	f025 0503 	bic.w	r5, r5, #3
 8006058:	3508      	adds	r5, #8
 800605a:	2d0c      	cmp	r5, #12
 800605c:	bf38      	it	cc
 800605e:	250c      	movcc	r5, #12
 8006060:	2d00      	cmp	r5, #0
 8006062:	4606      	mov	r6, r0
 8006064:	db01      	blt.n	800606a <_malloc_r+0x1a>
 8006066:	42a9      	cmp	r1, r5
 8006068:	d903      	bls.n	8006072 <_malloc_r+0x22>
 800606a:	230c      	movs	r3, #12
 800606c:	6033      	str	r3, [r6, #0]
 800606e:	2000      	movs	r0, #0
 8006070:	bd70      	pop	{r4, r5, r6, pc}
 8006072:	f000 fbf5 	bl	8006860 <__malloc_lock>
 8006076:	4a21      	ldr	r2, [pc, #132]	; (80060fc <_malloc_r+0xac>)
 8006078:	6814      	ldr	r4, [r2, #0]
 800607a:	4621      	mov	r1, r4
 800607c:	b991      	cbnz	r1, 80060a4 <_malloc_r+0x54>
 800607e:	4c20      	ldr	r4, [pc, #128]	; (8006100 <_malloc_r+0xb0>)
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	b91b      	cbnz	r3, 800608c <_malloc_r+0x3c>
 8006084:	4630      	mov	r0, r6
 8006086:	f000 f97d 	bl	8006384 <_sbrk_r>
 800608a:	6020      	str	r0, [r4, #0]
 800608c:	4629      	mov	r1, r5
 800608e:	4630      	mov	r0, r6
 8006090:	f000 f978 	bl	8006384 <_sbrk_r>
 8006094:	1c43      	adds	r3, r0, #1
 8006096:	d124      	bne.n	80060e2 <_malloc_r+0x92>
 8006098:	230c      	movs	r3, #12
 800609a:	6033      	str	r3, [r6, #0]
 800609c:	4630      	mov	r0, r6
 800609e:	f000 fbe0 	bl	8006862 <__malloc_unlock>
 80060a2:	e7e4      	b.n	800606e <_malloc_r+0x1e>
 80060a4:	680b      	ldr	r3, [r1, #0]
 80060a6:	1b5b      	subs	r3, r3, r5
 80060a8:	d418      	bmi.n	80060dc <_malloc_r+0x8c>
 80060aa:	2b0b      	cmp	r3, #11
 80060ac:	d90f      	bls.n	80060ce <_malloc_r+0x7e>
 80060ae:	600b      	str	r3, [r1, #0]
 80060b0:	50cd      	str	r5, [r1, r3]
 80060b2:	18cc      	adds	r4, r1, r3
 80060b4:	4630      	mov	r0, r6
 80060b6:	f000 fbd4 	bl	8006862 <__malloc_unlock>
 80060ba:	f104 000b 	add.w	r0, r4, #11
 80060be:	1d23      	adds	r3, r4, #4
 80060c0:	f020 0007 	bic.w	r0, r0, #7
 80060c4:	1ac3      	subs	r3, r0, r3
 80060c6:	d0d3      	beq.n	8006070 <_malloc_r+0x20>
 80060c8:	425a      	negs	r2, r3
 80060ca:	50e2      	str	r2, [r4, r3]
 80060cc:	e7d0      	b.n	8006070 <_malloc_r+0x20>
 80060ce:	428c      	cmp	r4, r1
 80060d0:	684b      	ldr	r3, [r1, #4]
 80060d2:	bf16      	itet	ne
 80060d4:	6063      	strne	r3, [r4, #4]
 80060d6:	6013      	streq	r3, [r2, #0]
 80060d8:	460c      	movne	r4, r1
 80060da:	e7eb      	b.n	80060b4 <_malloc_r+0x64>
 80060dc:	460c      	mov	r4, r1
 80060de:	6849      	ldr	r1, [r1, #4]
 80060e0:	e7cc      	b.n	800607c <_malloc_r+0x2c>
 80060e2:	1cc4      	adds	r4, r0, #3
 80060e4:	f024 0403 	bic.w	r4, r4, #3
 80060e8:	42a0      	cmp	r0, r4
 80060ea:	d005      	beq.n	80060f8 <_malloc_r+0xa8>
 80060ec:	1a21      	subs	r1, r4, r0
 80060ee:	4630      	mov	r0, r6
 80060f0:	f000 f948 	bl	8006384 <_sbrk_r>
 80060f4:	3001      	adds	r0, #1
 80060f6:	d0cf      	beq.n	8006098 <_malloc_r+0x48>
 80060f8:	6025      	str	r5, [r4, #0]
 80060fa:	e7db      	b.n	80060b4 <_malloc_r+0x64>
 80060fc:	200001fc 	.word	0x200001fc
 8006100:	20000200 	.word	0x20000200

08006104 <__sfputc_r>:
 8006104:	6893      	ldr	r3, [r2, #8]
 8006106:	3b01      	subs	r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	b410      	push	{r4}
 800610c:	6093      	str	r3, [r2, #8]
 800610e:	da08      	bge.n	8006122 <__sfputc_r+0x1e>
 8006110:	6994      	ldr	r4, [r2, #24]
 8006112:	42a3      	cmp	r3, r4
 8006114:	db01      	blt.n	800611a <__sfputc_r+0x16>
 8006116:	290a      	cmp	r1, #10
 8006118:	d103      	bne.n	8006122 <__sfputc_r+0x1e>
 800611a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800611e:	f000 b985 	b.w	800642c <__swbuf_r>
 8006122:	6813      	ldr	r3, [r2, #0]
 8006124:	1c58      	adds	r0, r3, #1
 8006126:	6010      	str	r0, [r2, #0]
 8006128:	7019      	strb	r1, [r3, #0]
 800612a:	4608      	mov	r0, r1
 800612c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006130:	4770      	bx	lr

08006132 <__sfputs_r>:
 8006132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006134:	4606      	mov	r6, r0
 8006136:	460f      	mov	r7, r1
 8006138:	4614      	mov	r4, r2
 800613a:	18d5      	adds	r5, r2, r3
 800613c:	42ac      	cmp	r4, r5
 800613e:	d101      	bne.n	8006144 <__sfputs_r+0x12>
 8006140:	2000      	movs	r0, #0
 8006142:	e007      	b.n	8006154 <__sfputs_r+0x22>
 8006144:	463a      	mov	r2, r7
 8006146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800614a:	4630      	mov	r0, r6
 800614c:	f7ff ffda 	bl	8006104 <__sfputc_r>
 8006150:	1c43      	adds	r3, r0, #1
 8006152:	d1f3      	bne.n	800613c <__sfputs_r+0xa>
 8006154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006158 <_vfiprintf_r>:
 8006158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615c:	460c      	mov	r4, r1
 800615e:	b09d      	sub	sp, #116	; 0x74
 8006160:	4617      	mov	r7, r2
 8006162:	461d      	mov	r5, r3
 8006164:	4606      	mov	r6, r0
 8006166:	b118      	cbz	r0, 8006170 <_vfiprintf_r+0x18>
 8006168:	6983      	ldr	r3, [r0, #24]
 800616a:	b90b      	cbnz	r3, 8006170 <_vfiprintf_r+0x18>
 800616c:	f7ff fb98 	bl	80058a0 <__sinit>
 8006170:	4b7c      	ldr	r3, [pc, #496]	; (8006364 <_vfiprintf_r+0x20c>)
 8006172:	429c      	cmp	r4, r3
 8006174:	d158      	bne.n	8006228 <_vfiprintf_r+0xd0>
 8006176:	6874      	ldr	r4, [r6, #4]
 8006178:	89a3      	ldrh	r3, [r4, #12]
 800617a:	0718      	lsls	r0, r3, #28
 800617c:	d55e      	bpl.n	800623c <_vfiprintf_r+0xe4>
 800617e:	6923      	ldr	r3, [r4, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d05b      	beq.n	800623c <_vfiprintf_r+0xe4>
 8006184:	2300      	movs	r3, #0
 8006186:	9309      	str	r3, [sp, #36]	; 0x24
 8006188:	2320      	movs	r3, #32
 800618a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800618e:	2330      	movs	r3, #48	; 0x30
 8006190:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006194:	9503      	str	r5, [sp, #12]
 8006196:	f04f 0b01 	mov.w	fp, #1
 800619a:	46b8      	mov	r8, r7
 800619c:	4645      	mov	r5, r8
 800619e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80061a2:	b10b      	cbz	r3, 80061a8 <_vfiprintf_r+0x50>
 80061a4:	2b25      	cmp	r3, #37	; 0x25
 80061a6:	d154      	bne.n	8006252 <_vfiprintf_r+0xfa>
 80061a8:	ebb8 0a07 	subs.w	sl, r8, r7
 80061ac:	d00b      	beq.n	80061c6 <_vfiprintf_r+0x6e>
 80061ae:	4653      	mov	r3, sl
 80061b0:	463a      	mov	r2, r7
 80061b2:	4621      	mov	r1, r4
 80061b4:	4630      	mov	r0, r6
 80061b6:	f7ff ffbc 	bl	8006132 <__sfputs_r>
 80061ba:	3001      	adds	r0, #1
 80061bc:	f000 80c2 	beq.w	8006344 <_vfiprintf_r+0x1ec>
 80061c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c2:	4453      	add	r3, sl
 80061c4:	9309      	str	r3, [sp, #36]	; 0x24
 80061c6:	f898 3000 	ldrb.w	r3, [r8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f000 80ba 	beq.w	8006344 <_vfiprintf_r+0x1ec>
 80061d0:	2300      	movs	r3, #0
 80061d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061da:	9304      	str	r3, [sp, #16]
 80061dc:	9307      	str	r3, [sp, #28]
 80061de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061e2:	931a      	str	r3, [sp, #104]	; 0x68
 80061e4:	46a8      	mov	r8, r5
 80061e6:	2205      	movs	r2, #5
 80061e8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80061ec:	485e      	ldr	r0, [pc, #376]	; (8006368 <_vfiprintf_r+0x210>)
 80061ee:	f7f9 ffff 	bl	80001f0 <memchr>
 80061f2:	9b04      	ldr	r3, [sp, #16]
 80061f4:	bb78      	cbnz	r0, 8006256 <_vfiprintf_r+0xfe>
 80061f6:	06d9      	lsls	r1, r3, #27
 80061f8:	bf44      	itt	mi
 80061fa:	2220      	movmi	r2, #32
 80061fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006200:	071a      	lsls	r2, r3, #28
 8006202:	bf44      	itt	mi
 8006204:	222b      	movmi	r2, #43	; 0x2b
 8006206:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800620a:	782a      	ldrb	r2, [r5, #0]
 800620c:	2a2a      	cmp	r2, #42	; 0x2a
 800620e:	d02a      	beq.n	8006266 <_vfiprintf_r+0x10e>
 8006210:	9a07      	ldr	r2, [sp, #28]
 8006212:	46a8      	mov	r8, r5
 8006214:	2000      	movs	r0, #0
 8006216:	250a      	movs	r5, #10
 8006218:	4641      	mov	r1, r8
 800621a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800621e:	3b30      	subs	r3, #48	; 0x30
 8006220:	2b09      	cmp	r3, #9
 8006222:	d969      	bls.n	80062f8 <_vfiprintf_r+0x1a0>
 8006224:	b360      	cbz	r0, 8006280 <_vfiprintf_r+0x128>
 8006226:	e024      	b.n	8006272 <_vfiprintf_r+0x11a>
 8006228:	4b50      	ldr	r3, [pc, #320]	; (800636c <_vfiprintf_r+0x214>)
 800622a:	429c      	cmp	r4, r3
 800622c:	d101      	bne.n	8006232 <_vfiprintf_r+0xda>
 800622e:	68b4      	ldr	r4, [r6, #8]
 8006230:	e7a2      	b.n	8006178 <_vfiprintf_r+0x20>
 8006232:	4b4f      	ldr	r3, [pc, #316]	; (8006370 <_vfiprintf_r+0x218>)
 8006234:	429c      	cmp	r4, r3
 8006236:	bf08      	it	eq
 8006238:	68f4      	ldreq	r4, [r6, #12]
 800623a:	e79d      	b.n	8006178 <_vfiprintf_r+0x20>
 800623c:	4621      	mov	r1, r4
 800623e:	4630      	mov	r0, r6
 8006240:	f000 f958 	bl	80064f4 <__swsetup_r>
 8006244:	2800      	cmp	r0, #0
 8006246:	d09d      	beq.n	8006184 <_vfiprintf_r+0x2c>
 8006248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800624c:	b01d      	add	sp, #116	; 0x74
 800624e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006252:	46a8      	mov	r8, r5
 8006254:	e7a2      	b.n	800619c <_vfiprintf_r+0x44>
 8006256:	4a44      	ldr	r2, [pc, #272]	; (8006368 <_vfiprintf_r+0x210>)
 8006258:	1a80      	subs	r0, r0, r2
 800625a:	fa0b f000 	lsl.w	r0, fp, r0
 800625e:	4318      	orrs	r0, r3
 8006260:	9004      	str	r0, [sp, #16]
 8006262:	4645      	mov	r5, r8
 8006264:	e7be      	b.n	80061e4 <_vfiprintf_r+0x8c>
 8006266:	9a03      	ldr	r2, [sp, #12]
 8006268:	1d11      	adds	r1, r2, #4
 800626a:	6812      	ldr	r2, [r2, #0]
 800626c:	9103      	str	r1, [sp, #12]
 800626e:	2a00      	cmp	r2, #0
 8006270:	db01      	blt.n	8006276 <_vfiprintf_r+0x11e>
 8006272:	9207      	str	r2, [sp, #28]
 8006274:	e004      	b.n	8006280 <_vfiprintf_r+0x128>
 8006276:	4252      	negs	r2, r2
 8006278:	f043 0302 	orr.w	r3, r3, #2
 800627c:	9207      	str	r2, [sp, #28]
 800627e:	9304      	str	r3, [sp, #16]
 8006280:	f898 3000 	ldrb.w	r3, [r8]
 8006284:	2b2e      	cmp	r3, #46	; 0x2e
 8006286:	d10e      	bne.n	80062a6 <_vfiprintf_r+0x14e>
 8006288:	f898 3001 	ldrb.w	r3, [r8, #1]
 800628c:	2b2a      	cmp	r3, #42	; 0x2a
 800628e:	d138      	bne.n	8006302 <_vfiprintf_r+0x1aa>
 8006290:	9b03      	ldr	r3, [sp, #12]
 8006292:	1d1a      	adds	r2, r3, #4
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	9203      	str	r2, [sp, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	bfb8      	it	lt
 800629c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80062a0:	f108 0802 	add.w	r8, r8, #2
 80062a4:	9305      	str	r3, [sp, #20]
 80062a6:	4d33      	ldr	r5, [pc, #204]	; (8006374 <_vfiprintf_r+0x21c>)
 80062a8:	f898 1000 	ldrb.w	r1, [r8]
 80062ac:	2203      	movs	r2, #3
 80062ae:	4628      	mov	r0, r5
 80062b0:	f7f9 ff9e 	bl	80001f0 <memchr>
 80062b4:	b140      	cbz	r0, 80062c8 <_vfiprintf_r+0x170>
 80062b6:	2340      	movs	r3, #64	; 0x40
 80062b8:	1b40      	subs	r0, r0, r5
 80062ba:	fa03 f000 	lsl.w	r0, r3, r0
 80062be:	9b04      	ldr	r3, [sp, #16]
 80062c0:	4303      	orrs	r3, r0
 80062c2:	f108 0801 	add.w	r8, r8, #1
 80062c6:	9304      	str	r3, [sp, #16]
 80062c8:	f898 1000 	ldrb.w	r1, [r8]
 80062cc:	482a      	ldr	r0, [pc, #168]	; (8006378 <_vfiprintf_r+0x220>)
 80062ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062d2:	2206      	movs	r2, #6
 80062d4:	f108 0701 	add.w	r7, r8, #1
 80062d8:	f7f9 ff8a 	bl	80001f0 <memchr>
 80062dc:	2800      	cmp	r0, #0
 80062de:	d037      	beq.n	8006350 <_vfiprintf_r+0x1f8>
 80062e0:	4b26      	ldr	r3, [pc, #152]	; (800637c <_vfiprintf_r+0x224>)
 80062e2:	bb1b      	cbnz	r3, 800632c <_vfiprintf_r+0x1d4>
 80062e4:	9b03      	ldr	r3, [sp, #12]
 80062e6:	3307      	adds	r3, #7
 80062e8:	f023 0307 	bic.w	r3, r3, #7
 80062ec:	3308      	adds	r3, #8
 80062ee:	9303      	str	r3, [sp, #12]
 80062f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f2:	444b      	add	r3, r9
 80062f4:	9309      	str	r3, [sp, #36]	; 0x24
 80062f6:	e750      	b.n	800619a <_vfiprintf_r+0x42>
 80062f8:	fb05 3202 	mla	r2, r5, r2, r3
 80062fc:	2001      	movs	r0, #1
 80062fe:	4688      	mov	r8, r1
 8006300:	e78a      	b.n	8006218 <_vfiprintf_r+0xc0>
 8006302:	2300      	movs	r3, #0
 8006304:	f108 0801 	add.w	r8, r8, #1
 8006308:	9305      	str	r3, [sp, #20]
 800630a:	4619      	mov	r1, r3
 800630c:	250a      	movs	r5, #10
 800630e:	4640      	mov	r0, r8
 8006310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006314:	3a30      	subs	r2, #48	; 0x30
 8006316:	2a09      	cmp	r2, #9
 8006318:	d903      	bls.n	8006322 <_vfiprintf_r+0x1ca>
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0c3      	beq.n	80062a6 <_vfiprintf_r+0x14e>
 800631e:	9105      	str	r1, [sp, #20]
 8006320:	e7c1      	b.n	80062a6 <_vfiprintf_r+0x14e>
 8006322:	fb05 2101 	mla	r1, r5, r1, r2
 8006326:	2301      	movs	r3, #1
 8006328:	4680      	mov	r8, r0
 800632a:	e7f0      	b.n	800630e <_vfiprintf_r+0x1b6>
 800632c:	ab03      	add	r3, sp, #12
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	4622      	mov	r2, r4
 8006332:	4b13      	ldr	r3, [pc, #76]	; (8006380 <_vfiprintf_r+0x228>)
 8006334:	a904      	add	r1, sp, #16
 8006336:	4630      	mov	r0, r6
 8006338:	f7fe f84c 	bl	80043d4 <_printf_float>
 800633c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006340:	4681      	mov	r9, r0
 8006342:	d1d5      	bne.n	80062f0 <_vfiprintf_r+0x198>
 8006344:	89a3      	ldrh	r3, [r4, #12]
 8006346:	065b      	lsls	r3, r3, #25
 8006348:	f53f af7e 	bmi.w	8006248 <_vfiprintf_r+0xf0>
 800634c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800634e:	e77d      	b.n	800624c <_vfiprintf_r+0xf4>
 8006350:	ab03      	add	r3, sp, #12
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	4622      	mov	r2, r4
 8006356:	4b0a      	ldr	r3, [pc, #40]	; (8006380 <_vfiprintf_r+0x228>)
 8006358:	a904      	add	r1, sp, #16
 800635a:	4630      	mov	r0, r6
 800635c:	f7fe faf0 	bl	8004940 <_printf_i>
 8006360:	e7ec      	b.n	800633c <_vfiprintf_r+0x1e4>
 8006362:	bf00      	nop
 8006364:	080069b8 	.word	0x080069b8
 8006368:	08006af4 	.word	0x08006af4
 800636c:	080069d8 	.word	0x080069d8
 8006370:	08006998 	.word	0x08006998
 8006374:	08006afa 	.word	0x08006afa
 8006378:	08006afe 	.word	0x08006afe
 800637c:	080043d5 	.word	0x080043d5
 8006380:	08006133 	.word	0x08006133

08006384 <_sbrk_r>:
 8006384:	b538      	push	{r3, r4, r5, lr}
 8006386:	4c06      	ldr	r4, [pc, #24]	; (80063a0 <_sbrk_r+0x1c>)
 8006388:	2300      	movs	r3, #0
 800638a:	4605      	mov	r5, r0
 800638c:	4608      	mov	r0, r1
 800638e:	6023      	str	r3, [r4, #0]
 8006390:	f7fa ff58 	bl	8001244 <_sbrk>
 8006394:	1c43      	adds	r3, r0, #1
 8006396:	d102      	bne.n	800639e <_sbrk_r+0x1a>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	b103      	cbz	r3, 800639e <_sbrk_r+0x1a>
 800639c:	602b      	str	r3, [r5, #0]
 800639e:	bd38      	pop	{r3, r4, r5, pc}
 80063a0:	20000328 	.word	0x20000328

080063a4 <__sread>:
 80063a4:	b510      	push	{r4, lr}
 80063a6:	460c      	mov	r4, r1
 80063a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ac:	f000 fa5a 	bl	8006864 <_read_r>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	bfab      	itete	ge
 80063b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063b6:	89a3      	ldrhlt	r3, [r4, #12]
 80063b8:	181b      	addge	r3, r3, r0
 80063ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063be:	bfac      	ite	ge
 80063c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80063c2:	81a3      	strhlt	r3, [r4, #12]
 80063c4:	bd10      	pop	{r4, pc}

080063c6 <__swrite>:
 80063c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ca:	461f      	mov	r7, r3
 80063cc:	898b      	ldrh	r3, [r1, #12]
 80063ce:	05db      	lsls	r3, r3, #23
 80063d0:	4605      	mov	r5, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	4616      	mov	r6, r2
 80063d6:	d505      	bpl.n	80063e4 <__swrite+0x1e>
 80063d8:	2302      	movs	r3, #2
 80063da:	2200      	movs	r2, #0
 80063dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063e0:	f000 f9b6 	bl	8006750 <_lseek_r>
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063ee:	81a3      	strh	r3, [r4, #12]
 80063f0:	4632      	mov	r2, r6
 80063f2:	463b      	mov	r3, r7
 80063f4:	4628      	mov	r0, r5
 80063f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063fa:	f000 b869 	b.w	80064d0 <_write_r>

080063fe <__sseek>:
 80063fe:	b510      	push	{r4, lr}
 8006400:	460c      	mov	r4, r1
 8006402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006406:	f000 f9a3 	bl	8006750 <_lseek_r>
 800640a:	1c43      	adds	r3, r0, #1
 800640c:	89a3      	ldrh	r3, [r4, #12]
 800640e:	bf15      	itete	ne
 8006410:	6560      	strne	r0, [r4, #84]	; 0x54
 8006412:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006416:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800641a:	81a3      	strheq	r3, [r4, #12]
 800641c:	bf18      	it	ne
 800641e:	81a3      	strhne	r3, [r4, #12]
 8006420:	bd10      	pop	{r4, pc}

08006422 <__sclose>:
 8006422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006426:	f000 b8d3 	b.w	80065d0 <_close_r>
	...

0800642c <__swbuf_r>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	460e      	mov	r6, r1
 8006430:	4614      	mov	r4, r2
 8006432:	4605      	mov	r5, r0
 8006434:	b118      	cbz	r0, 800643e <__swbuf_r+0x12>
 8006436:	6983      	ldr	r3, [r0, #24]
 8006438:	b90b      	cbnz	r3, 800643e <__swbuf_r+0x12>
 800643a:	f7ff fa31 	bl	80058a0 <__sinit>
 800643e:	4b21      	ldr	r3, [pc, #132]	; (80064c4 <__swbuf_r+0x98>)
 8006440:	429c      	cmp	r4, r3
 8006442:	d12a      	bne.n	800649a <__swbuf_r+0x6e>
 8006444:	686c      	ldr	r4, [r5, #4]
 8006446:	69a3      	ldr	r3, [r4, #24]
 8006448:	60a3      	str	r3, [r4, #8]
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	071a      	lsls	r2, r3, #28
 800644e:	d52e      	bpl.n	80064ae <__swbuf_r+0x82>
 8006450:	6923      	ldr	r3, [r4, #16]
 8006452:	b363      	cbz	r3, 80064ae <__swbuf_r+0x82>
 8006454:	6923      	ldr	r3, [r4, #16]
 8006456:	6820      	ldr	r0, [r4, #0]
 8006458:	1ac0      	subs	r0, r0, r3
 800645a:	6963      	ldr	r3, [r4, #20]
 800645c:	b2f6      	uxtb	r6, r6
 800645e:	4283      	cmp	r3, r0
 8006460:	4637      	mov	r7, r6
 8006462:	dc04      	bgt.n	800646e <__swbuf_r+0x42>
 8006464:	4621      	mov	r1, r4
 8006466:	4628      	mov	r0, r5
 8006468:	f000 f948 	bl	80066fc <_fflush_r>
 800646c:	bb28      	cbnz	r0, 80064ba <__swbuf_r+0x8e>
 800646e:	68a3      	ldr	r3, [r4, #8]
 8006470:	3b01      	subs	r3, #1
 8006472:	60a3      	str	r3, [r4, #8]
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	6022      	str	r2, [r4, #0]
 800647a:	701e      	strb	r6, [r3, #0]
 800647c:	6963      	ldr	r3, [r4, #20]
 800647e:	3001      	adds	r0, #1
 8006480:	4283      	cmp	r3, r0
 8006482:	d004      	beq.n	800648e <__swbuf_r+0x62>
 8006484:	89a3      	ldrh	r3, [r4, #12]
 8006486:	07db      	lsls	r3, r3, #31
 8006488:	d519      	bpl.n	80064be <__swbuf_r+0x92>
 800648a:	2e0a      	cmp	r6, #10
 800648c:	d117      	bne.n	80064be <__swbuf_r+0x92>
 800648e:	4621      	mov	r1, r4
 8006490:	4628      	mov	r0, r5
 8006492:	f000 f933 	bl	80066fc <_fflush_r>
 8006496:	b190      	cbz	r0, 80064be <__swbuf_r+0x92>
 8006498:	e00f      	b.n	80064ba <__swbuf_r+0x8e>
 800649a:	4b0b      	ldr	r3, [pc, #44]	; (80064c8 <__swbuf_r+0x9c>)
 800649c:	429c      	cmp	r4, r3
 800649e:	d101      	bne.n	80064a4 <__swbuf_r+0x78>
 80064a0:	68ac      	ldr	r4, [r5, #8]
 80064a2:	e7d0      	b.n	8006446 <__swbuf_r+0x1a>
 80064a4:	4b09      	ldr	r3, [pc, #36]	; (80064cc <__swbuf_r+0xa0>)
 80064a6:	429c      	cmp	r4, r3
 80064a8:	bf08      	it	eq
 80064aa:	68ec      	ldreq	r4, [r5, #12]
 80064ac:	e7cb      	b.n	8006446 <__swbuf_r+0x1a>
 80064ae:	4621      	mov	r1, r4
 80064b0:	4628      	mov	r0, r5
 80064b2:	f000 f81f 	bl	80064f4 <__swsetup_r>
 80064b6:	2800      	cmp	r0, #0
 80064b8:	d0cc      	beq.n	8006454 <__swbuf_r+0x28>
 80064ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80064be:	4638      	mov	r0, r7
 80064c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064c2:	bf00      	nop
 80064c4:	080069b8 	.word	0x080069b8
 80064c8:	080069d8 	.word	0x080069d8
 80064cc:	08006998 	.word	0x08006998

080064d0 <_write_r>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	4c07      	ldr	r4, [pc, #28]	; (80064f0 <_write_r+0x20>)
 80064d4:	4605      	mov	r5, r0
 80064d6:	4608      	mov	r0, r1
 80064d8:	4611      	mov	r1, r2
 80064da:	2200      	movs	r2, #0
 80064dc:	6022      	str	r2, [r4, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	f7fa ff6a 	bl	80013b8 <_write>
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d102      	bne.n	80064ee <_write_r+0x1e>
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	b103      	cbz	r3, 80064ee <_write_r+0x1e>
 80064ec:	602b      	str	r3, [r5, #0]
 80064ee:	bd38      	pop	{r3, r4, r5, pc}
 80064f0:	20000328 	.word	0x20000328

080064f4 <__swsetup_r>:
 80064f4:	4b32      	ldr	r3, [pc, #200]	; (80065c0 <__swsetup_r+0xcc>)
 80064f6:	b570      	push	{r4, r5, r6, lr}
 80064f8:	681d      	ldr	r5, [r3, #0]
 80064fa:	4606      	mov	r6, r0
 80064fc:	460c      	mov	r4, r1
 80064fe:	b125      	cbz	r5, 800650a <__swsetup_r+0x16>
 8006500:	69ab      	ldr	r3, [r5, #24]
 8006502:	b913      	cbnz	r3, 800650a <__swsetup_r+0x16>
 8006504:	4628      	mov	r0, r5
 8006506:	f7ff f9cb 	bl	80058a0 <__sinit>
 800650a:	4b2e      	ldr	r3, [pc, #184]	; (80065c4 <__swsetup_r+0xd0>)
 800650c:	429c      	cmp	r4, r3
 800650e:	d10f      	bne.n	8006530 <__swsetup_r+0x3c>
 8006510:	686c      	ldr	r4, [r5, #4]
 8006512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006516:	b29a      	uxth	r2, r3
 8006518:	0715      	lsls	r5, r2, #28
 800651a:	d42c      	bmi.n	8006576 <__swsetup_r+0x82>
 800651c:	06d0      	lsls	r0, r2, #27
 800651e:	d411      	bmi.n	8006544 <__swsetup_r+0x50>
 8006520:	2209      	movs	r2, #9
 8006522:	6032      	str	r2, [r6, #0]
 8006524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006528:	81a3      	strh	r3, [r4, #12]
 800652a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800652e:	e03e      	b.n	80065ae <__swsetup_r+0xba>
 8006530:	4b25      	ldr	r3, [pc, #148]	; (80065c8 <__swsetup_r+0xd4>)
 8006532:	429c      	cmp	r4, r3
 8006534:	d101      	bne.n	800653a <__swsetup_r+0x46>
 8006536:	68ac      	ldr	r4, [r5, #8]
 8006538:	e7eb      	b.n	8006512 <__swsetup_r+0x1e>
 800653a:	4b24      	ldr	r3, [pc, #144]	; (80065cc <__swsetup_r+0xd8>)
 800653c:	429c      	cmp	r4, r3
 800653e:	bf08      	it	eq
 8006540:	68ec      	ldreq	r4, [r5, #12]
 8006542:	e7e6      	b.n	8006512 <__swsetup_r+0x1e>
 8006544:	0751      	lsls	r1, r2, #29
 8006546:	d512      	bpl.n	800656e <__swsetup_r+0x7a>
 8006548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800654a:	b141      	cbz	r1, 800655e <__swsetup_r+0x6a>
 800654c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006550:	4299      	cmp	r1, r3
 8006552:	d002      	beq.n	800655a <__swsetup_r+0x66>
 8006554:	4630      	mov	r0, r6
 8006556:	f7ff fd2d 	bl	8005fb4 <_free_r>
 800655a:	2300      	movs	r3, #0
 800655c:	6363      	str	r3, [r4, #52]	; 0x34
 800655e:	89a3      	ldrh	r3, [r4, #12]
 8006560:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006564:	81a3      	strh	r3, [r4, #12]
 8006566:	2300      	movs	r3, #0
 8006568:	6063      	str	r3, [r4, #4]
 800656a:	6923      	ldr	r3, [r4, #16]
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	89a3      	ldrh	r3, [r4, #12]
 8006570:	f043 0308 	orr.w	r3, r3, #8
 8006574:	81a3      	strh	r3, [r4, #12]
 8006576:	6923      	ldr	r3, [r4, #16]
 8006578:	b94b      	cbnz	r3, 800658e <__swsetup_r+0x9a>
 800657a:	89a3      	ldrh	r3, [r4, #12]
 800657c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006584:	d003      	beq.n	800658e <__swsetup_r+0x9a>
 8006586:	4621      	mov	r1, r4
 8006588:	4630      	mov	r0, r6
 800658a:	f000 f917 	bl	80067bc <__smakebuf_r>
 800658e:	89a2      	ldrh	r2, [r4, #12]
 8006590:	f012 0301 	ands.w	r3, r2, #1
 8006594:	d00c      	beq.n	80065b0 <__swsetup_r+0xbc>
 8006596:	2300      	movs	r3, #0
 8006598:	60a3      	str	r3, [r4, #8]
 800659a:	6963      	ldr	r3, [r4, #20]
 800659c:	425b      	negs	r3, r3
 800659e:	61a3      	str	r3, [r4, #24]
 80065a0:	6923      	ldr	r3, [r4, #16]
 80065a2:	b953      	cbnz	r3, 80065ba <__swsetup_r+0xc6>
 80065a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80065ac:	d1ba      	bne.n	8006524 <__swsetup_r+0x30>
 80065ae:	bd70      	pop	{r4, r5, r6, pc}
 80065b0:	0792      	lsls	r2, r2, #30
 80065b2:	bf58      	it	pl
 80065b4:	6963      	ldrpl	r3, [r4, #20]
 80065b6:	60a3      	str	r3, [r4, #8]
 80065b8:	e7f2      	b.n	80065a0 <__swsetup_r+0xac>
 80065ba:	2000      	movs	r0, #0
 80065bc:	e7f7      	b.n	80065ae <__swsetup_r+0xba>
 80065be:	bf00      	nop
 80065c0:	2000000c 	.word	0x2000000c
 80065c4:	080069b8 	.word	0x080069b8
 80065c8:	080069d8 	.word	0x080069d8
 80065cc:	08006998 	.word	0x08006998

080065d0 <_close_r>:
 80065d0:	b538      	push	{r3, r4, r5, lr}
 80065d2:	4c06      	ldr	r4, [pc, #24]	; (80065ec <_close_r+0x1c>)
 80065d4:	2300      	movs	r3, #0
 80065d6:	4605      	mov	r5, r0
 80065d8:	4608      	mov	r0, r1
 80065da:	6023      	str	r3, [r4, #0]
 80065dc:	f7fa fdfd 	bl	80011da <_close>
 80065e0:	1c43      	adds	r3, r0, #1
 80065e2:	d102      	bne.n	80065ea <_close_r+0x1a>
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	b103      	cbz	r3, 80065ea <_close_r+0x1a>
 80065e8:	602b      	str	r3, [r5, #0]
 80065ea:	bd38      	pop	{r3, r4, r5, pc}
 80065ec:	20000328 	.word	0x20000328

080065f0 <__sflush_r>:
 80065f0:	898a      	ldrh	r2, [r1, #12]
 80065f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065f6:	4605      	mov	r5, r0
 80065f8:	0710      	lsls	r0, r2, #28
 80065fa:	460c      	mov	r4, r1
 80065fc:	d458      	bmi.n	80066b0 <__sflush_r+0xc0>
 80065fe:	684b      	ldr	r3, [r1, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	dc05      	bgt.n	8006610 <__sflush_r+0x20>
 8006604:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	dc02      	bgt.n	8006610 <__sflush_r+0x20>
 800660a:	2000      	movs	r0, #0
 800660c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006612:	2e00      	cmp	r6, #0
 8006614:	d0f9      	beq.n	800660a <__sflush_r+0x1a>
 8006616:	2300      	movs	r3, #0
 8006618:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800661c:	682f      	ldr	r7, [r5, #0]
 800661e:	6a21      	ldr	r1, [r4, #32]
 8006620:	602b      	str	r3, [r5, #0]
 8006622:	d032      	beq.n	800668a <__sflush_r+0x9a>
 8006624:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006626:	89a3      	ldrh	r3, [r4, #12]
 8006628:	075a      	lsls	r2, r3, #29
 800662a:	d505      	bpl.n	8006638 <__sflush_r+0x48>
 800662c:	6863      	ldr	r3, [r4, #4]
 800662e:	1ac0      	subs	r0, r0, r3
 8006630:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006632:	b10b      	cbz	r3, 8006638 <__sflush_r+0x48>
 8006634:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006636:	1ac0      	subs	r0, r0, r3
 8006638:	2300      	movs	r3, #0
 800663a:	4602      	mov	r2, r0
 800663c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800663e:	6a21      	ldr	r1, [r4, #32]
 8006640:	4628      	mov	r0, r5
 8006642:	47b0      	blx	r6
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	89a3      	ldrh	r3, [r4, #12]
 8006648:	d106      	bne.n	8006658 <__sflush_r+0x68>
 800664a:	6829      	ldr	r1, [r5, #0]
 800664c:	291d      	cmp	r1, #29
 800664e:	d848      	bhi.n	80066e2 <__sflush_r+0xf2>
 8006650:	4a29      	ldr	r2, [pc, #164]	; (80066f8 <__sflush_r+0x108>)
 8006652:	40ca      	lsrs	r2, r1
 8006654:	07d6      	lsls	r6, r2, #31
 8006656:	d544      	bpl.n	80066e2 <__sflush_r+0xf2>
 8006658:	2200      	movs	r2, #0
 800665a:	6062      	str	r2, [r4, #4]
 800665c:	04d9      	lsls	r1, r3, #19
 800665e:	6922      	ldr	r2, [r4, #16]
 8006660:	6022      	str	r2, [r4, #0]
 8006662:	d504      	bpl.n	800666e <__sflush_r+0x7e>
 8006664:	1c42      	adds	r2, r0, #1
 8006666:	d101      	bne.n	800666c <__sflush_r+0x7c>
 8006668:	682b      	ldr	r3, [r5, #0]
 800666a:	b903      	cbnz	r3, 800666e <__sflush_r+0x7e>
 800666c:	6560      	str	r0, [r4, #84]	; 0x54
 800666e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006670:	602f      	str	r7, [r5, #0]
 8006672:	2900      	cmp	r1, #0
 8006674:	d0c9      	beq.n	800660a <__sflush_r+0x1a>
 8006676:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800667a:	4299      	cmp	r1, r3
 800667c:	d002      	beq.n	8006684 <__sflush_r+0x94>
 800667e:	4628      	mov	r0, r5
 8006680:	f7ff fc98 	bl	8005fb4 <_free_r>
 8006684:	2000      	movs	r0, #0
 8006686:	6360      	str	r0, [r4, #52]	; 0x34
 8006688:	e7c0      	b.n	800660c <__sflush_r+0x1c>
 800668a:	2301      	movs	r3, #1
 800668c:	4628      	mov	r0, r5
 800668e:	47b0      	blx	r6
 8006690:	1c41      	adds	r1, r0, #1
 8006692:	d1c8      	bne.n	8006626 <__sflush_r+0x36>
 8006694:	682b      	ldr	r3, [r5, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d0c5      	beq.n	8006626 <__sflush_r+0x36>
 800669a:	2b1d      	cmp	r3, #29
 800669c:	d001      	beq.n	80066a2 <__sflush_r+0xb2>
 800669e:	2b16      	cmp	r3, #22
 80066a0:	d101      	bne.n	80066a6 <__sflush_r+0xb6>
 80066a2:	602f      	str	r7, [r5, #0]
 80066a4:	e7b1      	b.n	800660a <__sflush_r+0x1a>
 80066a6:	89a3      	ldrh	r3, [r4, #12]
 80066a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ac:	81a3      	strh	r3, [r4, #12]
 80066ae:	e7ad      	b.n	800660c <__sflush_r+0x1c>
 80066b0:	690f      	ldr	r7, [r1, #16]
 80066b2:	2f00      	cmp	r7, #0
 80066b4:	d0a9      	beq.n	800660a <__sflush_r+0x1a>
 80066b6:	0793      	lsls	r3, r2, #30
 80066b8:	680e      	ldr	r6, [r1, #0]
 80066ba:	bf08      	it	eq
 80066bc:	694b      	ldreq	r3, [r1, #20]
 80066be:	600f      	str	r7, [r1, #0]
 80066c0:	bf18      	it	ne
 80066c2:	2300      	movne	r3, #0
 80066c4:	eba6 0807 	sub.w	r8, r6, r7
 80066c8:	608b      	str	r3, [r1, #8]
 80066ca:	f1b8 0f00 	cmp.w	r8, #0
 80066ce:	dd9c      	ble.n	800660a <__sflush_r+0x1a>
 80066d0:	4643      	mov	r3, r8
 80066d2:	463a      	mov	r2, r7
 80066d4:	6a21      	ldr	r1, [r4, #32]
 80066d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066d8:	4628      	mov	r0, r5
 80066da:	47b0      	blx	r6
 80066dc:	2800      	cmp	r0, #0
 80066de:	dc06      	bgt.n	80066ee <__sflush_r+0xfe>
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e6:	81a3      	strh	r3, [r4, #12]
 80066e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066ec:	e78e      	b.n	800660c <__sflush_r+0x1c>
 80066ee:	4407      	add	r7, r0
 80066f0:	eba8 0800 	sub.w	r8, r8, r0
 80066f4:	e7e9      	b.n	80066ca <__sflush_r+0xda>
 80066f6:	bf00      	nop
 80066f8:	20400001 	.word	0x20400001

080066fc <_fflush_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	690b      	ldr	r3, [r1, #16]
 8006700:	4605      	mov	r5, r0
 8006702:	460c      	mov	r4, r1
 8006704:	b1db      	cbz	r3, 800673e <_fflush_r+0x42>
 8006706:	b118      	cbz	r0, 8006710 <_fflush_r+0x14>
 8006708:	6983      	ldr	r3, [r0, #24]
 800670a:	b90b      	cbnz	r3, 8006710 <_fflush_r+0x14>
 800670c:	f7ff f8c8 	bl	80058a0 <__sinit>
 8006710:	4b0c      	ldr	r3, [pc, #48]	; (8006744 <_fflush_r+0x48>)
 8006712:	429c      	cmp	r4, r3
 8006714:	d109      	bne.n	800672a <_fflush_r+0x2e>
 8006716:	686c      	ldr	r4, [r5, #4]
 8006718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800671c:	b17b      	cbz	r3, 800673e <_fflush_r+0x42>
 800671e:	4621      	mov	r1, r4
 8006720:	4628      	mov	r0, r5
 8006722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006726:	f7ff bf63 	b.w	80065f0 <__sflush_r>
 800672a:	4b07      	ldr	r3, [pc, #28]	; (8006748 <_fflush_r+0x4c>)
 800672c:	429c      	cmp	r4, r3
 800672e:	d101      	bne.n	8006734 <_fflush_r+0x38>
 8006730:	68ac      	ldr	r4, [r5, #8]
 8006732:	e7f1      	b.n	8006718 <_fflush_r+0x1c>
 8006734:	4b05      	ldr	r3, [pc, #20]	; (800674c <_fflush_r+0x50>)
 8006736:	429c      	cmp	r4, r3
 8006738:	bf08      	it	eq
 800673a:	68ec      	ldreq	r4, [r5, #12]
 800673c:	e7ec      	b.n	8006718 <_fflush_r+0x1c>
 800673e:	2000      	movs	r0, #0
 8006740:	bd38      	pop	{r3, r4, r5, pc}
 8006742:	bf00      	nop
 8006744:	080069b8 	.word	0x080069b8
 8006748:	080069d8 	.word	0x080069d8
 800674c:	08006998 	.word	0x08006998

08006750 <_lseek_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4c07      	ldr	r4, [pc, #28]	; (8006770 <_lseek_r+0x20>)
 8006754:	4605      	mov	r5, r0
 8006756:	4608      	mov	r0, r1
 8006758:	4611      	mov	r1, r2
 800675a:	2200      	movs	r2, #0
 800675c:	6022      	str	r2, [r4, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	f7fa fd62 	bl	8001228 <_lseek>
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	d102      	bne.n	800676e <_lseek_r+0x1e>
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	b103      	cbz	r3, 800676e <_lseek_r+0x1e>
 800676c:	602b      	str	r3, [r5, #0]
 800676e:	bd38      	pop	{r3, r4, r5, pc}
 8006770:	20000328 	.word	0x20000328

08006774 <__swhatbuf_r>:
 8006774:	b570      	push	{r4, r5, r6, lr}
 8006776:	460e      	mov	r6, r1
 8006778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800677c:	2900      	cmp	r1, #0
 800677e:	b096      	sub	sp, #88	; 0x58
 8006780:	4614      	mov	r4, r2
 8006782:	461d      	mov	r5, r3
 8006784:	da07      	bge.n	8006796 <__swhatbuf_r+0x22>
 8006786:	2300      	movs	r3, #0
 8006788:	602b      	str	r3, [r5, #0]
 800678a:	89b3      	ldrh	r3, [r6, #12]
 800678c:	061a      	lsls	r2, r3, #24
 800678e:	d410      	bmi.n	80067b2 <__swhatbuf_r+0x3e>
 8006790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006794:	e00e      	b.n	80067b4 <__swhatbuf_r+0x40>
 8006796:	466a      	mov	r2, sp
 8006798:	f000 f884 	bl	80068a4 <_fstat_r>
 800679c:	2800      	cmp	r0, #0
 800679e:	dbf2      	blt.n	8006786 <__swhatbuf_r+0x12>
 80067a0:	9a01      	ldr	r2, [sp, #4]
 80067a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067aa:	425a      	negs	r2, r3
 80067ac:	415a      	adcs	r2, r3
 80067ae:	602a      	str	r2, [r5, #0]
 80067b0:	e7ee      	b.n	8006790 <__swhatbuf_r+0x1c>
 80067b2:	2340      	movs	r3, #64	; 0x40
 80067b4:	2000      	movs	r0, #0
 80067b6:	6023      	str	r3, [r4, #0]
 80067b8:	b016      	add	sp, #88	; 0x58
 80067ba:	bd70      	pop	{r4, r5, r6, pc}

080067bc <__smakebuf_r>:
 80067bc:	898b      	ldrh	r3, [r1, #12]
 80067be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067c0:	079d      	lsls	r5, r3, #30
 80067c2:	4606      	mov	r6, r0
 80067c4:	460c      	mov	r4, r1
 80067c6:	d507      	bpl.n	80067d8 <__smakebuf_r+0x1c>
 80067c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067cc:	6023      	str	r3, [r4, #0]
 80067ce:	6123      	str	r3, [r4, #16]
 80067d0:	2301      	movs	r3, #1
 80067d2:	6163      	str	r3, [r4, #20]
 80067d4:	b002      	add	sp, #8
 80067d6:	bd70      	pop	{r4, r5, r6, pc}
 80067d8:	ab01      	add	r3, sp, #4
 80067da:	466a      	mov	r2, sp
 80067dc:	f7ff ffca 	bl	8006774 <__swhatbuf_r>
 80067e0:	9900      	ldr	r1, [sp, #0]
 80067e2:	4605      	mov	r5, r0
 80067e4:	4630      	mov	r0, r6
 80067e6:	f7ff fc33 	bl	8006050 <_malloc_r>
 80067ea:	b948      	cbnz	r0, 8006800 <__smakebuf_r+0x44>
 80067ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067f0:	059a      	lsls	r2, r3, #22
 80067f2:	d4ef      	bmi.n	80067d4 <__smakebuf_r+0x18>
 80067f4:	f023 0303 	bic.w	r3, r3, #3
 80067f8:	f043 0302 	orr.w	r3, r3, #2
 80067fc:	81a3      	strh	r3, [r4, #12]
 80067fe:	e7e3      	b.n	80067c8 <__smakebuf_r+0xc>
 8006800:	4b0d      	ldr	r3, [pc, #52]	; (8006838 <__smakebuf_r+0x7c>)
 8006802:	62b3      	str	r3, [r6, #40]	; 0x28
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	6020      	str	r0, [r4, #0]
 8006808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800680c:	81a3      	strh	r3, [r4, #12]
 800680e:	9b00      	ldr	r3, [sp, #0]
 8006810:	6163      	str	r3, [r4, #20]
 8006812:	9b01      	ldr	r3, [sp, #4]
 8006814:	6120      	str	r0, [r4, #16]
 8006816:	b15b      	cbz	r3, 8006830 <__smakebuf_r+0x74>
 8006818:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800681c:	4630      	mov	r0, r6
 800681e:	f000 f853 	bl	80068c8 <_isatty_r>
 8006822:	b128      	cbz	r0, 8006830 <__smakebuf_r+0x74>
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	f023 0303 	bic.w	r3, r3, #3
 800682a:	f043 0301 	orr.w	r3, r3, #1
 800682e:	81a3      	strh	r3, [r4, #12]
 8006830:	89a3      	ldrh	r3, [r4, #12]
 8006832:	431d      	orrs	r5, r3
 8006834:	81a5      	strh	r5, [r4, #12]
 8006836:	e7cd      	b.n	80067d4 <__smakebuf_r+0x18>
 8006838:	08005869 	.word	0x08005869

0800683c <__ascii_mbtowc>:
 800683c:	b082      	sub	sp, #8
 800683e:	b901      	cbnz	r1, 8006842 <__ascii_mbtowc+0x6>
 8006840:	a901      	add	r1, sp, #4
 8006842:	b142      	cbz	r2, 8006856 <__ascii_mbtowc+0x1a>
 8006844:	b14b      	cbz	r3, 800685a <__ascii_mbtowc+0x1e>
 8006846:	7813      	ldrb	r3, [r2, #0]
 8006848:	600b      	str	r3, [r1, #0]
 800684a:	7812      	ldrb	r2, [r2, #0]
 800684c:	1c10      	adds	r0, r2, #0
 800684e:	bf18      	it	ne
 8006850:	2001      	movne	r0, #1
 8006852:	b002      	add	sp, #8
 8006854:	4770      	bx	lr
 8006856:	4610      	mov	r0, r2
 8006858:	e7fb      	b.n	8006852 <__ascii_mbtowc+0x16>
 800685a:	f06f 0001 	mvn.w	r0, #1
 800685e:	e7f8      	b.n	8006852 <__ascii_mbtowc+0x16>

08006860 <__malloc_lock>:
 8006860:	4770      	bx	lr

08006862 <__malloc_unlock>:
 8006862:	4770      	bx	lr

08006864 <_read_r>:
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	4c07      	ldr	r4, [pc, #28]	; (8006884 <_read_r+0x20>)
 8006868:	4605      	mov	r5, r0
 800686a:	4608      	mov	r0, r1
 800686c:	4611      	mov	r1, r2
 800686e:	2200      	movs	r2, #0
 8006870:	6022      	str	r2, [r4, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	f7fa fc94 	bl	80011a0 <_read>
 8006878:	1c43      	adds	r3, r0, #1
 800687a:	d102      	bne.n	8006882 <_read_r+0x1e>
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	b103      	cbz	r3, 8006882 <_read_r+0x1e>
 8006880:	602b      	str	r3, [r5, #0]
 8006882:	bd38      	pop	{r3, r4, r5, pc}
 8006884:	20000328 	.word	0x20000328

08006888 <__ascii_wctomb>:
 8006888:	b149      	cbz	r1, 800689e <__ascii_wctomb+0x16>
 800688a:	2aff      	cmp	r2, #255	; 0xff
 800688c:	bf85      	ittet	hi
 800688e:	238a      	movhi	r3, #138	; 0x8a
 8006890:	6003      	strhi	r3, [r0, #0]
 8006892:	700a      	strbls	r2, [r1, #0]
 8006894:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006898:	bf98      	it	ls
 800689a:	2001      	movls	r0, #1
 800689c:	4770      	bx	lr
 800689e:	4608      	mov	r0, r1
 80068a0:	4770      	bx	lr
	...

080068a4 <_fstat_r>:
 80068a4:	b538      	push	{r3, r4, r5, lr}
 80068a6:	4c07      	ldr	r4, [pc, #28]	; (80068c4 <_fstat_r+0x20>)
 80068a8:	2300      	movs	r3, #0
 80068aa:	4605      	mov	r5, r0
 80068ac:	4608      	mov	r0, r1
 80068ae:	4611      	mov	r1, r2
 80068b0:	6023      	str	r3, [r4, #0]
 80068b2:	f7fa fc9e 	bl	80011f2 <_fstat>
 80068b6:	1c43      	adds	r3, r0, #1
 80068b8:	d102      	bne.n	80068c0 <_fstat_r+0x1c>
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	b103      	cbz	r3, 80068c0 <_fstat_r+0x1c>
 80068be:	602b      	str	r3, [r5, #0]
 80068c0:	bd38      	pop	{r3, r4, r5, pc}
 80068c2:	bf00      	nop
 80068c4:	20000328 	.word	0x20000328

080068c8 <_isatty_r>:
 80068c8:	b538      	push	{r3, r4, r5, lr}
 80068ca:	4c06      	ldr	r4, [pc, #24]	; (80068e4 <_isatty_r+0x1c>)
 80068cc:	2300      	movs	r3, #0
 80068ce:	4605      	mov	r5, r0
 80068d0:	4608      	mov	r0, r1
 80068d2:	6023      	str	r3, [r4, #0]
 80068d4:	f7fa fc9d 	bl	8001212 <_isatty>
 80068d8:	1c43      	adds	r3, r0, #1
 80068da:	d102      	bne.n	80068e2 <_isatty_r+0x1a>
 80068dc:	6823      	ldr	r3, [r4, #0]
 80068de:	b103      	cbz	r3, 80068e2 <_isatty_r+0x1a>
 80068e0:	602b      	str	r3, [r5, #0]
 80068e2:	bd38      	pop	{r3, r4, r5, pc}
 80068e4:	20000328 	.word	0x20000328

080068e8 <_init>:
 80068e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ea:	bf00      	nop
 80068ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ee:	bc08      	pop	{r3}
 80068f0:	469e      	mov	lr, r3
 80068f2:	4770      	bx	lr

080068f4 <_fini>:
 80068f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f6:	bf00      	nop
 80068f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068fa:	bc08      	pop	{r3}
 80068fc:	469e      	mov	lr, r3
 80068fe:	4770      	bx	lr
