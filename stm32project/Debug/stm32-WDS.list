
stm32-WDS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006758  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  080068f8  080068f8  000168f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c08  08006c08  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006c08  08006c08  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c08  08006c08  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c08  08006c08  00016c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c0c  08006c0c  00016c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  200001dc  08006dec  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08006dec  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f211  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000204c  00000000  00000000  0002f41d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000aa0  00000000  00000000  00031470  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009a8  00000000  00000000  00031f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002091e  00000000  00000000  000328b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb1b  00000000  00000000  000531d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c247b  00000000  00000000  0005ecf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012116c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c8  00000000  00000000  001211e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080068e0 	.word	0x080068e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080068e0 	.word	0x080068e0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <BMA220_Init>:
 *      Author: marcel
 */
#include "bma220.h"
#include "i2c.h"

uint8_t BMA220_Init(BMA220 *dev, I2C_HandleTypeDef *i2cHandle){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
	dev->i2cHandle=hi2c1;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a38      	ldr	r2, [pc, #224]	; (8000ca8 <BMA220_Init+0xf0>)
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	4611      	mov	r1, r2
 8000bca:	234c      	movs	r3, #76	; 0x4c
 8000bcc:	461a      	mov	r2, r3
 8000bce:	f003 fb55 	bl	800427c <memcpy>

	dev->accData[0]=0.3f;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a35      	ldr	r2, [pc, #212]	; (8000cac <BMA220_Init+0xf4>)
 8000bd6:	64da      	str	r2, [r3, #76]	; 0x4c
	dev->accData[1]=0.3f;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a34      	ldr	r2, [pc, #208]	; (8000cac <BMA220_Init+0xf4>)
 8000bdc:	651a      	str	r2, [r3, #80]	; 0x50
	dev->accData[2]=0.3f;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a32      	ldr	r2, [pc, #200]	; (8000cac <BMA220_Init+0xf4>)
 8000be2:	655a      	str	r2, [r3, #84]	; 0x54

	uint8_t errNum=0; //Liczba bledow
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;

	uint8_t regData;

	//Checking chip id
	status=BMA220_ReadRegister(dev,BMA220_REG_CHIP_ID,&regData);
 8000be8:	f107 030d 	add.w	r3, r7, #13
 8000bec:	461a      	mov	r2, r3
 8000bee:	2100      	movs	r1, #0
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 f8bb 	bl	8000d6c <BMA220_ReadRegister>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	73bb      	strb	r3, [r7, #14]
	errNum+=(status!=HAL_OK);
 8000bfa:	7bbb      	ldrb	r3, [r7, #14]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	bf14      	ite	ne
 8000c00:	2301      	movne	r3, #1
 8000c02:	2300      	moveq	r3, #0
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	461a      	mov	r2, r3
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	73fb      	strb	r3, [r7, #15]

	if(regData!=CHIP_ID)
 8000c0e:	7b7b      	ldrb	r3, [r7, #13]
 8000c10:	2bdd      	cmp	r3, #221	; 0xdd
 8000c12:	d001      	beq.n	8000c18 <BMA220_Init+0x60>
		return 255;
 8000c14:	23ff      	movs	r3, #255	; 0xff
 8000c16:	e042      	b.n	8000c9e <BMA220_Init+0xe6>

	status =BMA220_ReadRegister(dev,BMA220_REG_REV_ID,&regData);
 8000c18:	f107 030d 	add.w	r3, r7, #13
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	2102      	movs	r1, #2
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f000 f8a3 	bl	8000d6c <BMA220_ReadRegister>
 8000c26:	4603      	mov	r3, r0
 8000c28:	73bb      	strb	r3, [r7, #14]
	errNum+=(status!=HAL_OK);
 8000c2a:	7bbb      	ldrb	r3, [r7, #14]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	bf14      	ite	ne
 8000c30:	2301      	movne	r3, #1
 8000c32:	2300      	moveq	r3, #0
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	461a      	mov	r2, r3
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	73fb      	strb	r3, [r7, #15]

	if(regData!=REVISION_ID)
 8000c3e:	7b7b      	ldrb	r3, [r7, #13]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <BMA220_Init+0x90>
		return 255;
 8000c44:	23ff      	movs	r3, #255	; 0xff
 8000c46:	e02a      	b.n	8000c9e <BMA220_Init+0xe6>

	//Filter

	regData=0x3;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	737b      	strb	r3, [r7, #13]
	status =BMA220_ReadRegister(dev,0x20,&regData);
 8000c4c:	f107 030d 	add.w	r3, r7, #13
 8000c50:	461a      	mov	r2, r3
 8000c52:	2120      	movs	r1, #32
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f000 f889 	bl	8000d6c <BMA220_ReadRegister>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	73bb      	strb	r3, [r7, #14]
	errNum+=(status!=HAL_OK);
 8000c5e:	7bbb      	ldrb	r3, [r7, #14]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	bf14      	ite	ne
 8000c64:	2301      	movne	r3, #1
 8000c66:	2300      	moveq	r3, #0
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	4413      	add	r3, r2
 8000c70:	73fb      	strb	r3, [r7, #15]

	//Setting 4g

	regData=0x00;
 8000c72:	2300      	movs	r3, #0
 8000c74:	737b      	strb	r3, [r7, #13]
	status =BMA220_ReadRegister(dev,0x22,&regData);
 8000c76:	f107 030d 	add.w	r3, r7, #13
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	2122      	movs	r1, #34	; 0x22
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f000 f874 	bl	8000d6c <BMA220_ReadRegister>
 8000c84:	4603      	mov	r3, r0
 8000c86:	73bb      	strb	r3, [r7, #14]
	errNum+=(status!=HAL_OK);
 8000c88:	7bbb      	ldrb	r3, [r7, #14]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	bf14      	ite	ne
 8000c8e:	2301      	movne	r3, #1
 8000c90:	2300      	moveq	r3, #0
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	461a      	mov	r2, r3
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	4413      	add	r3, r2
 8000c9a:	73fb      	strb	r3, [r7, #15]

	return errNum;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000204 	.word	0x20000204
 8000cac:	3e99999a 	.word	0x3e99999a

08000cb0 <BMA220_ReadAcc>:

HAL_StatusTypeDef BMA220_ReadAcc(BMA220 *dev){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

	int8_t data;
	uint8_t status;
	uint8_t errNum;
	status=BMA220_ReadRegister(dev,BMA220_REG_ACC_X,&data);
 8000cb8:	f107 030d 	add.w	r3, r7, #13
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f000 f853 	bl	8000d6c <BMA220_ReadRegister>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	73fb      	strb	r3, [r7, #15]
	errNum+=(status!=HAL_OK);
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	bf14      	ite	ne
 8000cd0:	2301      	movne	r3, #1
 8000cd2:	2300      	moveq	r3, #0
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	7bbb      	ldrb	r3, [r7, #14]
 8000cda:	4413      	add	r3, r2
 8000cdc:	73bb      	strb	r3, [r7, #14]
//	dev->accData[0]=data*0.0625*9.81;
	dev->accData[0]=data;
 8000cde:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ce2:	ee07 3a90 	vmov	s15, r3
 8000ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	status=BMA220_ReadRegister(dev,BMA220_REG_ACC_X,&data);
 8000cf0:	f107 030d 	add.w	r3, r7, #13
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 f837 	bl	8000d6c <BMA220_ReadRegister>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	73fb      	strb	r3, [r7, #15]
	errNum+=(status!=HAL_OK);
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	bf14      	ite	ne
 8000d08:	2301      	movne	r3, #1
 8000d0a:	2300      	moveq	r3, #0
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	461a      	mov	r2, r3
 8000d10:	7bbb      	ldrb	r3, [r7, #14]
 8000d12:	4413      	add	r3, r2
 8000d14:	73bb      	strb	r3, [r7, #14]
//	dev->accData[1]=data*0.0625*9.81;
	dev->accData[1]=data;
 8000d16:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d1a:	ee07 3a90 	vmov	s15, r3
 8000d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

	status=BMA220_ReadRegister(dev,BMA220_REG_ACC_X,&data);
 8000d28:	f107 030d 	add.w	r3, r7, #13
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	2104      	movs	r1, #4
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 f81b 	bl	8000d6c <BMA220_ReadRegister>
 8000d36:	4603      	mov	r3, r0
 8000d38:	73fb      	strb	r3, [r7, #15]
	errNum+=(status!=HAL_OK);
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	bf14      	ite	ne
 8000d40:	2301      	movne	r3, #1
 8000d42:	2300      	moveq	r3, #0
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	461a      	mov	r2, r3
 8000d48:	7bbb      	ldrb	r3, [r7, #14]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	73bb      	strb	r3, [r7, #14]
//	dev->accData[2]=data*0.0625*9.81;
	dev->accData[2]=data;
 8000d4e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d52:	ee07 3a90 	vmov	s15, r3
 8000d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	return errNum;
 8000d60:	7bbb      	ldrb	r3, [r7, #14]

}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <BMA220_ReadRegister>:


HAL_StatusTypeDef BMA220_ReadRegister(BMA220 *dev, uint8_t reg, uint8_t *data){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af04      	add	r7, sp, #16
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	460b      	mov	r3, r1
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(&hi2c1, BMA220_I2C_ADDR,reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000d7a:	7afb      	ldrb	r3, [r7, #11]
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d82:	9302      	str	r3, [sp, #8]
 8000d84:	2301      	movs	r3, #1
 8000d86:	9301      	str	r3, [sp, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	2114      	movs	r1, #20
 8000d90:	4803      	ldr	r0, [pc, #12]	; (8000da0 <BMA220_ReadRegister+0x34>)
 8000d92:	f000 feed 	bl	8001b70 <HAL_I2C_Mem_Read>
 8000d96:	4603      	mov	r3, r0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000204 	.word	0x20000204

08000da4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	4b35      	ldr	r3, [pc, #212]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	4a34      	ldr	r2, [pc, #208]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000dc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dc4:	6153      	str	r3, [r2, #20]
 8000dc6:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dd2:	4b2f      	ldr	r3, [pc, #188]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	4a2e      	ldr	r2, [pc, #184]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000dd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ddc:	6153      	str	r3, [r2, #20]
 8000dde:	4b2c      	ldr	r3, [pc, #176]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b29      	ldr	r3, [pc, #164]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	4a28      	ldr	r2, [pc, #160]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	6153      	str	r3, [r2, #20]
 8000df6:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	4a22      	ldr	r2, [pc, #136]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e0c:	6153      	str	r3, [r2, #20]
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <MX_GPIO_Init+0xec>)
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e22:	f000 fdfd 	bl	8001a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2110      	movs	r1, #16
 8000e2a:	481a      	ldr	r0, [pc, #104]	; (8000e94 <MX_GPIO_Init+0xf0>)
 8000e2c:	f000 fdf8 	bl	8001a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e36:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	4814      	ldr	r0, [pc, #80]	; (8000e98 <MX_GPIO_Init+0xf4>)
 8000e48:	f000 fc60 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e4c:	2320      	movs	r3, #32
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e66:	f000 fc51 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4804      	ldr	r0, [pc, #16]	; (8000e94 <MX_GPIO_Init+0xf0>)
 8000e82:	f000 fc43 	bl	800170c <HAL_GPIO_Init>

}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	; 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40021000 	.word	0x40021000
 8000e94:	48000400 	.word	0x48000400
 8000e98:	48000800 	.word	0x48000800

08000e9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000ea2:	4a1c      	ldr	r2, [pc, #112]	; (8000f14 <MX_I2C1_Init+0x78>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000ea8:	4a1b      	ldr	r2, [pc, #108]	; (8000f18 <MX_I2C1_Init+0x7c>)
 8000eaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb2:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ebe:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ed6:	480e      	ldr	r0, [pc, #56]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000ed8:	f000 fdba 	bl	8001a50 <HAL_I2C_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ee2:	f000 f902 	bl	80010ea <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4809      	ldr	r0, [pc, #36]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000eea:	f001 f933 	bl	8002154 <HAL_I2CEx_ConfigAnalogFilter>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ef4:	f000 f8f9 	bl	80010ea <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_I2C1_Init+0x74>)
 8000efc:	f001 f975 	bl	80021ea <HAL_I2CEx_ConfigDigitalFilter>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f06:	f000 f8f0 	bl	80010ea <Error_Handler>
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000204 	.word	0x20000204
 8000f14:	40005400 	.word	0x40005400
 8000f18:	2000090e 	.word	0x2000090e

08000f1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a26      	ldr	r2, [pc, #152]	; (8000fd4 <HAL_I2C_MspInit+0xb8>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d145      	bne.n	8000fca <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <HAL_I2C_MspInit+0xbc>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	4a25      	ldr	r2, [pc, #148]	; (8000fd8 <HAL_I2C_MspInit+0xbc>)
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f48:	6153      	str	r3, [r2, #20]
 8000f4a:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <HAL_I2C_MspInit+0xbc>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <HAL_I2C_MspInit+0xbc>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	4a1f      	ldr	r2, [pc, #124]	; (8000fd8 <HAL_I2C_MspInit+0xbc>)
 8000f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f60:	6153      	str	r3, [r2, #20]
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <HAL_I2C_MspInit+0xbc>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f74:	2312      	movs	r3, #18
 8000f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f80:	2304      	movs	r3, #4
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8e:	f000 fbbd 	bl	800170c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f92:	2380      	movs	r3, #128	; 0x80
 8000f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f96:	2312      	movs	r3, #18
 8000f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	480b      	ldr	r0, [pc, #44]	; (8000fdc <HAL_I2C_MspInit+0xc0>)
 8000fae:	f000 fbad 	bl	800170c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_I2C_MspInit+0xbc>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_I2C_MspInit+0xbc>)
 8000fb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fbc:	61d3      	str	r3, [r2, #28]
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_I2C_MspInit+0xbc>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	; 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40005400 	.word	0x40005400
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	48000400 	.word	0x48000400

08000fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe4:	f000 fa24 	bl	8001430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe8:	f000 f81c 	bl	8001024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fec:	f7ff feda 	bl	8000da4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ff0:	f000 f96e 	bl	80012d0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ff4:	f7ff ff52 	bl	8000e9c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //BMA220_init();
  BMA220_Init(&acc, &hi2c1);
 8000ff8:	4907      	ldr	r1, [pc, #28]	; (8001018 <main+0x38>)
 8000ffa:	4808      	ldr	r0, [pc, #32]	; (800101c <main+0x3c>)
 8000ffc:	f7ff fddc 	bl	8000bb8 <BMA220_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMA220_ReadAcc(&acc);
 8001000:	4806      	ldr	r0, [pc, #24]	; (800101c <main+0x3c>)
 8001002:	f7ff fe55 	bl	8000cb0 <BMA220_ReadAcc>
	// printf("X = d, Y= d, Z= d \n\r",acc.accData[0],acc.accData[1],acc.accData[2]);
	   printf("X = d, Y= d, Z= d \n\r");
 8001006:	4806      	ldr	r0, [pc, #24]	; (8001020 <main+0x40>)
 8001008:	f003 fda8 	bl	8004b5c <iprintf>
	 HAL_Delay(1000);
 800100c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001010:	f000 fa74 	bl	80014fc <HAL_Delay>
  {
 8001014:	e7f4      	b.n	8001000 <main+0x20>
 8001016:	bf00      	nop
 8001018:	20000204 	.word	0x20000204
 800101c:	20000250 	.word	0x20000250
 8001020:	080068f8 	.word	0x080068f8

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b0a6      	sub	sp, #152	; 0x98
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800102e:	2228      	movs	r2, #40	; 0x28
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f003 f92d 	bl	8004292 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001038:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2258      	movs	r2, #88	; 0x58
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f003 f91f 	bl	8004292 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001054:	2303      	movs	r3, #3
 8001056:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800105c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105e:	2301      	movs	r3, #1
 8001060:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001062:	2310      	movs	r3, #16
 8001064:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001068:	2302      	movs	r3, #2
 800106a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800106e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001072:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001076:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800107a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 800107e:	2301      	movs	r3, #1
 8001080:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001084:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001088:	4618      	mov	r0, r3
 800108a:	f001 f8fb 	bl	8002284 <HAL_RCC_OscConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001094:	f000 f829 	bl	80010ea <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001098:	230f      	movs	r3, #15
 800109a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109c:	2302      	movs	r3, #2
 800109e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010b2:	2102      	movs	r1, #2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 fffb 	bl	80030b0 <HAL_RCC_ClockConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80010c0:	f000 f813 	bl	80010ea <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80010c4:	2322      	movs	r3, #34	; 0x22
 80010c6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	4618      	mov	r0, r3
 80010d4:	f002 fa24 	bl	8003520 <HAL_RCCEx_PeriphCLKConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80010de:	f000 f804 	bl	80010ea <Error_Handler>
  }
}
 80010e2:	bf00      	nop
 80010e4:	3798      	adds	r7, #152	; 0x98
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <HAL_MspInit+0x44>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	4a0e      	ldr	r2, [pc, #56]	; (800113c <HAL_MspInit+0x44>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6193      	str	r3, [r2, #24]
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <HAL_MspInit+0x44>)
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <HAL_MspInit+0x44>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a08      	ldr	r2, [pc, #32]	; (800113c <HAL_MspInit+0x44>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001120:	61d3      	str	r3, [r2, #28]
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_MspInit+0x44>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800112e:	2007      	movs	r0, #7
 8001130:	f000 fab8 	bl	80016a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40021000 	.word	0x40021000

08001140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001152:	e7fe      	b.n	8001152 <HardFault_Handler+0x4>

08001154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <MemManage_Handler+0x4>

0800115a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115e:	e7fe      	b.n	800115e <BusFault_Handler+0x4>

08001160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <UsageFault_Handler+0x4>

08001166 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001194:	f000 f992 	bl	80014bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}

0800119c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	e00a      	b.n	80011c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011ae:	f3af 8000 	nop.w
 80011b2:	4601      	mov	r1, r0
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	60ba      	str	r2, [r7, #8]
 80011ba:	b2ca      	uxtb	r2, r1
 80011bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3301      	adds	r3, #1
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	dbf0      	blt.n	80011ae <_read+0x12>
	}

return len;
 80011cc:	687b      	ldr	r3, [r7, #4]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
	return -1;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <_isatty>:

int _isatty(int file)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
	return 1;
 8001216:	2301      	movs	r3, #1
}
 8001218:	4618      	mov	r0, r3
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
	return 0;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001248:	4a14      	ldr	r2, [pc, #80]	; (800129c <_sbrk+0x5c>)
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <_sbrk+0x60>)
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <_sbrk+0x64>)
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <_sbrk+0x68>)
 8001260:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	429a      	cmp	r2, r3
 800126e:	d207      	bcs.n	8001280 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001270:	f002 ffda 	bl	8004228 <__errno>
 8001274:	4602      	mov	r2, r0
 8001276:	230c      	movs	r3, #12
 8001278:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800127e:	e009      	b.n	8001294 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <_sbrk+0x64>)
 8001290:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001292:	68fb      	ldr	r3, [r7, #12]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20010000 	.word	0x20010000
 80012a0:	00000400 	.word	0x00000400
 80012a4:	200001f8 	.word	0x200001f8
 80012a8:	20000338 	.word	0x20000338

080012ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <SystemInit+0x20>)
 80012b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <SystemInit+0x20>)
 80012b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012d6:	4a15      	ldr	r2, [pc, #84]	; (800132c <MX_USART2_UART_Init+0x5c>)
 80012d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012f6:	220c      	movs	r2, #12
 80012f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_USART2_UART_Init+0x58>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <MX_USART2_UART_Init+0x58>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_USART2_UART_Init+0x58>)
 800130e:	2200      	movs	r2, #0
 8001310:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_USART2_UART_Init+0x58>)
 8001314:	f002 fb22 	bl	800395c <HAL_UART_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800131e:	f7ff fee4 	bl	80010ea <Error_Handler>
  }

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200002a8 	.word	0x200002a8
 800132c:	40004400 	.word	0x40004400

08001330 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a17      	ldr	r2, [pc, #92]	; (80013ac <HAL_UART_MspInit+0x7c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d128      	bne.n	80013a4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001352:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <HAL_UART_MspInit+0x80>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	4a16      	ldr	r2, [pc, #88]	; (80013b0 <HAL_UART_MspInit+0x80>)
 8001358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800135c:	61d3      	str	r3, [r2, #28]
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <HAL_UART_MspInit+0x80>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_UART_MspInit+0x80>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <HAL_UART_MspInit+0x80>)
 8001370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001374:	6153      	str	r3, [r2, #20]
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <HAL_UART_MspInit+0x80>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001382:	230c      	movs	r3, #12
 8001384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001392:	2307      	movs	r3, #7
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a0:	f000 f9b4 	bl	800170c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	; 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40004400 	.word	0x40004400
 80013b0:	40021000 	.word	0x40021000

080013b4 <_write>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int _write(int file,char *ptr,int len){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, ptr, len, 50);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	2332      	movs	r3, #50	; 0x32
 80013c6:	68b9      	ldr	r1, [r7, #8]
 80013c8:	4803      	ldr	r0, [pc, #12]	; (80013d8 <_write+0x24>)
 80013ca:	f002 fb15 	bl	80039f8 <HAL_UART_Transmit>
}
 80013ce:	bf00      	nop
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	200002a8 	.word	0x200002a8

080013dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001414 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e0:	480d      	ldr	r0, [pc, #52]	; (8001418 <LoopForever+0x6>)
  ldr r1, =_edata
 80013e2:	490e      	ldr	r1, [pc, #56]	; (800141c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013e4:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <LoopForever+0xe>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e8:	e002      	b.n	80013f0 <LoopCopyDataInit>

080013ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ee:	3304      	adds	r3, #4

080013f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f4:	d3f9      	bcc.n	80013ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013f8:	4c0b      	ldr	r4, [pc, #44]	; (8001428 <LoopForever+0x16>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013fc:	e001      	b.n	8001402 <LoopFillZerobss>

080013fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001400:	3204      	adds	r2, #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001404:	d3fb      	bcc.n	80013fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001406:	f7ff ff51 	bl	80012ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800140a:	f002 ff13 	bl	8004234 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800140e:	f7ff fde7 	bl	8000fe0 <main>

08001412 <LoopForever>:

LoopForever:
    b LoopForever
 8001412:	e7fe      	b.n	8001412 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001414:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001420:	08006c10 	.word	0x08006c10
  ldr r2, =_sbss
 8001424:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001428:	20000334 	.word	0x20000334

0800142c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC1_2_IRQHandler>
	...

08001430 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_Init+0x28>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_Init+0x28>)
 800143a:	f043 0310 	orr.w	r3, r3, #16
 800143e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001440:	2003      	movs	r0, #3
 8001442:	f000 f92f 	bl	80016a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001446:	2000      	movs	r0, #0
 8001448:	f000 f808 	bl	800145c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800144c:	f7ff fe54 	bl	80010f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40022000 	.word	0x40022000

0800145c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_InitTick+0x54>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_InitTick+0x58>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001472:	fbb3 f3f1 	udiv	r3, r3, r1
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f939 	bl	80016f2 <HAL_SYSTICK_Config>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e00e      	b.n	80014a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b0f      	cmp	r3, #15
 800148e:	d80a      	bhi.n	80014a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001490:	2200      	movs	r2, #0
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001498:	f000 f90f 	bl	80016ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800149c:	4a06      	ldr	r2, [pc, #24]	; (80014b8 <HAL_InitTick+0x5c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e000      	b.n	80014a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000008 	.word	0x20000008
 80014b8:	20000004 	.word	0x20000004

080014bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_IncTick+0x20>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_IncTick+0x24>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_IncTick+0x24>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000008 	.word	0x20000008
 80014e0:	2000032c 	.word	0x2000032c

080014e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_GetTick+0x14>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	2000032c 	.word	0x2000032c

080014fc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001504:	f7ff ffee 	bl	80014e4 <HAL_GetTick>
 8001508:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001514:	d005      	beq.n	8001522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_Delay+0x40>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4413      	add	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001522:	bf00      	nop
 8001524:	f7ff ffde 	bl	80014e4 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	429a      	cmp	r2, r3
 8001532:	d8f7      	bhi.n	8001524 <HAL_Delay+0x28>
  {
  }
}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000008 	.word	0x20000008

08001540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800155c:	4013      	ands	r3, r2
 800155e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800156c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001572:	4a04      	ldr	r2, [pc, #16]	; (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	60d3      	str	r3, [r2, #12]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <__NVIC_GetPriorityGrouping+0x18>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	f003 0307 	and.w	r3, r3, #7
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	6039      	str	r1, [r7, #0]
 80015ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	db0a      	blt.n	80015ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	490c      	ldr	r1, [pc, #48]	; (80015f0 <__NVIC_SetPriority+0x4c>)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	0112      	lsls	r2, r2, #4
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	440b      	add	r3, r1
 80015c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015cc:	e00a      	b.n	80015e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4908      	ldr	r1, [pc, #32]	; (80015f4 <__NVIC_SetPriority+0x50>)
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	3b04      	subs	r3, #4
 80015dc:	0112      	lsls	r2, r2, #4
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	440b      	add	r3, r1
 80015e2:	761a      	strb	r2, [r3, #24]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000e100 	.word	0xe000e100
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b089      	sub	sp, #36	; 0x24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f1c3 0307 	rsb	r3, r3, #7
 8001612:	2b04      	cmp	r3, #4
 8001614:	bf28      	it	cs
 8001616:	2304      	movcs	r3, #4
 8001618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3304      	adds	r3, #4
 800161e:	2b06      	cmp	r3, #6
 8001620:	d902      	bls.n	8001628 <NVIC_EncodePriority+0x30>
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3b03      	subs	r3, #3
 8001626:	e000      	b.n	800162a <NVIC_EncodePriority+0x32>
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43da      	mvns	r2, r3
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	401a      	ands	r2, r3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001640:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	fa01 f303 	lsl.w	r3, r1, r3
 800164a:	43d9      	mvns	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	4313      	orrs	r3, r2
         );
}
 8001652:	4618      	mov	r0, r3
 8001654:	3724      	adds	r7, #36	; 0x24
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001670:	d301      	bcc.n	8001676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001672:	2301      	movs	r3, #1
 8001674:	e00f      	b.n	8001696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <SysTick_Config+0x40>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167e:	210f      	movs	r1, #15
 8001680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001684:	f7ff ff8e 	bl	80015a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <SysTick_Config+0x40>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168e:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <SysTick_Config+0x40>)
 8001690:	2207      	movs	r2, #7
 8001692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	e000e010 	.word	0xe000e010

080016a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ff47 	bl	8001540 <__NVIC_SetPriorityGrouping>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b086      	sub	sp, #24
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016cc:	f7ff ff5c 	bl	8001588 <__NVIC_GetPriorityGrouping>
 80016d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	6978      	ldr	r0, [r7, #20]
 80016d8:	f7ff ff8e 	bl	80015f8 <NVIC_EncodePriority>
 80016dc:	4602      	mov	r2, r0
 80016de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff5d 	bl	80015a4 <__NVIC_SetPriority>
}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffb0 	bl	8001660 <SysTick_Config>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171a:	e160      	b.n	80019de <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2101      	movs	r1, #1
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	4013      	ands	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 8152 	beq.w	80019d8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	2b01      	cmp	r3, #1
 800173e:	d005      	beq.n	800174c <HAL_GPIO_Init+0x40>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d130      	bne.n	80017ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	2203      	movs	r2, #3
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001782:	2201      	movs	r2, #1
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	091b      	lsrs	r3, r3, #4
 8001798:	f003 0201 	and.w	r2, r3, #1
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d017      	beq.n	80017ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	2203      	movs	r2, #3
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d123      	bne.n	800183e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	08da      	lsrs	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3208      	adds	r2, #8
 80017fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001802:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	220f      	movs	r2, #15
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	691a      	ldr	r2, [r3, #16]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	08da      	lsrs	r2, r3, #3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3208      	adds	r2, #8
 8001838:	6939      	ldr	r1, [r7, #16]
 800183a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	2203      	movs	r2, #3
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 0203 	and.w	r2, r3, #3
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 80ac 	beq.w	80019d8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001880:	4b5e      	ldr	r3, [pc, #376]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a5d      	ldr	r2, [pc, #372]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6193      	str	r3, [r2, #24]
 800188c:	4b5b      	ldr	r3, [pc, #364]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001898:	4a59      	ldr	r2, [pc, #356]	; (8001a00 <HAL_GPIO_Init+0x2f4>)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	3302      	adds	r3, #2
 80018a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	220f      	movs	r2, #15
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018c2:	d025      	beq.n	8001910 <HAL_GPIO_Init+0x204>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a4f      	ldr	r2, [pc, #316]	; (8001a04 <HAL_GPIO_Init+0x2f8>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d01f      	beq.n	800190c <HAL_GPIO_Init+0x200>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a4e      	ldr	r2, [pc, #312]	; (8001a08 <HAL_GPIO_Init+0x2fc>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d019      	beq.n	8001908 <HAL_GPIO_Init+0x1fc>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a4d      	ldr	r2, [pc, #308]	; (8001a0c <HAL_GPIO_Init+0x300>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d013      	beq.n	8001904 <HAL_GPIO_Init+0x1f8>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a4c      	ldr	r2, [pc, #304]	; (8001a10 <HAL_GPIO_Init+0x304>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d00d      	beq.n	8001900 <HAL_GPIO_Init+0x1f4>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a4b      	ldr	r2, [pc, #300]	; (8001a14 <HAL_GPIO_Init+0x308>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d007      	beq.n	80018fc <HAL_GPIO_Init+0x1f0>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a4a      	ldr	r2, [pc, #296]	; (8001a18 <HAL_GPIO_Init+0x30c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d101      	bne.n	80018f8 <HAL_GPIO_Init+0x1ec>
 80018f4:	2306      	movs	r3, #6
 80018f6:	e00c      	b.n	8001912 <HAL_GPIO_Init+0x206>
 80018f8:	2307      	movs	r3, #7
 80018fa:	e00a      	b.n	8001912 <HAL_GPIO_Init+0x206>
 80018fc:	2305      	movs	r3, #5
 80018fe:	e008      	b.n	8001912 <HAL_GPIO_Init+0x206>
 8001900:	2304      	movs	r3, #4
 8001902:	e006      	b.n	8001912 <HAL_GPIO_Init+0x206>
 8001904:	2303      	movs	r3, #3
 8001906:	e004      	b.n	8001912 <HAL_GPIO_Init+0x206>
 8001908:	2302      	movs	r3, #2
 800190a:	e002      	b.n	8001912 <HAL_GPIO_Init+0x206>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <HAL_GPIO_Init+0x206>
 8001910:	2300      	movs	r3, #0
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	f002 0203 	and.w	r2, r2, #3
 8001918:	0092      	lsls	r2, r2, #2
 800191a:	4093      	lsls	r3, r2
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001922:	4937      	ldr	r1, [pc, #220]	; (8001a00 <HAL_GPIO_Init+0x2f4>)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	3302      	adds	r3, #2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001930:	4b3a      	ldr	r3, [pc, #232]	; (8001a1c <HAL_GPIO_Init+0x310>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001954:	4a31      	ldr	r2, [pc, #196]	; (8001a1c <HAL_GPIO_Init+0x310>)
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800195a:	4b30      	ldr	r3, [pc, #192]	; (8001a1c <HAL_GPIO_Init+0x310>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800197e:	4a27      	ldr	r2, [pc, #156]	; (8001a1c <HAL_GPIO_Init+0x310>)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001984:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <HAL_GPIO_Init+0x310>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	43db      	mvns	r3, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019a8:	4a1c      	ldr	r2, [pc, #112]	; (8001a1c <HAL_GPIO_Init+0x310>)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019ae:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <HAL_GPIO_Init+0x310>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019d2:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <HAL_GPIO_Init+0x310>)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	3301      	adds	r3, #1
 80019dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	fa22 f303 	lsr.w	r3, r2, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f47f ae97 	bne.w	800171c <HAL_GPIO_Init+0x10>
  }
}
 80019ee:	bf00      	nop
 80019f0:	371c      	adds	r7, #28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010000 	.word	0x40010000
 8001a04:	48000400 	.word	0x48000400
 8001a08:	48000800 	.word	0x48000800
 8001a0c:	48000c00 	.word	0x48000c00
 8001a10:	48001000 	.word	0x48001000
 8001a14:	48001400 	.word	0x48001400
 8001a18:	48001800 	.word	0x48001800
 8001a1c:	40010400 	.word	0x40010400

08001a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	807b      	strh	r3, [r7, #2]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a30:	787b      	ldrb	r3, [r7, #1]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a36:	887a      	ldrh	r2, [r7, #2]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e081      	b.n	8001b66 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d106      	bne.n	8001a7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff fa50 	bl	8000f1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2224      	movs	r2, #36	; 0x24
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0201 	bic.w	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aa0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ab0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d107      	bne.n	8001aca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	e006      	b.n	8001ad8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ad6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d104      	bne.n	8001aea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ae8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001afc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691a      	ldr	r2, [r3, #16]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69d9      	ldr	r1, [r3, #28]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1a      	ldr	r2, [r3, #32]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0201 	orr.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2220      	movs	r2, #32
 8001b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	4608      	mov	r0, r1
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4603      	mov	r3, r0
 8001b80:	817b      	strh	r3, [r7, #10]
 8001b82:	460b      	mov	r3, r1
 8001b84:	813b      	strh	r3, [r7, #8]
 8001b86:	4613      	mov	r3, r2
 8001b88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b20      	cmp	r3, #32
 8001b94:	f040 80fd 	bne.w	8001d92 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <HAL_I2C_Mem_Read+0x34>
 8001b9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d105      	bne.n	8001bb0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001baa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0f1      	b.n	8001d94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_I2C_Mem_Read+0x4e>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e0ea      	b.n	8001d94 <HAL_I2C_Mem_Read+0x224>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bc6:	f7ff fc8d 	bl	80014e4 <HAL_GetTick>
 8001bca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2319      	movs	r3, #25
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 f95b 	bl	8001e94 <I2C_WaitOnFlagUntilTimeout>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0d5      	b.n	8001d94 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2222      	movs	r2, #34	; 0x22
 8001bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2240      	movs	r2, #64	; 0x40
 8001bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a3a      	ldr	r2, [r7, #32]
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c10:	88f8      	ldrh	r0, [r7, #6]
 8001c12:	893a      	ldrh	r2, [r7, #8]
 8001c14:	8979      	ldrh	r1, [r7, #10]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	4603      	mov	r3, r0
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f000 f8bf 	bl	8001da4 <I2C_RequestMemoryRead>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0ad      	b.n	8001d94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	2bff      	cmp	r3, #255	; 0xff
 8001c40:	d90e      	bls.n	8001c60 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	22ff      	movs	r2, #255	; 0xff
 8001c46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	8979      	ldrh	r1, [r7, #10]
 8001c50:	4b52      	ldr	r3, [pc, #328]	; (8001d9c <HAL_I2C_Mem_Read+0x22c>)
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f000 fa4d 	bl	80020f8 <I2C_TransferConfig>
 8001c5e:	e00f      	b.n	8001c80 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	8979      	ldrh	r1, [r7, #10]
 8001c72:	4b4a      	ldr	r3, [pc, #296]	; (8001d9c <HAL_I2C_Mem_Read+0x22c>)
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 fa3c 	bl	80020f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c86:	2200      	movs	r2, #0
 8001c88:	2104      	movs	r1, #4
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f000 f902 	bl	8001e94 <I2C_WaitOnFlagUntilTimeout>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e07c      	b.n	8001d94 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d034      	beq.n	8001d40 <HAL_I2C_Mem_Read+0x1d0>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d130      	bne.n	8001d40 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2180      	movs	r1, #128	; 0x80
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 f8d3 	bl	8001e94 <I2C_WaitOnFlagUntilTimeout>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e04d      	b.n	8001d94 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	2bff      	cmp	r3, #255	; 0xff
 8001d00:	d90e      	bls.n	8001d20 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	22ff      	movs	r2, #255	; 0xff
 8001d06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	8979      	ldrh	r1, [r7, #10]
 8001d10:	2300      	movs	r3, #0
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 f9ed 	bl	80020f8 <I2C_TransferConfig>
 8001d1e:	e00f      	b.n	8001d40 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	8979      	ldrh	r1, [r7, #10]
 8001d32:	2300      	movs	r3, #0
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f9dc 	bl	80020f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d19a      	bne.n	8001c80 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f000 f920 	bl	8001f94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e01a      	b.n	8001d94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2220      	movs	r2, #32
 8001d64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6859      	ldr	r1, [r3, #4]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_I2C_Mem_Read+0x230>)
 8001d72:	400b      	ands	r3, r1
 8001d74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e000      	b.n	8001d94 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001d92:	2302      	movs	r3, #2
  }
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	80002400 	.word	0x80002400
 8001da0:	fe00e800 	.word	0xfe00e800

08001da4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	4608      	mov	r0, r1
 8001dae:	4611      	mov	r1, r2
 8001db0:	461a      	mov	r2, r3
 8001db2:	4603      	mov	r3, r0
 8001db4:	817b      	strh	r3, [r7, #10]
 8001db6:	460b      	mov	r3, r1
 8001db8:	813b      	strh	r3, [r7, #8]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	8979      	ldrh	r1, [r7, #10]
 8001dc4:	4b20      	ldr	r3, [pc, #128]	; (8001e48 <I2C_RequestMemoryRead+0xa4>)
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	2300      	movs	r3, #0
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 f994 	bl	80020f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dd0:	69fa      	ldr	r2, [r7, #28]
 8001dd2:	69b9      	ldr	r1, [r7, #24]
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 f89d 	bl	8001f14 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e02c      	b.n	8001e3e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d105      	bne.n	8001df6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001dea:	893b      	ldrh	r3, [r7, #8]
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28
 8001df4:	e015      	b.n	8001e22 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001df6:	893b      	ldrh	r3, [r7, #8]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	69b9      	ldr	r1, [r7, #24]
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f000 f883 	bl	8001f14 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e012      	b.n	8001e3e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e18:	893b      	ldrh	r3, [r7, #8]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2140      	movs	r1, #64	; 0x40
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f000 f831 	bl	8001e94 <I2C_WaitOnFlagUntilTimeout>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	80002000 	.word	0x80002000

08001e4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d103      	bne.n	8001e6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2200      	movs	r2, #0
 8001e68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d007      	beq.n	8001e88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699a      	ldr	r2, [r3, #24]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	619a      	str	r2, [r3, #24]
  }
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ea4:	e022      	b.n	8001eec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eac:	d01e      	beq.n	8001eec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eae:	f7ff fb19 	bl	80014e4 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d302      	bcc.n	8001ec4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d113      	bne.n	8001eec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec8:	f043 0220 	orr.w	r2, r3, #32
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e00f      	b.n	8001f0c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699a      	ldr	r2, [r3, #24]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d0cd      	beq.n	8001ea6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f20:	e02c      	b.n	8001f7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	68b9      	ldr	r1, [r7, #8]
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f870 	bl	800200c <I2C_IsAcknowledgeFailed>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e02a      	b.n	8001f8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f3c:	d01e      	beq.n	8001f7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f3e:	f7ff fad1 	bl	80014e4 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d302      	bcc.n	8001f54 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d113      	bne.n	8001f7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f58:	f043 0220 	orr.w	r2, r3, #32
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e007      	b.n	8001f8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d1cb      	bne.n	8001f22 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fa0:	e028      	b.n	8001ff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 f830 	bl	800200c <I2C_IsAcknowledgeFailed>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e026      	b.n	8002004 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fb6:	f7ff fa95 	bl	80014e4 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d302      	bcc.n	8001fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d113      	bne.n	8001ff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd0:	f043 0220 	orr.w	r2, r3, #32
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e007      	b.n	8002004 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	2b20      	cmp	r3, #32
 8002000:	d1cf      	bne.n	8001fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b10      	cmp	r3, #16
 8002024:	d161      	bne.n	80020ea <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002030:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002034:	d02b      	beq.n	800208e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002044:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002046:	e022      	b.n	800208e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800204e:	d01e      	beq.n	800208e <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002050:	f7ff fa48 	bl	80014e4 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	429a      	cmp	r2, r3
 800205e:	d302      	bcc.n	8002066 <I2C_IsAcknowledgeFailed+0x5a>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d113      	bne.n	800208e <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f043 0220 	orr.w	r2, r3, #32
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2220      	movs	r2, #32
 8002076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e02e      	b.n	80020ec <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0320 	and.w	r3, r3, #32
 8002098:	2b20      	cmp	r3, #32
 800209a:	d1d5      	bne.n	8002048 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2210      	movs	r2, #16
 80020a2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2220      	movs	r2, #32
 80020aa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f7ff fecd 	bl	8001e4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6859      	ldr	r1, [r3, #4]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <I2C_IsAcknowledgeFailed+0xe8>)
 80020be:	400b      	ands	r3, r1
 80020c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	f043 0204 	orr.w	r2, r3, #4
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2220      	movs	r2, #32
 80020d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	fe00e800 	.word	0xfe00e800

080020f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	607b      	str	r3, [r7, #4]
 8002102:	460b      	mov	r3, r1
 8002104:	817b      	strh	r3, [r7, #10]
 8002106:	4613      	mov	r3, r2
 8002108:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	0d5b      	lsrs	r3, r3, #21
 8002114:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002118:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <I2C_TransferConfig+0x58>)
 800211a:	430b      	orrs	r3, r1
 800211c:	43db      	mvns	r3, r3
 800211e:	ea02 0103 	and.w	r1, r2, r3
 8002122:	897b      	ldrh	r3, [r7, #10]
 8002124:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002128:	7a7b      	ldrb	r3, [r7, #9]
 800212a:	041b      	lsls	r3, r3, #16
 800212c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	431a      	orrs	r2, r3
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	431a      	orrs	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	03ff63ff 	.word	0x03ff63ff

08002154 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b20      	cmp	r3, #32
 8002168:	d138      	bne.n	80021dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002174:	2302      	movs	r3, #2
 8002176:	e032      	b.n	80021de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2224      	movs	r2, #36	; 0x24
 8002184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0201 	bic.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6819      	ldr	r1, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	e000      	b.n	80021de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021dc:	2302      	movs	r3, #2
  }
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b085      	sub	sp, #20
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b20      	cmp	r3, #32
 80021fe:	d139      	bne.n	8002274 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800220a:	2302      	movs	r3, #2
 800220c:	e033      	b.n	8002276 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2224      	movs	r2, #36	; 0x24
 800221a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0201 	bic.w	r2, r2, #1
 800222c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800223c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0201 	orr.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	e000      	b.n	8002276 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002274:	2302      	movs	r3, #2
  }
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800228a:	af00      	add	r7, sp, #0
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002290:	1d3b      	adds	r3, r7, #4
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	f000 bf01 	b.w	80030a0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 8160 	beq.w	800256e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022ae:	4bae      	ldr	r3, [pc, #696]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d00c      	beq.n	80022d4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022ba:	4bab      	ldr	r3, [pc, #684]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d159      	bne.n	800237a <HAL_RCC_OscConfig+0xf6>
 80022c6:	4ba8      	ldr	r3, [pc, #672]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80022ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d2:	d152      	bne.n	800237a <HAL_RCC_OscConfig+0xf6>
 80022d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022e8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ec:	fab3 f383 	clz	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d102      	bne.n	8002306 <HAL_RCC_OscConfig+0x82>
 8002300:	4b99      	ldr	r3, [pc, #612]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	e015      	b.n	8002332 <HAL_RCC_OscConfig+0xae>
 8002306:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800230a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800231a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800231e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002322:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800232e:	4b8e      	ldr	r3, [pc, #568]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002336:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800233a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800233e:	fa92 f2a2 	rbit	r2, r2
 8002342:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002346:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800234a:	fab2 f282 	clz	r2, r2
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	f042 0220 	orr.w	r2, r2, #32
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	f002 021f 	and.w	r2, r2, #31
 800235a:	2101      	movs	r1, #1
 800235c:	fa01 f202 	lsl.w	r2, r1, r2
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 8102 	beq.w	800256c <HAL_RCC_OscConfig+0x2e8>
 8002368:	1d3b      	adds	r3, r7, #4
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	f040 80fc 	bne.w	800256c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	f000 be93 	b.w	80030a0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002384:	d106      	bne.n	8002394 <HAL_RCC_OscConfig+0x110>
 8002386:	4b78      	ldr	r3, [pc, #480]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a77      	ldr	r2, [pc, #476]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 800238c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	e030      	b.n	80023f6 <HAL_RCC_OscConfig+0x172>
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x134>
 800239e:	4b72      	ldr	r3, [pc, #456]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a71      	ldr	r2, [pc, #452]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 80023a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	4b6f      	ldr	r3, [pc, #444]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a6e      	ldr	r2, [pc, #440]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 80023b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	e01e      	b.n	80023f6 <HAL_RCC_OscConfig+0x172>
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023c2:	d10c      	bne.n	80023de <HAL_RCC_OscConfig+0x15a>
 80023c4:	4b68      	ldr	r3, [pc, #416]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a67      	ldr	r2, [pc, #412]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 80023ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	4b65      	ldr	r3, [pc, #404]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a64      	ldr	r2, [pc, #400]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 80023d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	e00b      	b.n	80023f6 <HAL_RCC_OscConfig+0x172>
 80023de:	4b62      	ldr	r3, [pc, #392]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a61      	ldr	r2, [pc, #388]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 80023e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	4b5f      	ldr	r3, [pc, #380]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a5e      	ldr	r2, [pc, #376]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 80023f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023f6:	1d3b      	adds	r3, r7, #4
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d059      	beq.n	80024b4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7ff f870 	bl	80014e4 <HAL_GetTick>
 8002404:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002408:	e00a      	b.n	8002420 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800240a:	f7ff f86b 	bl	80014e4 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d902      	bls.n	8002420 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	f000 be40 	b.w	80030a0 <HAL_RCC_OscConfig+0xe1c>
 8002420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002424:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002434:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b01      	cmp	r3, #1
 800244a:	d102      	bne.n	8002452 <HAL_RCC_OscConfig+0x1ce>
 800244c:	4b46      	ldr	r3, [pc, #280]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	e015      	b.n	800247e <HAL_RCC_OscConfig+0x1fa>
 8002452:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002456:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002466:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800246a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800246e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002472:	fa93 f3a3 	rbit	r3, r3
 8002476:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800247a:	4b3b      	ldr	r3, [pc, #236]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002482:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002486:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800248a:	fa92 f2a2 	rbit	r2, r2
 800248e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002492:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002496:	fab2 f282 	clz	r2, r2
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	f042 0220 	orr.w	r2, r2, #32
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	f002 021f 	and.w	r2, r2, #31
 80024a6:	2101      	movs	r1, #1
 80024a8:	fa01 f202 	lsl.w	r2, r1, r2
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0ab      	beq.n	800240a <HAL_RCC_OscConfig+0x186>
 80024b2:	e05c      	b.n	800256e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7ff f816 	bl	80014e4 <HAL_GetTick>
 80024b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024bc:	e00a      	b.n	80024d4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024be:	f7ff f811 	bl	80014e4 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	; 0x64
 80024cc:	d902      	bls.n	80024d4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	f000 bde6 	b.w	80030a0 <HAL_RCC_OscConfig+0xe1c>
 80024d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024d8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80024e0:	fa93 f3a3 	rbit	r3, r3
 80024e4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80024e8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d102      	bne.n	8002506 <HAL_RCC_OscConfig+0x282>
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	e015      	b.n	8002532 <HAL_RCC_OscConfig+0x2ae>
 8002506:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800250a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800251a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800251e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002522:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800252e:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <HAL_RCC_OscConfig+0x2e4>)
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002536:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800253a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800253e:	fa92 f2a2 	rbit	r2, r2
 8002542:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002546:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800254a:	fab2 f282 	clz	r2, r2
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	f042 0220 	orr.w	r2, r2, #32
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	f002 021f 	and.w	r2, r2, #31
 800255a:	2101      	movs	r1, #1
 800255c:	fa01 f202 	lsl.w	r2, r1, r2
 8002560:	4013      	ands	r3, r2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1ab      	bne.n	80024be <HAL_RCC_OscConfig+0x23a>
 8002566:	e002      	b.n	800256e <HAL_RCC_OscConfig+0x2ea>
 8002568:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256e:	1d3b      	adds	r3, r7, #4
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 8170 	beq.w	800285e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800257e:	4bd0      	ldr	r3, [pc, #832]	; (80028c0 <HAL_RCC_OscConfig+0x63c>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00c      	beq.n	80025a4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800258a:	4bcd      	ldr	r3, [pc, #820]	; (80028c0 <HAL_RCC_OscConfig+0x63c>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b08      	cmp	r3, #8
 8002594:	d16d      	bne.n	8002672 <HAL_RCC_OscConfig+0x3ee>
 8002596:	4bca      	ldr	r3, [pc, #808]	; (80028c0 <HAL_RCC_OscConfig+0x63c>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800259e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025a2:	d166      	bne.n	8002672 <HAL_RCC_OscConfig+0x3ee>
 80025a4:	2302      	movs	r3, #2
 80025a6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80025b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	095b      	lsrs	r3, r3, #5
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d102      	bne.n	80025d4 <HAL_RCC_OscConfig+0x350>
 80025ce:	4bbc      	ldr	r3, [pc, #752]	; (80028c0 <HAL_RCC_OscConfig+0x63c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	e013      	b.n	80025fc <HAL_RCC_OscConfig+0x378>
 80025d4:	2302      	movs	r3, #2
 80025d6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80025e6:	2302      	movs	r3, #2
 80025e8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80025ec:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80025f8:	4bb1      	ldr	r3, [pc, #708]	; (80028c0 <HAL_RCC_OscConfig+0x63c>)
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	2202      	movs	r2, #2
 80025fe:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002602:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002606:	fa92 f2a2 	rbit	r2, r2
 800260a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800260e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002612:	fab2 f282 	clz	r2, r2
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	f042 0220 	orr.w	r2, r2, #32
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	f002 021f 	and.w	r2, r2, #31
 8002622:	2101      	movs	r1, #1
 8002624:	fa01 f202 	lsl.w	r2, r1, r2
 8002628:	4013      	ands	r3, r2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <HAL_RCC_OscConfig+0x3ba>
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d002      	beq.n	800263e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	f000 bd31 	b.w	80030a0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263e:	4ba0      	ldr	r3, [pc, #640]	; (80028c0 <HAL_RCC_OscConfig+0x63c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002646:	1d3b      	adds	r3, r7, #4
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	21f8      	movs	r1, #248	; 0xf8
 800264e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002656:	fa91 f1a1 	rbit	r1, r1
 800265a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800265e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002662:	fab1 f181 	clz	r1, r1
 8002666:	b2c9      	uxtb	r1, r1
 8002668:	408b      	lsls	r3, r1
 800266a:	4995      	ldr	r1, [pc, #596]	; (80028c0 <HAL_RCC_OscConfig+0x63c>)
 800266c:	4313      	orrs	r3, r2
 800266e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002670:	e0f5      	b.n	800285e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 8085 	beq.w	8002788 <HAL_RCC_OscConfig+0x504>
 800267e:	2301      	movs	r3, #1
 8002680:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002688:	fa93 f3a3 	rbit	r3, r3
 800268c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002690:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800269e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	461a      	mov	r2, r3
 80026a6:	2301      	movs	r3, #1
 80026a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026aa:	f7fe ff1b 	bl	80014e4 <HAL_GetTick>
 80026ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b2:	e00a      	b.n	80026ca <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026b4:	f7fe ff16 	bl	80014e4 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d902      	bls.n	80026ca <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	f000 bceb 	b.w	80030a0 <HAL_RCC_OscConfig+0xe1c>
 80026ca:	2302      	movs	r3, #2
 80026cc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80026d4:	fa93 f3a3 	rbit	r3, r3
 80026d8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80026dc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e0:	fab3 f383 	clz	r3, r3
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d102      	bne.n	80026fa <HAL_RCC_OscConfig+0x476>
 80026f4:	4b72      	ldr	r3, [pc, #456]	; (80028c0 <HAL_RCC_OscConfig+0x63c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	e013      	b.n	8002722 <HAL_RCC_OscConfig+0x49e>
 80026fa:	2302      	movs	r3, #2
 80026fc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002704:	fa93 f3a3 	rbit	r3, r3
 8002708:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800270c:	2302      	movs	r3, #2
 800270e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002712:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800271e:	4b68      	ldr	r3, [pc, #416]	; (80028c0 <HAL_RCC_OscConfig+0x63c>)
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	2202      	movs	r2, #2
 8002724:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002728:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800272c:	fa92 f2a2 	rbit	r2, r2
 8002730:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002734:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002738:	fab2 f282 	clz	r2, r2
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	f042 0220 	orr.w	r2, r2, #32
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	f002 021f 	and.w	r2, r2, #31
 8002748:	2101      	movs	r1, #1
 800274a:	fa01 f202 	lsl.w	r2, r1, r2
 800274e:	4013      	ands	r3, r2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0af      	beq.n	80026b4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002754:	4b5a      	ldr	r3, [pc, #360]	; (80028c0 <HAL_RCC_OscConfig+0x63c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	21f8      	movs	r1, #248	; 0xf8
 8002764:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002768:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800276c:	fa91 f1a1 	rbit	r1, r1
 8002770:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002774:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002778:	fab1 f181 	clz	r1, r1
 800277c:	b2c9      	uxtb	r1, r1
 800277e:	408b      	lsls	r3, r1
 8002780:	494f      	ldr	r1, [pc, #316]	; (80028c0 <HAL_RCC_OscConfig+0x63c>)
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]
 8002786:	e06a      	b.n	800285e <HAL_RCC_OscConfig+0x5da>
 8002788:	2301      	movs	r3, #1
 800278a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800279a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279e:	fab3 f383 	clz	r3, r3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	461a      	mov	r2, r3
 80027b0:	2300      	movs	r3, #0
 80027b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7fe fe96 	bl	80014e4 <HAL_GetTick>
 80027b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027bc:	e00a      	b.n	80027d4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027be:	f7fe fe91 	bl	80014e4 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d902      	bls.n	80027d4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	f000 bc66 	b.w	80030a0 <HAL_RCC_OscConfig+0xe1c>
 80027d4:	2302      	movs	r3, #2
 80027d6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80027e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	fab3 f383 	clz	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	095b      	lsrs	r3, r3, #5
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d102      	bne.n	8002804 <HAL_RCC_OscConfig+0x580>
 80027fe:	4b30      	ldr	r3, [pc, #192]	; (80028c0 <HAL_RCC_OscConfig+0x63c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	e013      	b.n	800282c <HAL_RCC_OscConfig+0x5a8>
 8002804:	2302      	movs	r3, #2
 8002806:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800280e:	fa93 f3a3 	rbit	r3, r3
 8002812:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002816:	2302      	movs	r3, #2
 8002818:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800281c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002820:	fa93 f3a3 	rbit	r3, r3
 8002824:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002828:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <HAL_RCC_OscConfig+0x63c>)
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	2202      	movs	r2, #2
 800282e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002832:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002836:	fa92 f2a2 	rbit	r2, r2
 800283a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800283e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002842:	fab2 f282 	clz	r2, r2
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	f042 0220 	orr.w	r2, r2, #32
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	f002 021f 	and.w	r2, r2, #31
 8002852:	2101      	movs	r1, #1
 8002854:	fa01 f202 	lsl.w	r2, r1, r2
 8002858:	4013      	ands	r3, r2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1af      	bne.n	80027be <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285e:	1d3b      	adds	r3, r7, #4
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80da 	beq.w	8002a22 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800286e:	1d3b      	adds	r3, r7, #4
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d069      	beq.n	800294c <HAL_RCC_OscConfig+0x6c8>
 8002878:	2301      	movs	r3, #1
 800287a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800288a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800288e:	fab3 f383 	clz	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	461a      	mov	r2, r3
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_OscConfig+0x640>)
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	461a      	mov	r2, r3
 800289e:	2301      	movs	r3, #1
 80028a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a2:	f7fe fe1f 	bl	80014e4 <HAL_GetTick>
 80028a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028aa:	e00d      	b.n	80028c8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ac:	f7fe fe1a 	bl	80014e4 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d905      	bls.n	80028c8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e3ef      	b.n	80030a0 <HAL_RCC_OscConfig+0xe1c>
 80028c0:	40021000 	.word	0x40021000
 80028c4:	10908120 	.word	0x10908120
 80028c8:	2302      	movs	r3, #2
 80028ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028d2:	fa93 f2a3 	rbit	r2, r3
 80028d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80028e0:	2202      	movs	r2, #2
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	fa93 f2a3 	rbit	r2, r3
 80028ee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80028f8:	2202      	movs	r2, #2
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	fa93 f2a3 	rbit	r2, r3
 8002906:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800290a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290c:	4ba4      	ldr	r3, [pc, #656]	; (8002ba0 <HAL_RCC_OscConfig+0x91c>)
 800290e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002910:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002914:	2102      	movs	r1, #2
 8002916:	6019      	str	r1, [r3, #0]
 8002918:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	fa93 f1a3 	rbit	r1, r3
 8002922:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002926:	6019      	str	r1, [r3, #0]
  return result;
 8002928:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002938:	b2db      	uxtb	r3, r3
 800293a:	f003 031f 	and.w	r3, r3, #31
 800293e:	2101      	movs	r1, #1
 8002940:	fa01 f303 	lsl.w	r3, r1, r3
 8002944:	4013      	ands	r3, r2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0b0      	beq.n	80028ac <HAL_RCC_OscConfig+0x628>
 800294a:	e06a      	b.n	8002a22 <HAL_RCC_OscConfig+0x79e>
 800294c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002950:	2201      	movs	r2, #1
 8002952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	fa93 f2a3 	rbit	r2, r3
 800295e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002962:	601a      	str	r2, [r3, #0]
  return result;
 8002964:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002968:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	4b8c      	ldr	r3, [pc, #560]	; (8002ba4 <HAL_RCC_OscConfig+0x920>)
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	461a      	mov	r2, r3
 800297a:	2300      	movs	r3, #0
 800297c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297e:	f7fe fdb1 	bl	80014e4 <HAL_GetTick>
 8002982:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002986:	e009      	b.n	800299c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002988:	f7fe fdac 	bl	80014e4 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e381      	b.n	80030a0 <HAL_RCC_OscConfig+0xe1c>
 800299c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80029a0:	2202      	movs	r2, #2
 80029a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	fa93 f2a3 	rbit	r2, r3
 80029ae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80029b8:	2202      	movs	r2, #2
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	fa93 f2a3 	rbit	r2, r3
 80029c6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029d0:	2202      	movs	r2, #2
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	fa93 f2a3 	rbit	r2, r3
 80029de:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80029e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e4:	4b6e      	ldr	r3, [pc, #440]	; (8002ba0 <HAL_RCC_OscConfig+0x91c>)
 80029e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029ec:	2102      	movs	r1, #2
 80029ee:	6019      	str	r1, [r3, #0]
 80029f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	fa93 f1a3 	rbit	r1, r3
 80029fa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80029fe:	6019      	str	r1, [r3, #0]
  return result;
 8002a00:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	2101      	movs	r1, #1
 8002a18:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1b2      	bne.n	8002988 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a22:	1d3b      	adds	r3, r7, #4
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8157 	beq.w	8002ce0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a38:	4b59      	ldr	r3, [pc, #356]	; (8002ba0 <HAL_RCC_OscConfig+0x91c>)
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d112      	bne.n	8002a6a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a44:	4b56      	ldr	r3, [pc, #344]	; (8002ba0 <HAL_RCC_OscConfig+0x91c>)
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	4a55      	ldr	r2, [pc, #340]	; (8002ba0 <HAL_RCC_OscConfig+0x91c>)
 8002a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	61d3      	str	r3, [r2, #28]
 8002a50:	4b53      	ldr	r3, [pc, #332]	; (8002ba0 <HAL_RCC_OscConfig+0x91c>)
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a58:	f107 030c 	add.w	r3, r7, #12
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	f107 030c 	add.w	r3, r7, #12
 8002a62:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a64:	2301      	movs	r3, #1
 8002a66:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6a:	4b4f      	ldr	r3, [pc, #316]	; (8002ba8 <HAL_RCC_OscConfig+0x924>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d11a      	bne.n	8002aac <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a76:	4b4c      	ldr	r3, [pc, #304]	; (8002ba8 <HAL_RCC_OscConfig+0x924>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a4b      	ldr	r2, [pc, #300]	; (8002ba8 <HAL_RCC_OscConfig+0x924>)
 8002a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a82:	f7fe fd2f 	bl	80014e4 <HAL_GetTick>
 8002a86:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8a:	e009      	b.n	8002aa0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8c:	f7fe fd2a 	bl	80014e4 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b64      	cmp	r3, #100	; 0x64
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e2ff      	b.n	80030a0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa0:	4b41      	ldr	r3, [pc, #260]	; (8002ba8 <HAL_RCC_OscConfig+0x924>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0ef      	beq.n	8002a8c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d106      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x840>
 8002ab6:	4b3a      	ldr	r3, [pc, #232]	; (8002ba0 <HAL_RCC_OscConfig+0x91c>)
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	4a39      	ldr	r2, [pc, #228]	; (8002ba0 <HAL_RCC_OscConfig+0x91c>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6213      	str	r3, [r2, #32]
 8002ac2:	e02f      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a0>
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x864>
 8002ace:	4b34      	ldr	r3, [pc, #208]	; (8002ba0 <HAL_RCC_OscConfig+0x91c>)
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	4a33      	ldr	r2, [pc, #204]	; (8002ba0 <HAL_RCC_OscConfig+0x91c>)
 8002ad4:	f023 0301 	bic.w	r3, r3, #1
 8002ad8:	6213      	str	r3, [r2, #32]
 8002ada:	4b31      	ldr	r3, [pc, #196]	; (8002ba0 <HAL_RCC_OscConfig+0x91c>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4a30      	ldr	r2, [pc, #192]	; (8002ba0 <HAL_RCC_OscConfig+0x91c>)
 8002ae0:	f023 0304 	bic.w	r3, r3, #4
 8002ae4:	6213      	str	r3, [r2, #32]
 8002ae6:	e01d      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a0>
 8002ae8:	1d3b      	adds	r3, r7, #4
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b05      	cmp	r3, #5
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x888>
 8002af2:	4b2b      	ldr	r3, [pc, #172]	; (8002ba0 <HAL_RCC_OscConfig+0x91c>)
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	4a2a      	ldr	r2, [pc, #168]	; (8002ba0 <HAL_RCC_OscConfig+0x91c>)
 8002af8:	f043 0304 	orr.w	r3, r3, #4
 8002afc:	6213      	str	r3, [r2, #32]
 8002afe:	4b28      	ldr	r3, [pc, #160]	; (8002ba0 <HAL_RCC_OscConfig+0x91c>)
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	4a27      	ldr	r2, [pc, #156]	; (8002ba0 <HAL_RCC_OscConfig+0x91c>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6213      	str	r3, [r2, #32]
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCC_OscConfig+0x8a0>
 8002b0c:	4b24      	ldr	r3, [pc, #144]	; (8002ba0 <HAL_RCC_OscConfig+0x91c>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	4a23      	ldr	r2, [pc, #140]	; (8002ba0 <HAL_RCC_OscConfig+0x91c>)
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	6213      	str	r3, [r2, #32]
 8002b18:	4b21      	ldr	r3, [pc, #132]	; (8002ba0 <HAL_RCC_OscConfig+0x91c>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	4a20      	ldr	r2, [pc, #128]	; (8002ba0 <HAL_RCC_OscConfig+0x91c>)
 8002b1e:	f023 0304 	bic.w	r3, r3, #4
 8002b22:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b24:	1d3b      	adds	r3, r7, #4
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d06a      	beq.n	8002c04 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fcd9 	bl	80014e4 <HAL_GetTick>
 8002b32:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b36:	e00b      	b.n	8002b50 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b38:	f7fe fcd4 	bl	80014e4 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e2a7      	b.n	80030a0 <HAL_RCC_OscConfig+0xe1c>
 8002b50:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b54:	2202      	movs	r2, #2
 8002b56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	fa93 f2a3 	rbit	r2, r3
 8002b62:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	fa93 f2a3 	rbit	r2, r3
 8002b7a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b7e:	601a      	str	r2, [r3, #0]
  return result;
 8002b80:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b84:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b86:	fab3 f383 	clz	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d108      	bne.n	8002bac <HAL_RCC_OscConfig+0x928>
 8002b9a:	4b01      	ldr	r3, [pc, #4]	; (8002ba0 <HAL_RCC_OscConfig+0x91c>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	e013      	b.n	8002bc8 <HAL_RCC_OscConfig+0x944>
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	10908120 	.word	0x10908120
 8002ba8:	40007000 	.word	0x40007000
 8002bac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	fa93 f2a3 	rbit	r2, r3
 8002bbe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	4bc0      	ldr	r3, [pc, #768]	; (8002ec8 <HAL_RCC_OscConfig+0xc44>)
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002bcc:	2102      	movs	r1, #2
 8002bce:	6011      	str	r1, [r2, #0]
 8002bd0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002bd4:	6812      	ldr	r2, [r2, #0]
 8002bd6:	fa92 f1a2 	rbit	r1, r2
 8002bda:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002bde:	6011      	str	r1, [r2, #0]
  return result;
 8002be0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	fab2 f282 	clz	r2, r2
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	f002 021f 	and.w	r2, r2, #31
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d09a      	beq.n	8002b38 <HAL_RCC_OscConfig+0x8b4>
 8002c02:	e063      	b.n	8002ccc <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c04:	f7fe fc6e 	bl	80014e4 <HAL_GetTick>
 8002c08:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0c:	e00b      	b.n	8002c26 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c0e:	f7fe fc69 	bl	80014e4 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e23c      	b.n	80030a0 <HAL_RCC_OscConfig+0xe1c>
 8002c26:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	fa93 f2a3 	rbit	r2, r3
 8002c38:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c42:	2202      	movs	r2, #2
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	fa93 f2a3 	rbit	r2, r3
 8002c50:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c54:	601a      	str	r2, [r3, #0]
  return result;
 8002c56:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c5a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c5c:	fab3 f383 	clz	r3, r3
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	f043 0302 	orr.w	r3, r3, #2
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d102      	bne.n	8002c76 <HAL_RCC_OscConfig+0x9f2>
 8002c70:	4b95      	ldr	r3, [pc, #596]	; (8002ec8 <HAL_RCC_OscConfig+0xc44>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	e00d      	b.n	8002c92 <HAL_RCC_OscConfig+0xa0e>
 8002c76:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	fa93 f2a3 	rbit	r2, r3
 8002c88:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	4b8e      	ldr	r3, [pc, #568]	; (8002ec8 <HAL_RCC_OscConfig+0xc44>)
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002c96:	2102      	movs	r1, #2
 8002c98:	6011      	str	r1, [r2, #0]
 8002c9a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	fa92 f1a2 	rbit	r1, r2
 8002ca4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002ca8:	6011      	str	r1, [r2, #0]
  return result;
 8002caa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	fab2 f282 	clz	r2, r2
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	f002 021f 	and.w	r2, r2, #31
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1a0      	bne.n	8002c0e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ccc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d105      	bne.n	8002ce0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd4:	4b7c      	ldr	r3, [pc, #496]	; (8002ec8 <HAL_RCC_OscConfig+0xc44>)
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	4a7b      	ldr	r2, [pc, #492]	; (8002ec8 <HAL_RCC_OscConfig+0xc44>)
 8002cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cde:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce0:	1d3b      	adds	r3, r7, #4
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 81d9 	beq.w	800309e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cec:	4b76      	ldr	r3, [pc, #472]	; (8002ec8 <HAL_RCC_OscConfig+0xc44>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	f000 81a6 	beq.w	8003046 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cfa:	1d3b      	adds	r3, r7, #4
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	f040 811e 	bne.w	8002f42 <HAL_RCC_OscConfig+0xcbe>
 8002d06:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002d0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	fa93 f2a3 	rbit	r2, r3
 8002d1a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d1e:	601a      	str	r2, [r3, #0]
  return result;
 8002d20:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d24:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	461a      	mov	r2, r3
 8002d38:	2300      	movs	r3, #0
 8002d3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3c:	f7fe fbd2 	bl	80014e4 <HAL_GetTick>
 8002d40:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d44:	e009      	b.n	8002d5a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d46:	f7fe fbcd 	bl	80014e4 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e1a2      	b.n	80030a0 <HAL_RCC_OscConfig+0xe1c>
 8002d5a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	fa93 f2a3 	rbit	r2, r3
 8002d6e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d72:	601a      	str	r2, [r3, #0]
  return result;
 8002d74:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d7a:	fab3 f383 	clz	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d102      	bne.n	8002d94 <HAL_RCC_OscConfig+0xb10>
 8002d8e:	4b4e      	ldr	r3, [pc, #312]	; (8002ec8 <HAL_RCC_OscConfig+0xc44>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	e01b      	b.n	8002dcc <HAL_RCC_OscConfig+0xb48>
 8002d94:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	fa93 f2a3 	rbit	r2, r3
 8002da8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002db2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	fa93 f2a3 	rbit	r2, r3
 8002dc2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	4b3f      	ldr	r3, [pc, #252]	; (8002ec8 <HAL_RCC_OscConfig+0xc44>)
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002dd0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002dd4:	6011      	str	r1, [r2, #0]
 8002dd6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	fa92 f1a2 	rbit	r1, r2
 8002de0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002de4:	6011      	str	r1, [r2, #0]
  return result;
 8002de6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	fab2 f282 	clz	r2, r2
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	f042 0220 	orr.w	r2, r2, #32
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	f002 021f 	and.w	r2, r2, #31
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d19e      	bne.n	8002d46 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e08:	4b2f      	ldr	r3, [pc, #188]	; (8002ec8 <HAL_RCC_OscConfig+0xc44>)
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	f023 020f 	bic.w	r2, r3, #15
 8002e10:	1d3b      	adds	r3, r7, #4
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	492c      	ldr	r1, [pc, #176]	; (8002ec8 <HAL_RCC_OscConfig+0xc44>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002e1c:	4b2a      	ldr	r3, [pc, #168]	; (8002ec8 <HAL_RCC_OscConfig+0xc44>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002e24:	1d3b      	adds	r3, r7, #4
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6a19      	ldr	r1, [r3, #32]
 8002e2a:	1d3b      	adds	r3, r7, #4
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	430b      	orrs	r3, r1
 8002e32:	4925      	ldr	r1, [pc, #148]	; (8002ec8 <HAL_RCC_OscConfig+0xc44>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	604b      	str	r3, [r1, #4]
 8002e38:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	fa93 f2a3 	rbit	r2, r3
 8002e4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e50:	601a      	str	r2, [r3, #0]
  return result;
 8002e52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e56:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e58:	fab3 f383 	clz	r3, r3
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e62:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	461a      	mov	r2, r3
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7fe fb39 	bl	80014e4 <HAL_GetTick>
 8002e72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e76:	e009      	b.n	8002e8c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e78:	f7fe fb34 	bl	80014e4 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e109      	b.n	80030a0 <HAL_RCC_OscConfig+0xe1c>
 8002e8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	fa93 f2a3 	rbit	r2, r3
 8002ea0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ea4:	601a      	str	r2, [r3, #0]
  return result;
 8002ea6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002eaa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eac:	fab3 f383 	clz	r3, r3
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d105      	bne.n	8002ecc <HAL_RCC_OscConfig+0xc48>
 8002ec0:	4b01      	ldr	r3, [pc, #4]	; (8002ec8 <HAL_RCC_OscConfig+0xc44>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	e01e      	b.n	8002f04 <HAL_RCC_OscConfig+0xc80>
 8002ec6:	bf00      	nop
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ed0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ed4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	fa93 f2a3 	rbit	r2, r3
 8002ee0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002eea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	fa93 f2a3 	rbit	r2, r3
 8002efa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	4b6a      	ldr	r3, [pc, #424]	; (80030ac <HAL_RCC_OscConfig+0xe28>)
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002f08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f0c:	6011      	str	r1, [r2, #0]
 8002f0e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	fa92 f1a2 	rbit	r1, r2
 8002f18:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f1c:	6011      	str	r1, [r2, #0]
  return result;
 8002f1e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	fab2 f282 	clz	r2, r2
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	f042 0220 	orr.w	r2, r2, #32
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	f002 021f 	and.w	r2, r2, #31
 8002f34:	2101      	movs	r1, #1
 8002f36:	fa01 f202 	lsl.w	r2, r1, r2
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d09b      	beq.n	8002e78 <HAL_RCC_OscConfig+0xbf4>
 8002f40:	e0ad      	b.n	800309e <HAL_RCC_OscConfig+0xe1a>
 8002f42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	fa93 f2a3 	rbit	r2, r3
 8002f56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f5a:	601a      	str	r2, [r3, #0]
  return result;
 8002f5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f60:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f62:	fab3 f383 	clz	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	461a      	mov	r2, r3
 8002f74:	2300      	movs	r3, #0
 8002f76:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7fe fab4 	bl	80014e4 <HAL_GetTick>
 8002f7c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f80:	e009      	b.n	8002f96 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f82:	f7fe faaf 	bl	80014e4 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e084      	b.n	80030a0 <HAL_RCC_OscConfig+0xe1c>
 8002f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	fa93 f2a3 	rbit	r2, r3
 8002faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fae:	601a      	str	r2, [r3, #0]
  return result;
 8002fb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fb4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	095b      	lsrs	r3, r3, #5
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d102      	bne.n	8002fd0 <HAL_RCC_OscConfig+0xd4c>
 8002fca:	4b38      	ldr	r3, [pc, #224]	; (80030ac <HAL_RCC_OscConfig+0xe28>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	e01b      	b.n	8003008 <HAL_RCC_OscConfig+0xd84>
 8002fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	fa93 f2a3 	rbit	r2, r3
 8002fe4:	f107 0320 	add.w	r3, r7, #32
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	f107 031c 	add.w	r3, r7, #28
 8002fee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	f107 031c 	add.w	r3, r7, #28
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	fa93 f2a3 	rbit	r2, r3
 8002ffe:	f107 0318 	add.w	r3, r7, #24
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	4b29      	ldr	r3, [pc, #164]	; (80030ac <HAL_RCC_OscConfig+0xe28>)
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	f107 0214 	add.w	r2, r7, #20
 800300c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003010:	6011      	str	r1, [r2, #0]
 8003012:	f107 0214 	add.w	r2, r7, #20
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	fa92 f1a2 	rbit	r1, r2
 800301c:	f107 0210 	add.w	r2, r7, #16
 8003020:	6011      	str	r1, [r2, #0]
  return result;
 8003022:	f107 0210 	add.w	r2, r7, #16
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	fab2 f282 	clz	r2, r2
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	f042 0220 	orr.w	r2, r2, #32
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	f002 021f 	and.w	r2, r2, #31
 8003038:	2101      	movs	r1, #1
 800303a:	fa01 f202 	lsl.w	r2, r1, r2
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d19e      	bne.n	8002f82 <HAL_RCC_OscConfig+0xcfe>
 8003044:	e02b      	b.n	800309e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003046:	1d3b      	adds	r3, r7, #4
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e025      	b.n	80030a0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003054:	4b15      	ldr	r3, [pc, #84]	; (80030ac <HAL_RCC_OscConfig+0xe28>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800305c:	4b13      	ldr	r3, [pc, #76]	; (80030ac <HAL_RCC_OscConfig+0xe28>)
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003064:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003068:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800306c:	1d3b      	adds	r3, r7, #4
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	429a      	cmp	r2, r3
 8003074:	d111      	bne.n	800309a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003076:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800307a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800307e:	1d3b      	adds	r3, r7, #4
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003084:	429a      	cmp	r2, r3
 8003086:	d108      	bne.n	800309a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003088:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800308c:	f003 020f 	and.w	r2, r3, #15
 8003090:	1d3b      	adds	r3, r7, #4
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003096:	429a      	cmp	r2, r3
 8003098:	d001      	beq.n	800309e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000

080030b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b09e      	sub	sp, #120	; 0x78
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e162      	b.n	800338e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030c8:	4b90      	ldr	r3, [pc, #576]	; (800330c <HAL_RCC_ClockConfig+0x25c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d910      	bls.n	80030f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d6:	4b8d      	ldr	r3, [pc, #564]	; (800330c <HAL_RCC_ClockConfig+0x25c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 0207 	bic.w	r2, r3, #7
 80030de:	498b      	ldr	r1, [pc, #556]	; (800330c <HAL_RCC_ClockConfig+0x25c>)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e6:	4b89      	ldr	r3, [pc, #548]	; (800330c <HAL_RCC_ClockConfig+0x25c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e14a      	b.n	800338e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003104:	4b82      	ldr	r3, [pc, #520]	; (8003310 <HAL_RCC_ClockConfig+0x260>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	497f      	ldr	r1, [pc, #508]	; (8003310 <HAL_RCC_ClockConfig+0x260>)
 8003112:	4313      	orrs	r3, r2
 8003114:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 80dc 	beq.w	80032dc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d13c      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xf6>
 800312c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003130:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003132:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003134:	fa93 f3a3 	rbit	r3, r3
 8003138:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800313a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313c:	fab3 f383 	clz	r3, r3
 8003140:	b2db      	uxtb	r3, r3
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	b2db      	uxtb	r3, r3
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b01      	cmp	r3, #1
 800314e:	d102      	bne.n	8003156 <HAL_RCC_ClockConfig+0xa6>
 8003150:	4b6f      	ldr	r3, [pc, #444]	; (8003310 <HAL_RCC_ClockConfig+0x260>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	e00f      	b.n	8003176 <HAL_RCC_ClockConfig+0xc6>
 8003156:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800315a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	667b      	str	r3, [r7, #100]	; 0x64
 8003164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003168:	663b      	str	r3, [r7, #96]	; 0x60
 800316a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800316c:	fa93 f3a3 	rbit	r3, r3
 8003170:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003172:	4b67      	ldr	r3, [pc, #412]	; (8003310 <HAL_RCC_ClockConfig+0x260>)
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800317a:	65ba      	str	r2, [r7, #88]	; 0x58
 800317c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800317e:	fa92 f2a2 	rbit	r2, r2
 8003182:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003184:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003186:	fab2 f282 	clz	r2, r2
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	f042 0220 	orr.w	r2, r2, #32
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	f002 021f 	and.w	r2, r2, #31
 8003196:	2101      	movs	r1, #1
 8003198:	fa01 f202 	lsl.w	r2, r1, r2
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d17b      	bne.n	800329a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0f3      	b.n	800338e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d13c      	bne.n	8003228 <HAL_RCC_ClockConfig+0x178>
 80031ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80031bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031be:	fab3 f383 	clz	r3, r3
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	095b      	lsrs	r3, r3, #5
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d102      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x128>
 80031d2:	4b4f      	ldr	r3, [pc, #316]	; (8003310 <HAL_RCC_ClockConfig+0x260>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	e00f      	b.n	80031f8 <HAL_RCC_ClockConfig+0x148>
 80031d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031e0:	fa93 f3a3 	rbit	r3, r3
 80031e4:	647b      	str	r3, [r7, #68]	; 0x44
 80031e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ea:	643b      	str	r3, [r7, #64]	; 0x40
 80031ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ee:	fa93 f3a3 	rbit	r3, r3
 80031f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031f4:	4b46      	ldr	r3, [pc, #280]	; (8003310 <HAL_RCC_ClockConfig+0x260>)
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031fc:	63ba      	str	r2, [r7, #56]	; 0x38
 80031fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003200:	fa92 f2a2 	rbit	r2, r2
 8003204:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003208:	fab2 f282 	clz	r2, r2
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	f042 0220 	orr.w	r2, r2, #32
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	f002 021f 	and.w	r2, r2, #31
 8003218:	2101      	movs	r1, #1
 800321a:	fa01 f202 	lsl.w	r2, r1, r2
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d13a      	bne.n	800329a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0b2      	b.n	800338e <HAL_RCC_ClockConfig+0x2de>
 8003228:	2302      	movs	r3, #2
 800322a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003236:	fab3 f383 	clz	r3, r3
 800323a:	b2db      	uxtb	r3, r3
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	b2db      	uxtb	r3, r3
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b01      	cmp	r3, #1
 8003248:	d102      	bne.n	8003250 <HAL_RCC_ClockConfig+0x1a0>
 800324a:	4b31      	ldr	r3, [pc, #196]	; (8003310 <HAL_RCC_ClockConfig+0x260>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	e00d      	b.n	800326c <HAL_RCC_ClockConfig+0x1bc>
 8003250:	2302      	movs	r3, #2
 8003252:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003256:	fa93 f3a3 	rbit	r3, r3
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
 800325c:	2302      	movs	r3, #2
 800325e:	623b      	str	r3, [r7, #32]
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	fa93 f3a3 	rbit	r3, r3
 8003266:	61fb      	str	r3, [r7, #28]
 8003268:	4b29      	ldr	r3, [pc, #164]	; (8003310 <HAL_RCC_ClockConfig+0x260>)
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	2202      	movs	r2, #2
 800326e:	61ba      	str	r2, [r7, #24]
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	fa92 f2a2 	rbit	r2, r2
 8003276:	617a      	str	r2, [r7, #20]
  return result;
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	fab2 f282 	clz	r2, r2
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	f042 0220 	orr.w	r2, r2, #32
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	f002 021f 	and.w	r2, r2, #31
 800328a:	2101      	movs	r1, #1
 800328c:	fa01 f202 	lsl.w	r2, r1, r2
 8003290:	4013      	ands	r3, r2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e079      	b.n	800338e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800329a:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <HAL_RCC_ClockConfig+0x260>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f023 0203 	bic.w	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	491a      	ldr	r1, [pc, #104]	; (8003310 <HAL_RCC_ClockConfig+0x260>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032ac:	f7fe f91a 	bl	80014e4 <HAL_GetTick>
 80032b0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b2:	e00a      	b.n	80032ca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b4:	f7fe f916 	bl	80014e4 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e061      	b.n	800338e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ca:	4b11      	ldr	r3, [pc, #68]	; (8003310 <HAL_RCC_ClockConfig+0x260>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 020c 	and.w	r2, r3, #12
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	429a      	cmp	r2, r3
 80032da:	d1eb      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_RCC_ClockConfig+0x25c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d214      	bcs.n	8003314 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b08      	ldr	r3, [pc, #32]	; (800330c <HAL_RCC_ClockConfig+0x25c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 0207 	bic.w	r2, r3, #7
 80032f2:	4906      	ldr	r1, [pc, #24]	; (800330c <HAL_RCC_ClockConfig+0x25c>)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fa:	4b04      	ldr	r3, [pc, #16]	; (800330c <HAL_RCC_ClockConfig+0x25c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d005      	beq.n	8003314 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e040      	b.n	800338e <HAL_RCC_ClockConfig+0x2de>
 800330c:	40022000 	.word	0x40022000
 8003310:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d008      	beq.n	8003332 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003320:	4b1d      	ldr	r3, [pc, #116]	; (8003398 <HAL_RCC_ClockConfig+0x2e8>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	491a      	ldr	r1, [pc, #104]	; (8003398 <HAL_RCC_ClockConfig+0x2e8>)
 800332e:	4313      	orrs	r3, r2
 8003330:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800333e:	4b16      	ldr	r3, [pc, #88]	; (8003398 <HAL_RCC_ClockConfig+0x2e8>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4912      	ldr	r1, [pc, #72]	; (8003398 <HAL_RCC_ClockConfig+0x2e8>)
 800334e:	4313      	orrs	r3, r2
 8003350:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003352:	f000 f829 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8003356:	4601      	mov	r1, r0
 8003358:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <HAL_RCC_ClockConfig+0x2e8>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003360:	22f0      	movs	r2, #240	; 0xf0
 8003362:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	fa92 f2a2 	rbit	r2, r2
 800336a:	60fa      	str	r2, [r7, #12]
  return result;
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	fab2 f282 	clz	r2, r2
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	40d3      	lsrs	r3, r2
 8003376:	4a09      	ldr	r2, [pc, #36]	; (800339c <HAL_RCC_ClockConfig+0x2ec>)
 8003378:	5cd3      	ldrb	r3, [r2, r3]
 800337a:	fa21 f303 	lsr.w	r3, r1, r3
 800337e:	4a08      	ldr	r2, [pc, #32]	; (80033a0 <HAL_RCC_ClockConfig+0x2f0>)
 8003380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003382:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <HAL_RCC_ClockConfig+0x2f4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe f868 	bl	800145c <HAL_InitTick>
  
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3778      	adds	r7, #120	; 0x78
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000
 800339c:	08006910 	.word	0x08006910
 80033a0:	20000000 	.word	0x20000000
 80033a4:	20000004 	.word	0x20000004

080033a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b08b      	sub	sp, #44	; 0x2c
 80033ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	2300      	movs	r3, #0
 80033b4:	61bb      	str	r3, [r7, #24]
 80033b6:	2300      	movs	r3, #0
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80033c2:	4b2a      	ldr	r3, [pc, #168]	; (800346c <HAL_RCC_GetSysClockFreq+0xc4>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d002      	beq.n	80033d8 <HAL_RCC_GetSysClockFreq+0x30>
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d003      	beq.n	80033de <HAL_RCC_GetSysClockFreq+0x36>
 80033d6:	e03f      	b.n	8003458 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033d8:	4b25      	ldr	r3, [pc, #148]	; (8003470 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033da:	623b      	str	r3, [r7, #32]
      break;
 80033dc:	e03f      	b.n	800345e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033e4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80033e8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	fa92 f2a2 	rbit	r2, r2
 80033f0:	607a      	str	r2, [r7, #4]
  return result;
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	fab2 f282 	clz	r2, r2
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	40d3      	lsrs	r3, r2
 80033fc:	4a1d      	ldr	r2, [pc, #116]	; (8003474 <HAL_RCC_GetSysClockFreq+0xcc>)
 80033fe:	5cd3      	ldrb	r3, [r2, r3]
 8003400:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003402:	4b1a      	ldr	r3, [pc, #104]	; (800346c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	220f      	movs	r2, #15
 800340c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	fa92 f2a2 	rbit	r2, r2
 8003414:	60fa      	str	r2, [r7, #12]
  return result;
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	fab2 f282 	clz	r2, r2
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	40d3      	lsrs	r3, r2
 8003420:	4a15      	ldr	r2, [pc, #84]	; (8003478 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003422:	5cd3      	ldrb	r3, [r2, r3]
 8003424:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003430:	4a0f      	ldr	r2, [pc, #60]	; (8003470 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	fbb2 f2f3 	udiv	r2, r2, r3
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	fb02 f303 	mul.w	r3, r2, r3
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
 8003440:	e007      	b.n	8003452 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003442:	4a0e      	ldr	r2, [pc, #56]	; (800347c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	fbb2 f2f3 	udiv	r2, r2, r3
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	fb02 f303 	mul.w	r3, r2, r3
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	623b      	str	r3, [r7, #32]
      break;
 8003456:	e002      	b.n	800345e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003458:	4b08      	ldr	r3, [pc, #32]	; (800347c <HAL_RCC_GetSysClockFreq+0xd4>)
 800345a:	623b      	str	r3, [r7, #32]
      break;
 800345c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800345e:	6a3b      	ldr	r3, [r7, #32]
}
 8003460:	4618      	mov	r0, r3
 8003462:	372c      	adds	r7, #44	; 0x2c
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	40021000 	.word	0x40021000
 8003470:	00f42400 	.word	0x00f42400
 8003474:	08006928 	.word	0x08006928
 8003478:	08006938 	.word	0x08006938
 800347c:	007a1200 	.word	0x007a1200

08003480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003484:	4b03      	ldr	r3, [pc, #12]	; (8003494 <HAL_RCC_GetHCLKFreq+0x14>)
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	4618      	mov	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	20000000 	.word	0x20000000

08003498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800349e:	f7ff ffef 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 80034a2:	4601      	mov	r1, r0
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034ac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80034b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	fa92 f2a2 	rbit	r2, r2
 80034b8:	603a      	str	r2, [r7, #0]
  return result;
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	fab2 f282 	clz	r2, r2
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	40d3      	lsrs	r3, r2
 80034c4:	4a04      	ldr	r2, [pc, #16]	; (80034d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80034c6:	5cd3      	ldrb	r3, [r2, r3]
 80034c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40021000 	.word	0x40021000
 80034d8:	08006920 	.word	0x08006920

080034dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80034e2:	f7ff ffcd 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 80034e6:	4601      	mov	r1, r0
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80034f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80034f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	fa92 f2a2 	rbit	r2, r2
 80034fc:	603a      	str	r2, [r7, #0]
  return result;
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	fab2 f282 	clz	r2, r2
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	40d3      	lsrs	r3, r2
 8003508:	4a04      	ldr	r2, [pc, #16]	; (800351c <HAL_RCC_GetPCLK2Freq+0x40>)
 800350a:	5cd3      	ldrb	r3, [r2, r3]
 800350c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40021000 	.word	0x40021000
 800351c:	08006920 	.word	0x08006920

08003520 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b092      	sub	sp, #72	; 0x48
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003530:	2300      	movs	r3, #0
 8003532:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 80d4 	beq.w	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003544:	4b4e      	ldr	r3, [pc, #312]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10e      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003550:	4b4b      	ldr	r3, [pc, #300]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	4a4a      	ldr	r2, [pc, #296]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355a:	61d3      	str	r3, [r2, #28]
 800355c:	4b48      	ldr	r3, [pc, #288]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003568:	2301      	movs	r3, #1
 800356a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356e:	4b45      	ldr	r3, [pc, #276]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003576:	2b00      	cmp	r3, #0
 8003578:	d118      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800357a:	4b42      	ldr	r3, [pc, #264]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a41      	ldr	r2, [pc, #260]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003584:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003586:	f7fd ffad 	bl	80014e4 <HAL_GetTick>
 800358a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	e008      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358e:	f7fd ffa9 	bl	80014e4 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b64      	cmp	r3, #100	; 0x64
 800359a:	d901      	bls.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e1d6      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a0:	4b38      	ldr	r3, [pc, #224]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035ac:	4b34      	ldr	r3, [pc, #208]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8084 	beq.w	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d07c      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035cc:	4b2c      	ldr	r3, [pc, #176]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035de:	fa93 f3a3 	rbit	r3, r3
 80035e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035e6:	fab3 f383 	clz	r3, r3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	4b26      	ldr	r3, [pc, #152]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	461a      	mov	r2, r3
 80035f6:	2301      	movs	r3, #1
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800360a:	fab3 f383 	clz	r3, r3
 800360e:	b2db      	uxtb	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	461a      	mov	r2, r3
 800361a:	2300      	movs	r3, #0
 800361c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800361e:	4a18      	ldr	r2, [pc, #96]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003622:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d04b      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362e:	f7fd ff59 	bl	80014e4 <HAL_GetTick>
 8003632:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003634:	e00a      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003636:	f7fd ff55 	bl	80014e4 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	f241 3288 	movw	r2, #5000	; 0x1388
 8003644:	4293      	cmp	r3, r2
 8003646:	d901      	bls.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e180      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800364c:	2302      	movs	r3, #2
 800364e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003652:	fa93 f3a3 	rbit	r3, r3
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
 8003658:	2302      	movs	r3, #2
 800365a:	623b      	str	r3, [r7, #32]
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	fa93 f3a3 	rbit	r3, r3
 8003662:	61fb      	str	r3, [r7, #28]
  return result;
 8003664:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003666:	fab3 f383 	clz	r3, r3
 800366a:	b2db      	uxtb	r3, r3
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	b2db      	uxtb	r3, r3
 8003670:	f043 0302 	orr.w	r3, r3, #2
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d108      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800367a:	4b01      	ldr	r3, [pc, #4]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	e00d      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003680:	40021000 	.word	0x40021000
 8003684:	40007000 	.word	0x40007000
 8003688:	10908100 	.word	0x10908100
 800368c:	2302      	movs	r3, #2
 800368e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	fa93 f3a3 	rbit	r3, r3
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	4ba0      	ldr	r3, [pc, #640]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	2202      	movs	r2, #2
 800369e:	613a      	str	r2, [r7, #16]
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	fa92 f2a2 	rbit	r2, r2
 80036a6:	60fa      	str	r2, [r7, #12]
  return result;
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	fab2 f282 	clz	r2, r2
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	f002 021f 	and.w	r2, r2, #31
 80036ba:	2101      	movs	r1, #1
 80036bc:	fa01 f202 	lsl.w	r2, r1, r2
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0b7      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036c6:	4b95      	ldr	r3, [pc, #596]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	4992      	ldr	r1, [pc, #584]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d105      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e0:	4b8e      	ldr	r3, [pc, #568]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	4a8d      	ldr	r2, [pc, #564]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036f8:	4b88      	ldr	r3, [pc, #544]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	f023 0203 	bic.w	r2, r3, #3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	4985      	ldr	r1, [pc, #532]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003706:	4313      	orrs	r3, r2
 8003708:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d008      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003716:	4b81      	ldr	r3, [pc, #516]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	497e      	ldr	r1, [pc, #504]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003724:	4313      	orrs	r3, r2
 8003726:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003734:	4b79      	ldr	r3, [pc, #484]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	4976      	ldr	r1, [pc, #472]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003742:	4313      	orrs	r3, r2
 8003744:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d008      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003752:	4b72      	ldr	r3, [pc, #456]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	f023 0210 	bic.w	r2, r3, #16
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	496f      	ldr	r1, [pc, #444]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003760:	4313      	orrs	r3, r2
 8003762:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003770:	4b6a      	ldr	r3, [pc, #424]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377c:	4967      	ldr	r1, [pc, #412]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800377e:	4313      	orrs	r3, r2
 8003780:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d008      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800378e:	4b63      	ldr	r3, [pc, #396]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	f023 0220 	bic.w	r2, r3, #32
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	4960      	ldr	r1, [pc, #384]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800379c:	4313      	orrs	r3, r2
 800379e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037ac:	4b5b      	ldr	r3, [pc, #364]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	4958      	ldr	r1, [pc, #352]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d008      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037ca:	4b54      	ldr	r3, [pc, #336]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	4951      	ldr	r1, [pc, #324]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037e8:	4b4c      	ldr	r3, [pc, #304]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	4949      	ldr	r1, [pc, #292]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003802:	2b00      	cmp	r3, #0
 8003804:	d008      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003806:	4b45      	ldr	r3, [pc, #276]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	4942      	ldr	r1, [pc, #264]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003824:	4b3d      	ldr	r3, [pc, #244]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	493a      	ldr	r1, [pc, #232]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383e:	2b00      	cmp	r3, #0
 8003840:	d008      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003842:	4b36      	ldr	r3, [pc, #216]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003846:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	4933      	ldr	r1, [pc, #204]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003850:	4313      	orrs	r3, r2
 8003852:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003860:	4b2e      	ldr	r3, [pc, #184]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003864:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386c:	492b      	ldr	r1, [pc, #172]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800386e:	4313      	orrs	r3, r2
 8003870:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d008      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800387e:	4b27      	ldr	r3, [pc, #156]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	4924      	ldr	r1, [pc, #144]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800388c:	4313      	orrs	r3, r2
 800388e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800389c:	4b1f      	ldr	r3, [pc, #124]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	491c      	ldr	r1, [pc, #112]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80038ba:	4b18      	ldr	r3, [pc, #96]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c6:	4915      	ldr	r1, [pc, #84]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80038d8:	4b10      	ldr	r3, [pc, #64]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	490d      	ldr	r1, [pc, #52]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d008      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80038f6:	4b09      	ldr	r3, [pc, #36]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003902:	4906      	ldr	r1, [pc, #24]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003904:	4313      	orrs	r3, r2
 8003906:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00c      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003914:	4b01      	ldr	r3, [pc, #4]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	e002      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800391a:	bf00      	nop
 800391c:	40021000 	.word	0x40021000
 8003920:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003928:	490b      	ldr	r1, [pc, #44]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800392a:	4313      	orrs	r3, r2
 800392c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d008      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800393a:	4b07      	ldr	r3, [pc, #28]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003946:	4904      	ldr	r1, [pc, #16]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003948:	4313      	orrs	r3, r2
 800394a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3748      	adds	r7, #72	; 0x48
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000

0800395c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e040      	b.n	80039f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fd fcd6 	bl	8001330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2224      	movs	r2, #36	; 0x24
 8003988:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0201 	bic.w	r2, r2, #1
 8003998:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f8c0 	bl	8003b20 <UART_SetConfig>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e022      	b.n	80039f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fa88 	bl	8003ec8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fb0f 	bl	800400c <UART_CheckIdleState>
 80039ee:	4603      	mov	r3, r0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08a      	sub	sp, #40	; 0x28
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	f040 8082 	bne.w	8003b16 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <HAL_UART_Transmit+0x26>
 8003a18:	88fb      	ldrh	r3, [r7, #6]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e07a      	b.n	8003b18 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_UART_Transmit+0x38>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e073      	b.n	8003b18 <HAL_UART_Transmit+0x120>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2221      	movs	r2, #33	; 0x21
 8003a44:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a46:	f7fd fd4d 	bl	80014e4 <HAL_GetTick>
 8003a4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	88fa      	ldrh	r2, [r7, #6]
 8003a50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	88fa      	ldrh	r2, [r7, #6]
 8003a58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a64:	d108      	bne.n	8003a78 <HAL_UART_Transmit+0x80>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d104      	bne.n	8003a78 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	e003      	b.n	8003a80 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003a88:	e02d      	b.n	8003ae6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2200      	movs	r2, #0
 8003a92:	2180      	movs	r1, #128	; 0x80
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 fb02 	bl	800409e <UART_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e039      	b.n	8003b18 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10b      	bne.n	8003ac2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	881a      	ldrh	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ab6:	b292      	uxth	r2, r2
 8003ab8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	3302      	adds	r3, #2
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	e008      	b.n	8003ad4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	781a      	ldrb	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	b292      	uxth	r2, r2
 8003acc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1cb      	bne.n	8003a8a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2200      	movs	r2, #0
 8003afa:	2140      	movs	r1, #64	; 0x40
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 face 	bl	800409e <UART_WaitOnFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e005      	b.n	8003b18 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	e000      	b.n	8003b18 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003b16:	2302      	movs	r3, #2
  }
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3720      	adds	r7, #32
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b088      	sub	sp, #32
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	4baa      	ldr	r3, [pc, #680]	; (8003df4 <UART_SetConfig+0x2d4>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6812      	ldr	r2, [r2, #0]
 8003b52:	6979      	ldr	r1, [r7, #20]
 8003b54:	430b      	orrs	r3, r1
 8003b56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a98      	ldr	r2, [pc, #608]	; (8003df8 <UART_SetConfig+0x2d8>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d121      	bne.n	8003be0 <UART_SetConfig+0xc0>
 8003b9c:	4b97      	ldr	r3, [pc, #604]	; (8003dfc <UART_SetConfig+0x2dc>)
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d817      	bhi.n	8003bd8 <UART_SetConfig+0xb8>
 8003ba8:	a201      	add	r2, pc, #4	; (adr r2, 8003bb0 <UART_SetConfig+0x90>)
 8003baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bae:	bf00      	nop
 8003bb0:	08003bc1 	.word	0x08003bc1
 8003bb4:	08003bcd 	.word	0x08003bcd
 8003bb8:	08003bd3 	.word	0x08003bd3
 8003bbc:	08003bc7 	.word	0x08003bc7
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	77fb      	strb	r3, [r7, #31]
 8003bc4:	e0b2      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	77fb      	strb	r3, [r7, #31]
 8003bca:	e0af      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003bcc:	2304      	movs	r3, #4
 8003bce:	77fb      	strb	r3, [r7, #31]
 8003bd0:	e0ac      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003bd2:	2308      	movs	r3, #8
 8003bd4:	77fb      	strb	r3, [r7, #31]
 8003bd6:	e0a9      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003bd8:	2310      	movs	r3, #16
 8003bda:	77fb      	strb	r3, [r7, #31]
 8003bdc:	bf00      	nop
 8003bde:	e0a5      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a86      	ldr	r2, [pc, #536]	; (8003e00 <UART_SetConfig+0x2e0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d123      	bne.n	8003c32 <UART_SetConfig+0x112>
 8003bea:	4b84      	ldr	r3, [pc, #528]	; (8003dfc <UART_SetConfig+0x2dc>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf6:	d012      	beq.n	8003c1e <UART_SetConfig+0xfe>
 8003bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bfc:	d802      	bhi.n	8003c04 <UART_SetConfig+0xe4>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d007      	beq.n	8003c12 <UART_SetConfig+0xf2>
 8003c02:	e012      	b.n	8003c2a <UART_SetConfig+0x10a>
 8003c04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c08:	d00c      	beq.n	8003c24 <UART_SetConfig+0x104>
 8003c0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c0e:	d003      	beq.n	8003c18 <UART_SetConfig+0xf8>
 8003c10:	e00b      	b.n	8003c2a <UART_SetConfig+0x10a>
 8003c12:	2300      	movs	r3, #0
 8003c14:	77fb      	strb	r3, [r7, #31]
 8003c16:	e089      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	77fb      	strb	r3, [r7, #31]
 8003c1c:	e086      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003c1e:	2304      	movs	r3, #4
 8003c20:	77fb      	strb	r3, [r7, #31]
 8003c22:	e083      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003c24:	2308      	movs	r3, #8
 8003c26:	77fb      	strb	r3, [r7, #31]
 8003c28:	e080      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003c2a:	2310      	movs	r3, #16
 8003c2c:	77fb      	strb	r3, [r7, #31]
 8003c2e:	bf00      	nop
 8003c30:	e07c      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a73      	ldr	r2, [pc, #460]	; (8003e04 <UART_SetConfig+0x2e4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d123      	bne.n	8003c84 <UART_SetConfig+0x164>
 8003c3c:	4b6f      	ldr	r3, [pc, #444]	; (8003dfc <UART_SetConfig+0x2dc>)
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003c44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c48:	d012      	beq.n	8003c70 <UART_SetConfig+0x150>
 8003c4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c4e:	d802      	bhi.n	8003c56 <UART_SetConfig+0x136>
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d007      	beq.n	8003c64 <UART_SetConfig+0x144>
 8003c54:	e012      	b.n	8003c7c <UART_SetConfig+0x15c>
 8003c56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c5a:	d00c      	beq.n	8003c76 <UART_SetConfig+0x156>
 8003c5c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c60:	d003      	beq.n	8003c6a <UART_SetConfig+0x14a>
 8003c62:	e00b      	b.n	8003c7c <UART_SetConfig+0x15c>
 8003c64:	2300      	movs	r3, #0
 8003c66:	77fb      	strb	r3, [r7, #31]
 8003c68:	e060      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	77fb      	strb	r3, [r7, #31]
 8003c6e:	e05d      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003c70:	2304      	movs	r3, #4
 8003c72:	77fb      	strb	r3, [r7, #31]
 8003c74:	e05a      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003c76:	2308      	movs	r3, #8
 8003c78:	77fb      	strb	r3, [r7, #31]
 8003c7a:	e057      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003c7c:	2310      	movs	r3, #16
 8003c7e:	77fb      	strb	r3, [r7, #31]
 8003c80:	bf00      	nop
 8003c82:	e053      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a5f      	ldr	r2, [pc, #380]	; (8003e08 <UART_SetConfig+0x2e8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d123      	bne.n	8003cd6 <UART_SetConfig+0x1b6>
 8003c8e:	4b5b      	ldr	r3, [pc, #364]	; (8003dfc <UART_SetConfig+0x2dc>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c9a:	d012      	beq.n	8003cc2 <UART_SetConfig+0x1a2>
 8003c9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ca0:	d802      	bhi.n	8003ca8 <UART_SetConfig+0x188>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <UART_SetConfig+0x196>
 8003ca6:	e012      	b.n	8003cce <UART_SetConfig+0x1ae>
 8003ca8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cac:	d00c      	beq.n	8003cc8 <UART_SetConfig+0x1a8>
 8003cae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cb2:	d003      	beq.n	8003cbc <UART_SetConfig+0x19c>
 8003cb4:	e00b      	b.n	8003cce <UART_SetConfig+0x1ae>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	77fb      	strb	r3, [r7, #31]
 8003cba:	e037      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	77fb      	strb	r3, [r7, #31]
 8003cc0:	e034      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003cc2:	2304      	movs	r3, #4
 8003cc4:	77fb      	strb	r3, [r7, #31]
 8003cc6:	e031      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003cc8:	2308      	movs	r3, #8
 8003cca:	77fb      	strb	r3, [r7, #31]
 8003ccc:	e02e      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003cce:	2310      	movs	r3, #16
 8003cd0:	77fb      	strb	r3, [r7, #31]
 8003cd2:	bf00      	nop
 8003cd4:	e02a      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a4c      	ldr	r2, [pc, #304]	; (8003e0c <UART_SetConfig+0x2ec>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d123      	bne.n	8003d28 <UART_SetConfig+0x208>
 8003ce0:	4b46      	ldr	r3, [pc, #280]	; (8003dfc <UART_SetConfig+0x2dc>)
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003ce8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cec:	d012      	beq.n	8003d14 <UART_SetConfig+0x1f4>
 8003cee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cf2:	d802      	bhi.n	8003cfa <UART_SetConfig+0x1da>
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <UART_SetConfig+0x1e8>
 8003cf8:	e012      	b.n	8003d20 <UART_SetConfig+0x200>
 8003cfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cfe:	d00c      	beq.n	8003d1a <UART_SetConfig+0x1fa>
 8003d00:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d04:	d003      	beq.n	8003d0e <UART_SetConfig+0x1ee>
 8003d06:	e00b      	b.n	8003d20 <UART_SetConfig+0x200>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	77fb      	strb	r3, [r7, #31]
 8003d0c:	e00e      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	77fb      	strb	r3, [r7, #31]
 8003d12:	e00b      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003d14:	2304      	movs	r3, #4
 8003d16:	77fb      	strb	r3, [r7, #31]
 8003d18:	e008      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003d1a:	2308      	movs	r3, #8
 8003d1c:	77fb      	strb	r3, [r7, #31]
 8003d1e:	e005      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003d20:	2310      	movs	r3, #16
 8003d22:	77fb      	strb	r3, [r7, #31]
 8003d24:	bf00      	nop
 8003d26:	e001      	b.n	8003d2c <UART_SetConfig+0x20c>
 8003d28:	2310      	movs	r3, #16
 8003d2a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d34:	d16e      	bne.n	8003e14 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003d36:	7ffb      	ldrb	r3, [r7, #31]
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d828      	bhi.n	8003d8e <UART_SetConfig+0x26e>
 8003d3c:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <UART_SetConfig+0x224>)
 8003d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d42:	bf00      	nop
 8003d44:	08003d69 	.word	0x08003d69
 8003d48:	08003d71 	.word	0x08003d71
 8003d4c:	08003d79 	.word	0x08003d79
 8003d50:	08003d8f 	.word	0x08003d8f
 8003d54:	08003d7f 	.word	0x08003d7f
 8003d58:	08003d8f 	.word	0x08003d8f
 8003d5c:	08003d8f 	.word	0x08003d8f
 8003d60:	08003d8f 	.word	0x08003d8f
 8003d64:	08003d87 	.word	0x08003d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d68:	f7ff fb96 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 8003d6c:	61b8      	str	r0, [r7, #24]
        break;
 8003d6e:	e013      	b.n	8003d98 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d70:	f7ff fbb4 	bl	80034dc <HAL_RCC_GetPCLK2Freq>
 8003d74:	61b8      	str	r0, [r7, #24]
        break;
 8003d76:	e00f      	b.n	8003d98 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d78:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <UART_SetConfig+0x2f0>)
 8003d7a:	61bb      	str	r3, [r7, #24]
        break;
 8003d7c:	e00c      	b.n	8003d98 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d7e:	f7ff fb13 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8003d82:	61b8      	str	r0, [r7, #24]
        break;
 8003d84:	e008      	b.n	8003d98 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d8a:	61bb      	str	r3, [r7, #24]
        break;
 8003d8c:	e004      	b.n	8003d98 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	77bb      	strb	r3, [r7, #30]
        break;
 8003d96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 8086 	beq.w	8003eac <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	005a      	lsls	r2, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	085b      	lsrs	r3, r3, #1
 8003daa:	441a      	add	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	2b0f      	cmp	r3, #15
 8003dbc:	d916      	bls.n	8003dec <UART_SetConfig+0x2cc>
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc4:	d212      	bcs.n	8003dec <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	f023 030f 	bic.w	r3, r3, #15
 8003dce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	085b      	lsrs	r3, r3, #1
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	89fb      	ldrh	r3, [r7, #14]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	89fa      	ldrh	r2, [r7, #14]
 8003de8:	60da      	str	r2, [r3, #12]
 8003dea:	e05f      	b.n	8003eac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	77bb      	strb	r3, [r7, #30]
 8003df0:	e05c      	b.n	8003eac <UART_SetConfig+0x38c>
 8003df2:	bf00      	nop
 8003df4:	efff69f3 	.word	0xefff69f3
 8003df8:	40013800 	.word	0x40013800
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	40004400 	.word	0x40004400
 8003e04:	40004800 	.word	0x40004800
 8003e08:	40004c00 	.word	0x40004c00
 8003e0c:	40005000 	.word	0x40005000
 8003e10:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e14:	7ffb      	ldrb	r3, [r7, #31]
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d827      	bhi.n	8003e6a <UART_SetConfig+0x34a>
 8003e1a:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <UART_SetConfig+0x300>)
 8003e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e20:	08003e45 	.word	0x08003e45
 8003e24:	08003e4d 	.word	0x08003e4d
 8003e28:	08003e55 	.word	0x08003e55
 8003e2c:	08003e6b 	.word	0x08003e6b
 8003e30:	08003e5b 	.word	0x08003e5b
 8003e34:	08003e6b 	.word	0x08003e6b
 8003e38:	08003e6b 	.word	0x08003e6b
 8003e3c:	08003e6b 	.word	0x08003e6b
 8003e40:	08003e63 	.word	0x08003e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e44:	f7ff fb28 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 8003e48:	61b8      	str	r0, [r7, #24]
        break;
 8003e4a:	e013      	b.n	8003e74 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e4c:	f7ff fb46 	bl	80034dc <HAL_RCC_GetPCLK2Freq>
 8003e50:	61b8      	str	r0, [r7, #24]
        break;
 8003e52:	e00f      	b.n	8003e74 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e54:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <UART_SetConfig+0x3a4>)
 8003e56:	61bb      	str	r3, [r7, #24]
        break;
 8003e58:	e00c      	b.n	8003e74 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e5a:	f7ff faa5 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8003e5e:	61b8      	str	r0, [r7, #24]
        break;
 8003e60:	e008      	b.n	8003e74 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e66:	61bb      	str	r3, [r7, #24]
        break;
 8003e68:	e004      	b.n	8003e74 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	77bb      	strb	r3, [r7, #30]
        break;
 8003e72:	bf00      	nop
    }

    if (pclk != 0U)
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d018      	beq.n	8003eac <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	085a      	lsrs	r2, r3, #1
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	441a      	add	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b0f      	cmp	r3, #15
 8003e94:	d908      	bls.n	8003ea8 <UART_SetConfig+0x388>
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9c:	d204      	bcs.n	8003ea8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	60da      	str	r2, [r3, #12]
 8003ea6:	e001      	b.n	8003eac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003eb8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3720      	adds	r7, #32
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	007a1200 	.word	0x007a1200

08003ec8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01a      	beq.n	8003fde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fc6:	d10a      	bne.n	8003fde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	605a      	str	r2, [r3, #4]
  }
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af02      	add	r7, sp, #8
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800401c:	f7fd fa62 	bl	80014e4 <HAL_GetTick>
 8004020:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b08      	cmp	r3, #8
 800402e:	d10e      	bne.n	800404e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004030:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f82d 	bl	800409e <UART_WaitOnFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e023      	b.n	8004096 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b04      	cmp	r3, #4
 800405a:	d10e      	bne.n	800407a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800405c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f817 	bl	800409e <UART_WaitOnFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e00d      	b.n	8004096 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b09c      	sub	sp, #112	; 0x70
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	603b      	str	r3, [r7, #0]
 80040aa:	4613      	mov	r3, r2
 80040ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ae:	e0a5      	b.n	80041fc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040b6:	f000 80a1 	beq.w	80041fc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ba:	f7fd fa13 	bl	80014e4 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d302      	bcc.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80040ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d13e      	bne.n	800414e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80040de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040e4:	667b      	str	r3, [r7, #100]	; 0x64
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80040fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e6      	bne.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3308      	adds	r3, #8
 8004108:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004114:	f023 0301 	bic.w	r3, r3, #1
 8004118:	663b      	str	r3, [r7, #96]	; 0x60
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3308      	adds	r3, #8
 8004120:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004122:	64ba      	str	r2, [r7, #72]	; 0x48
 8004124:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004126:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800412a:	e841 2300 	strex	r3, r2, [r1]
 800412e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1e5      	bne.n	8004102 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e067      	b.n	800421e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d04f      	beq.n	80041fc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800416a:	d147      	bne.n	80041fc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004174:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800418a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004194:	637b      	str	r3, [r7, #52]	; 0x34
 8004196:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800419a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e6      	bne.n	8004176 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3308      	adds	r3, #8
 80041ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	e853 3f00 	ldrex	r3, [r3]
 80041b6:	613b      	str	r3, [r7, #16]
   return(result);
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f023 0301 	bic.w	r3, r3, #1
 80041be:	66bb      	str	r3, [r7, #104]	; 0x68
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3308      	adds	r3, #8
 80041c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041c8:	623a      	str	r2, [r7, #32]
 80041ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041cc:	69f9      	ldr	r1, [r7, #28]
 80041ce:	6a3a      	ldr	r2, [r7, #32]
 80041d0:	e841 2300 	strex	r3, r2, [r1]
 80041d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e5      	bne.n	80041a8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2220      	movs	r2, #32
 80041e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e010      	b.n	800421e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	69da      	ldr	r2, [r3, #28]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	4013      	ands	r3, r2
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	429a      	cmp	r2, r3
 800420a:	bf0c      	ite	eq
 800420c:	2301      	moveq	r3, #1
 800420e:	2300      	movne	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	461a      	mov	r2, r3
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	429a      	cmp	r2, r3
 8004218:	f43f af4a 	beq.w	80040b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3770      	adds	r7, #112	; 0x70
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <__errno>:
 8004228:	4b01      	ldr	r3, [pc, #4]	; (8004230 <__errno+0x8>)
 800422a:	6818      	ldr	r0, [r3, #0]
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	2000000c 	.word	0x2000000c

08004234 <__libc_init_array>:
 8004234:	b570      	push	{r4, r5, r6, lr}
 8004236:	4e0d      	ldr	r6, [pc, #52]	; (800426c <__libc_init_array+0x38>)
 8004238:	4c0d      	ldr	r4, [pc, #52]	; (8004270 <__libc_init_array+0x3c>)
 800423a:	1ba4      	subs	r4, r4, r6
 800423c:	10a4      	asrs	r4, r4, #2
 800423e:	2500      	movs	r5, #0
 8004240:	42a5      	cmp	r5, r4
 8004242:	d109      	bne.n	8004258 <__libc_init_array+0x24>
 8004244:	4e0b      	ldr	r6, [pc, #44]	; (8004274 <__libc_init_array+0x40>)
 8004246:	4c0c      	ldr	r4, [pc, #48]	; (8004278 <__libc_init_array+0x44>)
 8004248:	f002 fb4a 	bl	80068e0 <_init>
 800424c:	1ba4      	subs	r4, r4, r6
 800424e:	10a4      	asrs	r4, r4, #2
 8004250:	2500      	movs	r5, #0
 8004252:	42a5      	cmp	r5, r4
 8004254:	d105      	bne.n	8004262 <__libc_init_array+0x2e>
 8004256:	bd70      	pop	{r4, r5, r6, pc}
 8004258:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800425c:	4798      	blx	r3
 800425e:	3501      	adds	r5, #1
 8004260:	e7ee      	b.n	8004240 <__libc_init_array+0xc>
 8004262:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004266:	4798      	blx	r3
 8004268:	3501      	adds	r5, #1
 800426a:	e7f2      	b.n	8004252 <__libc_init_array+0x1e>
 800426c:	08006c08 	.word	0x08006c08
 8004270:	08006c08 	.word	0x08006c08
 8004274:	08006c08 	.word	0x08006c08
 8004278:	08006c0c 	.word	0x08006c0c

0800427c <memcpy>:
 800427c:	b510      	push	{r4, lr}
 800427e:	1e43      	subs	r3, r0, #1
 8004280:	440a      	add	r2, r1
 8004282:	4291      	cmp	r1, r2
 8004284:	d100      	bne.n	8004288 <memcpy+0xc>
 8004286:	bd10      	pop	{r4, pc}
 8004288:	f811 4b01 	ldrb.w	r4, [r1], #1
 800428c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004290:	e7f7      	b.n	8004282 <memcpy+0x6>

08004292 <memset>:
 8004292:	4402      	add	r2, r0
 8004294:	4603      	mov	r3, r0
 8004296:	4293      	cmp	r3, r2
 8004298:	d100      	bne.n	800429c <memset+0xa>
 800429a:	4770      	bx	lr
 800429c:	f803 1b01 	strb.w	r1, [r3], #1
 80042a0:	e7f9      	b.n	8004296 <memset+0x4>

080042a2 <__cvt>:
 80042a2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042a6:	ec55 4b10 	vmov	r4, r5, d0
 80042aa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80042ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80042b0:	2d00      	cmp	r5, #0
 80042b2:	460e      	mov	r6, r1
 80042b4:	4691      	mov	r9, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	bfb8      	it	lt
 80042ba:	4622      	movlt	r2, r4
 80042bc:	462b      	mov	r3, r5
 80042be:	f027 0720 	bic.w	r7, r7, #32
 80042c2:	bfbb      	ittet	lt
 80042c4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80042c8:	461d      	movlt	r5, r3
 80042ca:	2300      	movge	r3, #0
 80042cc:	232d      	movlt	r3, #45	; 0x2d
 80042ce:	bfb8      	it	lt
 80042d0:	4614      	movlt	r4, r2
 80042d2:	2f46      	cmp	r7, #70	; 0x46
 80042d4:	700b      	strb	r3, [r1, #0]
 80042d6:	d004      	beq.n	80042e2 <__cvt+0x40>
 80042d8:	2f45      	cmp	r7, #69	; 0x45
 80042da:	d100      	bne.n	80042de <__cvt+0x3c>
 80042dc:	3601      	adds	r6, #1
 80042de:	2102      	movs	r1, #2
 80042e0:	e000      	b.n	80042e4 <__cvt+0x42>
 80042e2:	2103      	movs	r1, #3
 80042e4:	ab03      	add	r3, sp, #12
 80042e6:	9301      	str	r3, [sp, #4]
 80042e8:	ab02      	add	r3, sp, #8
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	4632      	mov	r2, r6
 80042ee:	4653      	mov	r3, sl
 80042f0:	ec45 4b10 	vmov	d0, r4, r5
 80042f4:	f000 fcd8 	bl	8004ca8 <_dtoa_r>
 80042f8:	2f47      	cmp	r7, #71	; 0x47
 80042fa:	4680      	mov	r8, r0
 80042fc:	d102      	bne.n	8004304 <__cvt+0x62>
 80042fe:	f019 0f01 	tst.w	r9, #1
 8004302:	d026      	beq.n	8004352 <__cvt+0xb0>
 8004304:	2f46      	cmp	r7, #70	; 0x46
 8004306:	eb08 0906 	add.w	r9, r8, r6
 800430a:	d111      	bne.n	8004330 <__cvt+0x8e>
 800430c:	f898 3000 	ldrb.w	r3, [r8]
 8004310:	2b30      	cmp	r3, #48	; 0x30
 8004312:	d10a      	bne.n	800432a <__cvt+0x88>
 8004314:	2200      	movs	r2, #0
 8004316:	2300      	movs	r3, #0
 8004318:	4620      	mov	r0, r4
 800431a:	4629      	mov	r1, r5
 800431c:	f7fc fbdc 	bl	8000ad8 <__aeabi_dcmpeq>
 8004320:	b918      	cbnz	r0, 800432a <__cvt+0x88>
 8004322:	f1c6 0601 	rsb	r6, r6, #1
 8004326:	f8ca 6000 	str.w	r6, [sl]
 800432a:	f8da 3000 	ldr.w	r3, [sl]
 800432e:	4499      	add	r9, r3
 8004330:	2200      	movs	r2, #0
 8004332:	2300      	movs	r3, #0
 8004334:	4620      	mov	r0, r4
 8004336:	4629      	mov	r1, r5
 8004338:	f7fc fbce 	bl	8000ad8 <__aeabi_dcmpeq>
 800433c:	b938      	cbnz	r0, 800434e <__cvt+0xac>
 800433e:	2230      	movs	r2, #48	; 0x30
 8004340:	9b03      	ldr	r3, [sp, #12]
 8004342:	454b      	cmp	r3, r9
 8004344:	d205      	bcs.n	8004352 <__cvt+0xb0>
 8004346:	1c59      	adds	r1, r3, #1
 8004348:	9103      	str	r1, [sp, #12]
 800434a:	701a      	strb	r2, [r3, #0]
 800434c:	e7f8      	b.n	8004340 <__cvt+0x9e>
 800434e:	f8cd 900c 	str.w	r9, [sp, #12]
 8004352:	9b03      	ldr	r3, [sp, #12]
 8004354:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004356:	eba3 0308 	sub.w	r3, r3, r8
 800435a:	4640      	mov	r0, r8
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	b004      	add	sp, #16
 8004360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004364 <__exponent>:
 8004364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004366:	2900      	cmp	r1, #0
 8004368:	4604      	mov	r4, r0
 800436a:	bfba      	itte	lt
 800436c:	4249      	neglt	r1, r1
 800436e:	232d      	movlt	r3, #45	; 0x2d
 8004370:	232b      	movge	r3, #43	; 0x2b
 8004372:	2909      	cmp	r1, #9
 8004374:	f804 2b02 	strb.w	r2, [r4], #2
 8004378:	7043      	strb	r3, [r0, #1]
 800437a:	dd20      	ble.n	80043be <__exponent+0x5a>
 800437c:	f10d 0307 	add.w	r3, sp, #7
 8004380:	461f      	mov	r7, r3
 8004382:	260a      	movs	r6, #10
 8004384:	fb91 f5f6 	sdiv	r5, r1, r6
 8004388:	fb06 1115 	mls	r1, r6, r5, r1
 800438c:	3130      	adds	r1, #48	; 0x30
 800438e:	2d09      	cmp	r5, #9
 8004390:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004394:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004398:	4629      	mov	r1, r5
 800439a:	dc09      	bgt.n	80043b0 <__exponent+0x4c>
 800439c:	3130      	adds	r1, #48	; 0x30
 800439e:	3b02      	subs	r3, #2
 80043a0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80043a4:	42bb      	cmp	r3, r7
 80043a6:	4622      	mov	r2, r4
 80043a8:	d304      	bcc.n	80043b4 <__exponent+0x50>
 80043aa:	1a10      	subs	r0, r2, r0
 80043ac:	b003      	add	sp, #12
 80043ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043b0:	4613      	mov	r3, r2
 80043b2:	e7e7      	b.n	8004384 <__exponent+0x20>
 80043b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043b8:	f804 2b01 	strb.w	r2, [r4], #1
 80043bc:	e7f2      	b.n	80043a4 <__exponent+0x40>
 80043be:	2330      	movs	r3, #48	; 0x30
 80043c0:	4419      	add	r1, r3
 80043c2:	7083      	strb	r3, [r0, #2]
 80043c4:	1d02      	adds	r2, r0, #4
 80043c6:	70c1      	strb	r1, [r0, #3]
 80043c8:	e7ef      	b.n	80043aa <__exponent+0x46>
	...

080043cc <_printf_float>:
 80043cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d0:	b08d      	sub	sp, #52	; 0x34
 80043d2:	460c      	mov	r4, r1
 80043d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80043d8:	4616      	mov	r6, r2
 80043da:	461f      	mov	r7, r3
 80043dc:	4605      	mov	r5, r0
 80043de:	f001 fae5 	bl	80059ac <_localeconv_r>
 80043e2:	6803      	ldr	r3, [r0, #0]
 80043e4:	9304      	str	r3, [sp, #16]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fb fefa 	bl	80001e0 <strlen>
 80043ec:	2300      	movs	r3, #0
 80043ee:	930a      	str	r3, [sp, #40]	; 0x28
 80043f0:	f8d8 3000 	ldr.w	r3, [r8]
 80043f4:	9005      	str	r0, [sp, #20]
 80043f6:	3307      	adds	r3, #7
 80043f8:	f023 0307 	bic.w	r3, r3, #7
 80043fc:	f103 0208 	add.w	r2, r3, #8
 8004400:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004404:	f8d4 b000 	ldr.w	fp, [r4]
 8004408:	f8c8 2000 	str.w	r2, [r8]
 800440c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004410:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004414:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004418:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800441c:	9307      	str	r3, [sp, #28]
 800441e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004426:	4ba7      	ldr	r3, [pc, #668]	; (80046c4 <_printf_float+0x2f8>)
 8004428:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800442c:	f7fc fb86 	bl	8000b3c <__aeabi_dcmpun>
 8004430:	bb70      	cbnz	r0, 8004490 <_printf_float+0xc4>
 8004432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004436:	4ba3      	ldr	r3, [pc, #652]	; (80046c4 <_printf_float+0x2f8>)
 8004438:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800443c:	f7fc fb60 	bl	8000b00 <__aeabi_dcmple>
 8004440:	bb30      	cbnz	r0, 8004490 <_printf_float+0xc4>
 8004442:	2200      	movs	r2, #0
 8004444:	2300      	movs	r3, #0
 8004446:	4640      	mov	r0, r8
 8004448:	4649      	mov	r1, r9
 800444a:	f7fc fb4f 	bl	8000aec <__aeabi_dcmplt>
 800444e:	b110      	cbz	r0, 8004456 <_printf_float+0x8a>
 8004450:	232d      	movs	r3, #45	; 0x2d
 8004452:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004456:	4a9c      	ldr	r2, [pc, #624]	; (80046c8 <_printf_float+0x2fc>)
 8004458:	4b9c      	ldr	r3, [pc, #624]	; (80046cc <_printf_float+0x300>)
 800445a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800445e:	bf8c      	ite	hi
 8004460:	4690      	movhi	r8, r2
 8004462:	4698      	movls	r8, r3
 8004464:	2303      	movs	r3, #3
 8004466:	f02b 0204 	bic.w	r2, fp, #4
 800446a:	6123      	str	r3, [r4, #16]
 800446c:	6022      	str	r2, [r4, #0]
 800446e:	f04f 0900 	mov.w	r9, #0
 8004472:	9700      	str	r7, [sp, #0]
 8004474:	4633      	mov	r3, r6
 8004476:	aa0b      	add	r2, sp, #44	; 0x2c
 8004478:	4621      	mov	r1, r4
 800447a:	4628      	mov	r0, r5
 800447c:	f000 f9e6 	bl	800484c <_printf_common>
 8004480:	3001      	adds	r0, #1
 8004482:	f040 808d 	bne.w	80045a0 <_printf_float+0x1d4>
 8004486:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800448a:	b00d      	add	sp, #52	; 0x34
 800448c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004490:	4642      	mov	r2, r8
 8004492:	464b      	mov	r3, r9
 8004494:	4640      	mov	r0, r8
 8004496:	4649      	mov	r1, r9
 8004498:	f7fc fb50 	bl	8000b3c <__aeabi_dcmpun>
 800449c:	b110      	cbz	r0, 80044a4 <_printf_float+0xd8>
 800449e:	4a8c      	ldr	r2, [pc, #560]	; (80046d0 <_printf_float+0x304>)
 80044a0:	4b8c      	ldr	r3, [pc, #560]	; (80046d4 <_printf_float+0x308>)
 80044a2:	e7da      	b.n	800445a <_printf_float+0x8e>
 80044a4:	6861      	ldr	r1, [r4, #4]
 80044a6:	1c4b      	adds	r3, r1, #1
 80044a8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80044ac:	a80a      	add	r0, sp, #40	; 0x28
 80044ae:	d13e      	bne.n	800452e <_printf_float+0x162>
 80044b0:	2306      	movs	r3, #6
 80044b2:	6063      	str	r3, [r4, #4]
 80044b4:	2300      	movs	r3, #0
 80044b6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80044ba:	ab09      	add	r3, sp, #36	; 0x24
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	ec49 8b10 	vmov	d0, r8, r9
 80044c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80044c6:	6022      	str	r2, [r4, #0]
 80044c8:	f8cd a004 	str.w	sl, [sp, #4]
 80044cc:	6861      	ldr	r1, [r4, #4]
 80044ce:	4628      	mov	r0, r5
 80044d0:	f7ff fee7 	bl	80042a2 <__cvt>
 80044d4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80044d8:	2b47      	cmp	r3, #71	; 0x47
 80044da:	4680      	mov	r8, r0
 80044dc:	d109      	bne.n	80044f2 <_printf_float+0x126>
 80044de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044e0:	1cd8      	adds	r0, r3, #3
 80044e2:	db02      	blt.n	80044ea <_printf_float+0x11e>
 80044e4:	6862      	ldr	r2, [r4, #4]
 80044e6:	4293      	cmp	r3, r2
 80044e8:	dd47      	ble.n	800457a <_printf_float+0x1ae>
 80044ea:	f1aa 0a02 	sub.w	sl, sl, #2
 80044ee:	fa5f fa8a 	uxtb.w	sl, sl
 80044f2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80044f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044f8:	d824      	bhi.n	8004544 <_printf_float+0x178>
 80044fa:	3901      	subs	r1, #1
 80044fc:	4652      	mov	r2, sl
 80044fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004502:	9109      	str	r1, [sp, #36]	; 0x24
 8004504:	f7ff ff2e 	bl	8004364 <__exponent>
 8004508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800450a:	1813      	adds	r3, r2, r0
 800450c:	2a01      	cmp	r2, #1
 800450e:	4681      	mov	r9, r0
 8004510:	6123      	str	r3, [r4, #16]
 8004512:	dc02      	bgt.n	800451a <_printf_float+0x14e>
 8004514:	6822      	ldr	r2, [r4, #0]
 8004516:	07d1      	lsls	r1, r2, #31
 8004518:	d501      	bpl.n	800451e <_printf_float+0x152>
 800451a:	3301      	adds	r3, #1
 800451c:	6123      	str	r3, [r4, #16]
 800451e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0a5      	beq.n	8004472 <_printf_float+0xa6>
 8004526:	232d      	movs	r3, #45	; 0x2d
 8004528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800452c:	e7a1      	b.n	8004472 <_printf_float+0xa6>
 800452e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004532:	f000 8177 	beq.w	8004824 <_printf_float+0x458>
 8004536:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800453a:	d1bb      	bne.n	80044b4 <_printf_float+0xe8>
 800453c:	2900      	cmp	r1, #0
 800453e:	d1b9      	bne.n	80044b4 <_printf_float+0xe8>
 8004540:	2301      	movs	r3, #1
 8004542:	e7b6      	b.n	80044b2 <_printf_float+0xe6>
 8004544:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004548:	d119      	bne.n	800457e <_printf_float+0x1b2>
 800454a:	2900      	cmp	r1, #0
 800454c:	6863      	ldr	r3, [r4, #4]
 800454e:	dd0c      	ble.n	800456a <_printf_float+0x19e>
 8004550:	6121      	str	r1, [r4, #16]
 8004552:	b913      	cbnz	r3, 800455a <_printf_float+0x18e>
 8004554:	6822      	ldr	r2, [r4, #0]
 8004556:	07d2      	lsls	r2, r2, #31
 8004558:	d502      	bpl.n	8004560 <_printf_float+0x194>
 800455a:	3301      	adds	r3, #1
 800455c:	440b      	add	r3, r1
 800455e:	6123      	str	r3, [r4, #16]
 8004560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004562:	65a3      	str	r3, [r4, #88]	; 0x58
 8004564:	f04f 0900 	mov.w	r9, #0
 8004568:	e7d9      	b.n	800451e <_printf_float+0x152>
 800456a:	b913      	cbnz	r3, 8004572 <_printf_float+0x1a6>
 800456c:	6822      	ldr	r2, [r4, #0]
 800456e:	07d0      	lsls	r0, r2, #31
 8004570:	d501      	bpl.n	8004576 <_printf_float+0x1aa>
 8004572:	3302      	adds	r3, #2
 8004574:	e7f3      	b.n	800455e <_printf_float+0x192>
 8004576:	2301      	movs	r3, #1
 8004578:	e7f1      	b.n	800455e <_printf_float+0x192>
 800457a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800457e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004582:	4293      	cmp	r3, r2
 8004584:	db05      	blt.n	8004592 <_printf_float+0x1c6>
 8004586:	6822      	ldr	r2, [r4, #0]
 8004588:	6123      	str	r3, [r4, #16]
 800458a:	07d1      	lsls	r1, r2, #31
 800458c:	d5e8      	bpl.n	8004560 <_printf_float+0x194>
 800458e:	3301      	adds	r3, #1
 8004590:	e7e5      	b.n	800455e <_printf_float+0x192>
 8004592:	2b00      	cmp	r3, #0
 8004594:	bfd4      	ite	le
 8004596:	f1c3 0302 	rsble	r3, r3, #2
 800459a:	2301      	movgt	r3, #1
 800459c:	4413      	add	r3, r2
 800459e:	e7de      	b.n	800455e <_printf_float+0x192>
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	055a      	lsls	r2, r3, #21
 80045a4:	d407      	bmi.n	80045b6 <_printf_float+0x1ea>
 80045a6:	6923      	ldr	r3, [r4, #16]
 80045a8:	4642      	mov	r2, r8
 80045aa:	4631      	mov	r1, r6
 80045ac:	4628      	mov	r0, r5
 80045ae:	47b8      	blx	r7
 80045b0:	3001      	adds	r0, #1
 80045b2:	d12b      	bne.n	800460c <_printf_float+0x240>
 80045b4:	e767      	b.n	8004486 <_printf_float+0xba>
 80045b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80045ba:	f240 80dc 	bls.w	8004776 <_printf_float+0x3aa>
 80045be:	2200      	movs	r2, #0
 80045c0:	2300      	movs	r3, #0
 80045c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045c6:	f7fc fa87 	bl	8000ad8 <__aeabi_dcmpeq>
 80045ca:	2800      	cmp	r0, #0
 80045cc:	d033      	beq.n	8004636 <_printf_float+0x26a>
 80045ce:	2301      	movs	r3, #1
 80045d0:	4a41      	ldr	r2, [pc, #260]	; (80046d8 <_printf_float+0x30c>)
 80045d2:	4631      	mov	r1, r6
 80045d4:	4628      	mov	r0, r5
 80045d6:	47b8      	blx	r7
 80045d8:	3001      	adds	r0, #1
 80045da:	f43f af54 	beq.w	8004486 <_printf_float+0xba>
 80045de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045e2:	429a      	cmp	r2, r3
 80045e4:	db02      	blt.n	80045ec <_printf_float+0x220>
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	07d8      	lsls	r0, r3, #31
 80045ea:	d50f      	bpl.n	800460c <_printf_float+0x240>
 80045ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045f0:	4631      	mov	r1, r6
 80045f2:	4628      	mov	r0, r5
 80045f4:	47b8      	blx	r7
 80045f6:	3001      	adds	r0, #1
 80045f8:	f43f af45 	beq.w	8004486 <_printf_float+0xba>
 80045fc:	f04f 0800 	mov.w	r8, #0
 8004600:	f104 091a 	add.w	r9, r4, #26
 8004604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004606:	3b01      	subs	r3, #1
 8004608:	4543      	cmp	r3, r8
 800460a:	dc09      	bgt.n	8004620 <_printf_float+0x254>
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	079b      	lsls	r3, r3, #30
 8004610:	f100 8103 	bmi.w	800481a <_printf_float+0x44e>
 8004614:	68e0      	ldr	r0, [r4, #12]
 8004616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004618:	4298      	cmp	r0, r3
 800461a:	bfb8      	it	lt
 800461c:	4618      	movlt	r0, r3
 800461e:	e734      	b.n	800448a <_printf_float+0xbe>
 8004620:	2301      	movs	r3, #1
 8004622:	464a      	mov	r2, r9
 8004624:	4631      	mov	r1, r6
 8004626:	4628      	mov	r0, r5
 8004628:	47b8      	blx	r7
 800462a:	3001      	adds	r0, #1
 800462c:	f43f af2b 	beq.w	8004486 <_printf_float+0xba>
 8004630:	f108 0801 	add.w	r8, r8, #1
 8004634:	e7e6      	b.n	8004604 <_printf_float+0x238>
 8004636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004638:	2b00      	cmp	r3, #0
 800463a:	dc2b      	bgt.n	8004694 <_printf_float+0x2c8>
 800463c:	2301      	movs	r3, #1
 800463e:	4a26      	ldr	r2, [pc, #152]	; (80046d8 <_printf_float+0x30c>)
 8004640:	4631      	mov	r1, r6
 8004642:	4628      	mov	r0, r5
 8004644:	47b8      	blx	r7
 8004646:	3001      	adds	r0, #1
 8004648:	f43f af1d 	beq.w	8004486 <_printf_float+0xba>
 800464c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800464e:	b923      	cbnz	r3, 800465a <_printf_float+0x28e>
 8004650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004652:	b913      	cbnz	r3, 800465a <_printf_float+0x28e>
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	07d9      	lsls	r1, r3, #31
 8004658:	d5d8      	bpl.n	800460c <_printf_float+0x240>
 800465a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800465e:	4631      	mov	r1, r6
 8004660:	4628      	mov	r0, r5
 8004662:	47b8      	blx	r7
 8004664:	3001      	adds	r0, #1
 8004666:	f43f af0e 	beq.w	8004486 <_printf_float+0xba>
 800466a:	f04f 0900 	mov.w	r9, #0
 800466e:	f104 0a1a 	add.w	sl, r4, #26
 8004672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004674:	425b      	negs	r3, r3
 8004676:	454b      	cmp	r3, r9
 8004678:	dc01      	bgt.n	800467e <_printf_float+0x2b2>
 800467a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800467c:	e794      	b.n	80045a8 <_printf_float+0x1dc>
 800467e:	2301      	movs	r3, #1
 8004680:	4652      	mov	r2, sl
 8004682:	4631      	mov	r1, r6
 8004684:	4628      	mov	r0, r5
 8004686:	47b8      	blx	r7
 8004688:	3001      	adds	r0, #1
 800468a:	f43f aefc 	beq.w	8004486 <_printf_float+0xba>
 800468e:	f109 0901 	add.w	r9, r9, #1
 8004692:	e7ee      	b.n	8004672 <_printf_float+0x2a6>
 8004694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004696:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004698:	429a      	cmp	r2, r3
 800469a:	bfa8      	it	ge
 800469c:	461a      	movge	r2, r3
 800469e:	2a00      	cmp	r2, #0
 80046a0:	4691      	mov	r9, r2
 80046a2:	dd07      	ble.n	80046b4 <_printf_float+0x2e8>
 80046a4:	4613      	mov	r3, r2
 80046a6:	4631      	mov	r1, r6
 80046a8:	4642      	mov	r2, r8
 80046aa:	4628      	mov	r0, r5
 80046ac:	47b8      	blx	r7
 80046ae:	3001      	adds	r0, #1
 80046b0:	f43f aee9 	beq.w	8004486 <_printf_float+0xba>
 80046b4:	f104 031a 	add.w	r3, r4, #26
 80046b8:	f04f 0b00 	mov.w	fp, #0
 80046bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046c0:	9306      	str	r3, [sp, #24]
 80046c2:	e015      	b.n	80046f0 <_printf_float+0x324>
 80046c4:	7fefffff 	.word	0x7fefffff
 80046c8:	08006950 	.word	0x08006950
 80046cc:	0800694c 	.word	0x0800694c
 80046d0:	08006958 	.word	0x08006958
 80046d4:	08006954 	.word	0x08006954
 80046d8:	0800695c 	.word	0x0800695c
 80046dc:	2301      	movs	r3, #1
 80046de:	9a06      	ldr	r2, [sp, #24]
 80046e0:	4631      	mov	r1, r6
 80046e2:	4628      	mov	r0, r5
 80046e4:	47b8      	blx	r7
 80046e6:	3001      	adds	r0, #1
 80046e8:	f43f aecd 	beq.w	8004486 <_printf_float+0xba>
 80046ec:	f10b 0b01 	add.w	fp, fp, #1
 80046f0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80046f4:	ebaa 0309 	sub.w	r3, sl, r9
 80046f8:	455b      	cmp	r3, fp
 80046fa:	dcef      	bgt.n	80046dc <_printf_float+0x310>
 80046fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004700:	429a      	cmp	r2, r3
 8004702:	44d0      	add	r8, sl
 8004704:	db15      	blt.n	8004732 <_printf_float+0x366>
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	07da      	lsls	r2, r3, #31
 800470a:	d412      	bmi.n	8004732 <_printf_float+0x366>
 800470c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800470e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004710:	eba3 020a 	sub.w	r2, r3, sl
 8004714:	eba3 0a01 	sub.w	sl, r3, r1
 8004718:	4592      	cmp	sl, r2
 800471a:	bfa8      	it	ge
 800471c:	4692      	movge	sl, r2
 800471e:	f1ba 0f00 	cmp.w	sl, #0
 8004722:	dc0e      	bgt.n	8004742 <_printf_float+0x376>
 8004724:	f04f 0800 	mov.w	r8, #0
 8004728:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800472c:	f104 091a 	add.w	r9, r4, #26
 8004730:	e019      	b.n	8004766 <_printf_float+0x39a>
 8004732:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004736:	4631      	mov	r1, r6
 8004738:	4628      	mov	r0, r5
 800473a:	47b8      	blx	r7
 800473c:	3001      	adds	r0, #1
 800473e:	d1e5      	bne.n	800470c <_printf_float+0x340>
 8004740:	e6a1      	b.n	8004486 <_printf_float+0xba>
 8004742:	4653      	mov	r3, sl
 8004744:	4642      	mov	r2, r8
 8004746:	4631      	mov	r1, r6
 8004748:	4628      	mov	r0, r5
 800474a:	47b8      	blx	r7
 800474c:	3001      	adds	r0, #1
 800474e:	d1e9      	bne.n	8004724 <_printf_float+0x358>
 8004750:	e699      	b.n	8004486 <_printf_float+0xba>
 8004752:	2301      	movs	r3, #1
 8004754:	464a      	mov	r2, r9
 8004756:	4631      	mov	r1, r6
 8004758:	4628      	mov	r0, r5
 800475a:	47b8      	blx	r7
 800475c:	3001      	adds	r0, #1
 800475e:	f43f ae92 	beq.w	8004486 <_printf_float+0xba>
 8004762:	f108 0801 	add.w	r8, r8, #1
 8004766:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800476a:	1a9b      	subs	r3, r3, r2
 800476c:	eba3 030a 	sub.w	r3, r3, sl
 8004770:	4543      	cmp	r3, r8
 8004772:	dcee      	bgt.n	8004752 <_printf_float+0x386>
 8004774:	e74a      	b.n	800460c <_printf_float+0x240>
 8004776:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004778:	2a01      	cmp	r2, #1
 800477a:	dc01      	bgt.n	8004780 <_printf_float+0x3b4>
 800477c:	07db      	lsls	r3, r3, #31
 800477e:	d53a      	bpl.n	80047f6 <_printf_float+0x42a>
 8004780:	2301      	movs	r3, #1
 8004782:	4642      	mov	r2, r8
 8004784:	4631      	mov	r1, r6
 8004786:	4628      	mov	r0, r5
 8004788:	47b8      	blx	r7
 800478a:	3001      	adds	r0, #1
 800478c:	f43f ae7b 	beq.w	8004486 <_printf_float+0xba>
 8004790:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004794:	4631      	mov	r1, r6
 8004796:	4628      	mov	r0, r5
 8004798:	47b8      	blx	r7
 800479a:	3001      	adds	r0, #1
 800479c:	f108 0801 	add.w	r8, r8, #1
 80047a0:	f43f ae71 	beq.w	8004486 <_printf_float+0xba>
 80047a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047a6:	2200      	movs	r2, #0
 80047a8:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80047ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047b0:	2300      	movs	r3, #0
 80047b2:	f7fc f991 	bl	8000ad8 <__aeabi_dcmpeq>
 80047b6:	b9c8      	cbnz	r0, 80047ec <_printf_float+0x420>
 80047b8:	4653      	mov	r3, sl
 80047ba:	4642      	mov	r2, r8
 80047bc:	4631      	mov	r1, r6
 80047be:	4628      	mov	r0, r5
 80047c0:	47b8      	blx	r7
 80047c2:	3001      	adds	r0, #1
 80047c4:	d10e      	bne.n	80047e4 <_printf_float+0x418>
 80047c6:	e65e      	b.n	8004486 <_printf_float+0xba>
 80047c8:	2301      	movs	r3, #1
 80047ca:	4652      	mov	r2, sl
 80047cc:	4631      	mov	r1, r6
 80047ce:	4628      	mov	r0, r5
 80047d0:	47b8      	blx	r7
 80047d2:	3001      	adds	r0, #1
 80047d4:	f43f ae57 	beq.w	8004486 <_printf_float+0xba>
 80047d8:	f108 0801 	add.w	r8, r8, #1
 80047dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047de:	3b01      	subs	r3, #1
 80047e0:	4543      	cmp	r3, r8
 80047e2:	dcf1      	bgt.n	80047c8 <_printf_float+0x3fc>
 80047e4:	464b      	mov	r3, r9
 80047e6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047ea:	e6de      	b.n	80045aa <_printf_float+0x1de>
 80047ec:	f04f 0800 	mov.w	r8, #0
 80047f0:	f104 0a1a 	add.w	sl, r4, #26
 80047f4:	e7f2      	b.n	80047dc <_printf_float+0x410>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e7df      	b.n	80047ba <_printf_float+0x3ee>
 80047fa:	2301      	movs	r3, #1
 80047fc:	464a      	mov	r2, r9
 80047fe:	4631      	mov	r1, r6
 8004800:	4628      	mov	r0, r5
 8004802:	47b8      	blx	r7
 8004804:	3001      	adds	r0, #1
 8004806:	f43f ae3e 	beq.w	8004486 <_printf_float+0xba>
 800480a:	f108 0801 	add.w	r8, r8, #1
 800480e:	68e3      	ldr	r3, [r4, #12]
 8004810:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004812:	1a9b      	subs	r3, r3, r2
 8004814:	4543      	cmp	r3, r8
 8004816:	dcf0      	bgt.n	80047fa <_printf_float+0x42e>
 8004818:	e6fc      	b.n	8004614 <_printf_float+0x248>
 800481a:	f04f 0800 	mov.w	r8, #0
 800481e:	f104 0919 	add.w	r9, r4, #25
 8004822:	e7f4      	b.n	800480e <_printf_float+0x442>
 8004824:	2900      	cmp	r1, #0
 8004826:	f43f ae8b 	beq.w	8004540 <_printf_float+0x174>
 800482a:	2300      	movs	r3, #0
 800482c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004830:	ab09      	add	r3, sp, #36	; 0x24
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	ec49 8b10 	vmov	d0, r8, r9
 8004838:	6022      	str	r2, [r4, #0]
 800483a:	f8cd a004 	str.w	sl, [sp, #4]
 800483e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004842:	4628      	mov	r0, r5
 8004844:	f7ff fd2d 	bl	80042a2 <__cvt>
 8004848:	4680      	mov	r8, r0
 800484a:	e648      	b.n	80044de <_printf_float+0x112>

0800484c <_printf_common>:
 800484c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004850:	4691      	mov	r9, r2
 8004852:	461f      	mov	r7, r3
 8004854:	688a      	ldr	r2, [r1, #8]
 8004856:	690b      	ldr	r3, [r1, #16]
 8004858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800485c:	4293      	cmp	r3, r2
 800485e:	bfb8      	it	lt
 8004860:	4613      	movlt	r3, r2
 8004862:	f8c9 3000 	str.w	r3, [r9]
 8004866:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800486a:	4606      	mov	r6, r0
 800486c:	460c      	mov	r4, r1
 800486e:	b112      	cbz	r2, 8004876 <_printf_common+0x2a>
 8004870:	3301      	adds	r3, #1
 8004872:	f8c9 3000 	str.w	r3, [r9]
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	0699      	lsls	r1, r3, #26
 800487a:	bf42      	ittt	mi
 800487c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004880:	3302      	addmi	r3, #2
 8004882:	f8c9 3000 	strmi.w	r3, [r9]
 8004886:	6825      	ldr	r5, [r4, #0]
 8004888:	f015 0506 	ands.w	r5, r5, #6
 800488c:	d107      	bne.n	800489e <_printf_common+0x52>
 800488e:	f104 0a19 	add.w	sl, r4, #25
 8004892:	68e3      	ldr	r3, [r4, #12]
 8004894:	f8d9 2000 	ldr.w	r2, [r9]
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	42ab      	cmp	r3, r5
 800489c:	dc28      	bgt.n	80048f0 <_printf_common+0xa4>
 800489e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048a2:	6822      	ldr	r2, [r4, #0]
 80048a4:	3300      	adds	r3, #0
 80048a6:	bf18      	it	ne
 80048a8:	2301      	movne	r3, #1
 80048aa:	0692      	lsls	r2, r2, #26
 80048ac:	d42d      	bmi.n	800490a <_printf_common+0xbe>
 80048ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048b2:	4639      	mov	r1, r7
 80048b4:	4630      	mov	r0, r6
 80048b6:	47c0      	blx	r8
 80048b8:	3001      	adds	r0, #1
 80048ba:	d020      	beq.n	80048fe <_printf_common+0xb2>
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	68e5      	ldr	r5, [r4, #12]
 80048c0:	f8d9 2000 	ldr.w	r2, [r9]
 80048c4:	f003 0306 	and.w	r3, r3, #6
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	bf08      	it	eq
 80048cc:	1aad      	subeq	r5, r5, r2
 80048ce:	68a3      	ldr	r3, [r4, #8]
 80048d0:	6922      	ldr	r2, [r4, #16]
 80048d2:	bf0c      	ite	eq
 80048d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048d8:	2500      	movne	r5, #0
 80048da:	4293      	cmp	r3, r2
 80048dc:	bfc4      	itt	gt
 80048de:	1a9b      	subgt	r3, r3, r2
 80048e0:	18ed      	addgt	r5, r5, r3
 80048e2:	f04f 0900 	mov.w	r9, #0
 80048e6:	341a      	adds	r4, #26
 80048e8:	454d      	cmp	r5, r9
 80048ea:	d11a      	bne.n	8004922 <_printf_common+0xd6>
 80048ec:	2000      	movs	r0, #0
 80048ee:	e008      	b.n	8004902 <_printf_common+0xb6>
 80048f0:	2301      	movs	r3, #1
 80048f2:	4652      	mov	r2, sl
 80048f4:	4639      	mov	r1, r7
 80048f6:	4630      	mov	r0, r6
 80048f8:	47c0      	blx	r8
 80048fa:	3001      	adds	r0, #1
 80048fc:	d103      	bne.n	8004906 <_printf_common+0xba>
 80048fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004906:	3501      	adds	r5, #1
 8004908:	e7c3      	b.n	8004892 <_printf_common+0x46>
 800490a:	18e1      	adds	r1, r4, r3
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	2030      	movs	r0, #48	; 0x30
 8004910:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004914:	4422      	add	r2, r4
 8004916:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800491a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800491e:	3302      	adds	r3, #2
 8004920:	e7c5      	b.n	80048ae <_printf_common+0x62>
 8004922:	2301      	movs	r3, #1
 8004924:	4622      	mov	r2, r4
 8004926:	4639      	mov	r1, r7
 8004928:	4630      	mov	r0, r6
 800492a:	47c0      	blx	r8
 800492c:	3001      	adds	r0, #1
 800492e:	d0e6      	beq.n	80048fe <_printf_common+0xb2>
 8004930:	f109 0901 	add.w	r9, r9, #1
 8004934:	e7d8      	b.n	80048e8 <_printf_common+0x9c>
	...

08004938 <_printf_i>:
 8004938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800493c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004940:	460c      	mov	r4, r1
 8004942:	7e09      	ldrb	r1, [r1, #24]
 8004944:	b085      	sub	sp, #20
 8004946:	296e      	cmp	r1, #110	; 0x6e
 8004948:	4617      	mov	r7, r2
 800494a:	4606      	mov	r6, r0
 800494c:	4698      	mov	r8, r3
 800494e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004950:	f000 80b3 	beq.w	8004aba <_printf_i+0x182>
 8004954:	d822      	bhi.n	800499c <_printf_i+0x64>
 8004956:	2963      	cmp	r1, #99	; 0x63
 8004958:	d036      	beq.n	80049c8 <_printf_i+0x90>
 800495a:	d80a      	bhi.n	8004972 <_printf_i+0x3a>
 800495c:	2900      	cmp	r1, #0
 800495e:	f000 80b9 	beq.w	8004ad4 <_printf_i+0x19c>
 8004962:	2958      	cmp	r1, #88	; 0x58
 8004964:	f000 8083 	beq.w	8004a6e <_printf_i+0x136>
 8004968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800496c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004970:	e032      	b.n	80049d8 <_printf_i+0xa0>
 8004972:	2964      	cmp	r1, #100	; 0x64
 8004974:	d001      	beq.n	800497a <_printf_i+0x42>
 8004976:	2969      	cmp	r1, #105	; 0x69
 8004978:	d1f6      	bne.n	8004968 <_printf_i+0x30>
 800497a:	6820      	ldr	r0, [r4, #0]
 800497c:	6813      	ldr	r3, [r2, #0]
 800497e:	0605      	lsls	r5, r0, #24
 8004980:	f103 0104 	add.w	r1, r3, #4
 8004984:	d52a      	bpl.n	80049dc <_printf_i+0xa4>
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6011      	str	r1, [r2, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	da03      	bge.n	8004996 <_printf_i+0x5e>
 800498e:	222d      	movs	r2, #45	; 0x2d
 8004990:	425b      	negs	r3, r3
 8004992:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004996:	486f      	ldr	r0, [pc, #444]	; (8004b54 <_printf_i+0x21c>)
 8004998:	220a      	movs	r2, #10
 800499a:	e039      	b.n	8004a10 <_printf_i+0xd8>
 800499c:	2973      	cmp	r1, #115	; 0x73
 800499e:	f000 809d 	beq.w	8004adc <_printf_i+0x1a4>
 80049a2:	d808      	bhi.n	80049b6 <_printf_i+0x7e>
 80049a4:	296f      	cmp	r1, #111	; 0x6f
 80049a6:	d020      	beq.n	80049ea <_printf_i+0xb2>
 80049a8:	2970      	cmp	r1, #112	; 0x70
 80049aa:	d1dd      	bne.n	8004968 <_printf_i+0x30>
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	f043 0320 	orr.w	r3, r3, #32
 80049b2:	6023      	str	r3, [r4, #0]
 80049b4:	e003      	b.n	80049be <_printf_i+0x86>
 80049b6:	2975      	cmp	r1, #117	; 0x75
 80049b8:	d017      	beq.n	80049ea <_printf_i+0xb2>
 80049ba:	2978      	cmp	r1, #120	; 0x78
 80049bc:	d1d4      	bne.n	8004968 <_printf_i+0x30>
 80049be:	2378      	movs	r3, #120	; 0x78
 80049c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049c4:	4864      	ldr	r0, [pc, #400]	; (8004b58 <_printf_i+0x220>)
 80049c6:	e055      	b.n	8004a74 <_printf_i+0x13c>
 80049c8:	6813      	ldr	r3, [r2, #0]
 80049ca:	1d19      	adds	r1, r3, #4
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6011      	str	r1, [r2, #0]
 80049d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049d8:	2301      	movs	r3, #1
 80049da:	e08c      	b.n	8004af6 <_printf_i+0x1be>
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6011      	str	r1, [r2, #0]
 80049e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049e4:	bf18      	it	ne
 80049e6:	b21b      	sxthne	r3, r3
 80049e8:	e7cf      	b.n	800498a <_printf_i+0x52>
 80049ea:	6813      	ldr	r3, [r2, #0]
 80049ec:	6825      	ldr	r5, [r4, #0]
 80049ee:	1d18      	adds	r0, r3, #4
 80049f0:	6010      	str	r0, [r2, #0]
 80049f2:	0628      	lsls	r0, r5, #24
 80049f4:	d501      	bpl.n	80049fa <_printf_i+0xc2>
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	e002      	b.n	8004a00 <_printf_i+0xc8>
 80049fa:	0668      	lsls	r0, r5, #25
 80049fc:	d5fb      	bpl.n	80049f6 <_printf_i+0xbe>
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	4854      	ldr	r0, [pc, #336]	; (8004b54 <_printf_i+0x21c>)
 8004a02:	296f      	cmp	r1, #111	; 0x6f
 8004a04:	bf14      	ite	ne
 8004a06:	220a      	movne	r2, #10
 8004a08:	2208      	moveq	r2, #8
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a10:	6865      	ldr	r5, [r4, #4]
 8004a12:	60a5      	str	r5, [r4, #8]
 8004a14:	2d00      	cmp	r5, #0
 8004a16:	f2c0 8095 	blt.w	8004b44 <_printf_i+0x20c>
 8004a1a:	6821      	ldr	r1, [r4, #0]
 8004a1c:	f021 0104 	bic.w	r1, r1, #4
 8004a20:	6021      	str	r1, [r4, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d13d      	bne.n	8004aa2 <_printf_i+0x16a>
 8004a26:	2d00      	cmp	r5, #0
 8004a28:	f040 808e 	bne.w	8004b48 <_printf_i+0x210>
 8004a2c:	4665      	mov	r5, ip
 8004a2e:	2a08      	cmp	r2, #8
 8004a30:	d10b      	bne.n	8004a4a <_printf_i+0x112>
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	07db      	lsls	r3, r3, #31
 8004a36:	d508      	bpl.n	8004a4a <_printf_i+0x112>
 8004a38:	6923      	ldr	r3, [r4, #16]
 8004a3a:	6862      	ldr	r2, [r4, #4]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	bfde      	ittt	le
 8004a40:	2330      	movle	r3, #48	; 0x30
 8004a42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a46:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a4a:	ebac 0305 	sub.w	r3, ip, r5
 8004a4e:	6123      	str	r3, [r4, #16]
 8004a50:	f8cd 8000 	str.w	r8, [sp]
 8004a54:	463b      	mov	r3, r7
 8004a56:	aa03      	add	r2, sp, #12
 8004a58:	4621      	mov	r1, r4
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	f7ff fef6 	bl	800484c <_printf_common>
 8004a60:	3001      	adds	r0, #1
 8004a62:	d14d      	bne.n	8004b00 <_printf_i+0x1c8>
 8004a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a68:	b005      	add	sp, #20
 8004a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a6e:	4839      	ldr	r0, [pc, #228]	; (8004b54 <_printf_i+0x21c>)
 8004a70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004a74:	6813      	ldr	r3, [r2, #0]
 8004a76:	6821      	ldr	r1, [r4, #0]
 8004a78:	1d1d      	adds	r5, r3, #4
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6015      	str	r5, [r2, #0]
 8004a7e:	060a      	lsls	r2, r1, #24
 8004a80:	d50b      	bpl.n	8004a9a <_printf_i+0x162>
 8004a82:	07ca      	lsls	r2, r1, #31
 8004a84:	bf44      	itt	mi
 8004a86:	f041 0120 	orrmi.w	r1, r1, #32
 8004a8a:	6021      	strmi	r1, [r4, #0]
 8004a8c:	b91b      	cbnz	r3, 8004a96 <_printf_i+0x15e>
 8004a8e:	6822      	ldr	r2, [r4, #0]
 8004a90:	f022 0220 	bic.w	r2, r2, #32
 8004a94:	6022      	str	r2, [r4, #0]
 8004a96:	2210      	movs	r2, #16
 8004a98:	e7b7      	b.n	8004a0a <_printf_i+0xd2>
 8004a9a:	064d      	lsls	r5, r1, #25
 8004a9c:	bf48      	it	mi
 8004a9e:	b29b      	uxthmi	r3, r3
 8004aa0:	e7ef      	b.n	8004a82 <_printf_i+0x14a>
 8004aa2:	4665      	mov	r5, ip
 8004aa4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004aa8:	fb02 3311 	mls	r3, r2, r1, r3
 8004aac:	5cc3      	ldrb	r3, [r0, r3]
 8004aae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	2900      	cmp	r1, #0
 8004ab6:	d1f5      	bne.n	8004aa4 <_printf_i+0x16c>
 8004ab8:	e7b9      	b.n	8004a2e <_printf_i+0xf6>
 8004aba:	6813      	ldr	r3, [r2, #0]
 8004abc:	6825      	ldr	r5, [r4, #0]
 8004abe:	6961      	ldr	r1, [r4, #20]
 8004ac0:	1d18      	adds	r0, r3, #4
 8004ac2:	6010      	str	r0, [r2, #0]
 8004ac4:	0628      	lsls	r0, r5, #24
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	d501      	bpl.n	8004ace <_printf_i+0x196>
 8004aca:	6019      	str	r1, [r3, #0]
 8004acc:	e002      	b.n	8004ad4 <_printf_i+0x19c>
 8004ace:	066a      	lsls	r2, r5, #25
 8004ad0:	d5fb      	bpl.n	8004aca <_printf_i+0x192>
 8004ad2:	8019      	strh	r1, [r3, #0]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	6123      	str	r3, [r4, #16]
 8004ad8:	4665      	mov	r5, ip
 8004ada:	e7b9      	b.n	8004a50 <_printf_i+0x118>
 8004adc:	6813      	ldr	r3, [r2, #0]
 8004ade:	1d19      	adds	r1, r3, #4
 8004ae0:	6011      	str	r1, [r2, #0]
 8004ae2:	681d      	ldr	r5, [r3, #0]
 8004ae4:	6862      	ldr	r2, [r4, #4]
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	4628      	mov	r0, r5
 8004aea:	f7fb fb81 	bl	80001f0 <memchr>
 8004aee:	b108      	cbz	r0, 8004af4 <_printf_i+0x1bc>
 8004af0:	1b40      	subs	r0, r0, r5
 8004af2:	6060      	str	r0, [r4, #4]
 8004af4:	6863      	ldr	r3, [r4, #4]
 8004af6:	6123      	str	r3, [r4, #16]
 8004af8:	2300      	movs	r3, #0
 8004afa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004afe:	e7a7      	b.n	8004a50 <_printf_i+0x118>
 8004b00:	6923      	ldr	r3, [r4, #16]
 8004b02:	462a      	mov	r2, r5
 8004b04:	4639      	mov	r1, r7
 8004b06:	4630      	mov	r0, r6
 8004b08:	47c0      	blx	r8
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	d0aa      	beq.n	8004a64 <_printf_i+0x12c>
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	079b      	lsls	r3, r3, #30
 8004b12:	d413      	bmi.n	8004b3c <_printf_i+0x204>
 8004b14:	68e0      	ldr	r0, [r4, #12]
 8004b16:	9b03      	ldr	r3, [sp, #12]
 8004b18:	4298      	cmp	r0, r3
 8004b1a:	bfb8      	it	lt
 8004b1c:	4618      	movlt	r0, r3
 8004b1e:	e7a3      	b.n	8004a68 <_printf_i+0x130>
 8004b20:	2301      	movs	r3, #1
 8004b22:	464a      	mov	r2, r9
 8004b24:	4639      	mov	r1, r7
 8004b26:	4630      	mov	r0, r6
 8004b28:	47c0      	blx	r8
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	d09a      	beq.n	8004a64 <_printf_i+0x12c>
 8004b2e:	3501      	adds	r5, #1
 8004b30:	68e3      	ldr	r3, [r4, #12]
 8004b32:	9a03      	ldr	r2, [sp, #12]
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	42ab      	cmp	r3, r5
 8004b38:	dcf2      	bgt.n	8004b20 <_printf_i+0x1e8>
 8004b3a:	e7eb      	b.n	8004b14 <_printf_i+0x1dc>
 8004b3c:	2500      	movs	r5, #0
 8004b3e:	f104 0919 	add.w	r9, r4, #25
 8004b42:	e7f5      	b.n	8004b30 <_printf_i+0x1f8>
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1ac      	bne.n	8004aa2 <_printf_i+0x16a>
 8004b48:	7803      	ldrb	r3, [r0, #0]
 8004b4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b52:	e76c      	b.n	8004a2e <_printf_i+0xf6>
 8004b54:	0800695e 	.word	0x0800695e
 8004b58:	0800696f 	.word	0x0800696f

08004b5c <iprintf>:
 8004b5c:	b40f      	push	{r0, r1, r2, r3}
 8004b5e:	4b0a      	ldr	r3, [pc, #40]	; (8004b88 <iprintf+0x2c>)
 8004b60:	b513      	push	{r0, r1, r4, lr}
 8004b62:	681c      	ldr	r4, [r3, #0]
 8004b64:	b124      	cbz	r4, 8004b70 <iprintf+0x14>
 8004b66:	69a3      	ldr	r3, [r4, #24]
 8004b68:	b913      	cbnz	r3, 8004b70 <iprintf+0x14>
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	f000 fe94 	bl	8005898 <__sinit>
 8004b70:	ab05      	add	r3, sp, #20
 8004b72:	9a04      	ldr	r2, [sp, #16]
 8004b74:	68a1      	ldr	r1, [r4, #8]
 8004b76:	9301      	str	r3, [sp, #4]
 8004b78:	4620      	mov	r0, r4
 8004b7a:	f001 fae9 	bl	8006150 <_vfiprintf_r>
 8004b7e:	b002      	add	sp, #8
 8004b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b84:	b004      	add	sp, #16
 8004b86:	4770      	bx	lr
 8004b88:	2000000c 	.word	0x2000000c

08004b8c <quorem>:
 8004b8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b90:	6903      	ldr	r3, [r0, #16]
 8004b92:	690c      	ldr	r4, [r1, #16]
 8004b94:	42a3      	cmp	r3, r4
 8004b96:	4680      	mov	r8, r0
 8004b98:	f2c0 8082 	blt.w	8004ca0 <quorem+0x114>
 8004b9c:	3c01      	subs	r4, #1
 8004b9e:	f101 0714 	add.w	r7, r1, #20
 8004ba2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004ba6:	f100 0614 	add.w	r6, r0, #20
 8004baa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004bae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004bb2:	eb06 030c 	add.w	r3, r6, ip
 8004bb6:	3501      	adds	r5, #1
 8004bb8:	eb07 090c 	add.w	r9, r7, ip
 8004bbc:	9301      	str	r3, [sp, #4]
 8004bbe:	fbb0 f5f5 	udiv	r5, r0, r5
 8004bc2:	b395      	cbz	r5, 8004c2a <quorem+0x9e>
 8004bc4:	f04f 0a00 	mov.w	sl, #0
 8004bc8:	4638      	mov	r0, r7
 8004bca:	46b6      	mov	lr, r6
 8004bcc:	46d3      	mov	fp, sl
 8004bce:	f850 2b04 	ldr.w	r2, [r0], #4
 8004bd2:	b293      	uxth	r3, r2
 8004bd4:	fb05 a303 	mla	r3, r5, r3, sl
 8004bd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	ebab 0303 	sub.w	r3, fp, r3
 8004be2:	0c12      	lsrs	r2, r2, #16
 8004be4:	f8de b000 	ldr.w	fp, [lr]
 8004be8:	fb05 a202 	mla	r2, r5, r2, sl
 8004bec:	fa13 f38b 	uxtah	r3, r3, fp
 8004bf0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004bf4:	fa1f fb82 	uxth.w	fp, r2
 8004bf8:	f8de 2000 	ldr.w	r2, [lr]
 8004bfc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004c00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c0a:	4581      	cmp	r9, r0
 8004c0c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004c10:	f84e 3b04 	str.w	r3, [lr], #4
 8004c14:	d2db      	bcs.n	8004bce <quorem+0x42>
 8004c16:	f856 300c 	ldr.w	r3, [r6, ip]
 8004c1a:	b933      	cbnz	r3, 8004c2a <quorem+0x9e>
 8004c1c:	9b01      	ldr	r3, [sp, #4]
 8004c1e:	3b04      	subs	r3, #4
 8004c20:	429e      	cmp	r6, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	d330      	bcc.n	8004c88 <quorem+0xfc>
 8004c26:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c2a:	4640      	mov	r0, r8
 8004c2c:	f001 f8ea 	bl	8005e04 <__mcmp>
 8004c30:	2800      	cmp	r0, #0
 8004c32:	db25      	blt.n	8004c80 <quorem+0xf4>
 8004c34:	3501      	adds	r5, #1
 8004c36:	4630      	mov	r0, r6
 8004c38:	f04f 0c00 	mov.w	ip, #0
 8004c3c:	f857 2b04 	ldr.w	r2, [r7], #4
 8004c40:	f8d0 e000 	ldr.w	lr, [r0]
 8004c44:	b293      	uxth	r3, r2
 8004c46:	ebac 0303 	sub.w	r3, ip, r3
 8004c4a:	0c12      	lsrs	r2, r2, #16
 8004c4c:	fa13 f38e 	uxtah	r3, r3, lr
 8004c50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c5e:	45b9      	cmp	r9, r7
 8004c60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c64:	f840 3b04 	str.w	r3, [r0], #4
 8004c68:	d2e8      	bcs.n	8004c3c <quorem+0xb0>
 8004c6a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004c6e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004c72:	b92a      	cbnz	r2, 8004c80 <quorem+0xf4>
 8004c74:	3b04      	subs	r3, #4
 8004c76:	429e      	cmp	r6, r3
 8004c78:	461a      	mov	r2, r3
 8004c7a:	d30b      	bcc.n	8004c94 <quorem+0x108>
 8004c7c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c80:	4628      	mov	r0, r5
 8004c82:	b003      	add	sp, #12
 8004c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c88:	6812      	ldr	r2, [r2, #0]
 8004c8a:	3b04      	subs	r3, #4
 8004c8c:	2a00      	cmp	r2, #0
 8004c8e:	d1ca      	bne.n	8004c26 <quorem+0x9a>
 8004c90:	3c01      	subs	r4, #1
 8004c92:	e7c5      	b.n	8004c20 <quorem+0x94>
 8004c94:	6812      	ldr	r2, [r2, #0]
 8004c96:	3b04      	subs	r3, #4
 8004c98:	2a00      	cmp	r2, #0
 8004c9a:	d1ef      	bne.n	8004c7c <quorem+0xf0>
 8004c9c:	3c01      	subs	r4, #1
 8004c9e:	e7ea      	b.n	8004c76 <quorem+0xea>
 8004ca0:	2000      	movs	r0, #0
 8004ca2:	e7ee      	b.n	8004c82 <quorem+0xf6>
 8004ca4:	0000      	movs	r0, r0
	...

08004ca8 <_dtoa_r>:
 8004ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cac:	ec57 6b10 	vmov	r6, r7, d0
 8004cb0:	b097      	sub	sp, #92	; 0x5c
 8004cb2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004cb4:	9106      	str	r1, [sp, #24]
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	920b      	str	r2, [sp, #44]	; 0x2c
 8004cba:	9312      	str	r3, [sp, #72]	; 0x48
 8004cbc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004cc0:	e9cd 6700 	strd	r6, r7, [sp]
 8004cc4:	b93d      	cbnz	r5, 8004cd6 <_dtoa_r+0x2e>
 8004cc6:	2010      	movs	r0, #16
 8004cc8:	f000 fe7e 	bl	80059c8 <malloc>
 8004ccc:	6260      	str	r0, [r4, #36]	; 0x24
 8004cce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004cd2:	6005      	str	r5, [r0, #0]
 8004cd4:	60c5      	str	r5, [r0, #12]
 8004cd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cd8:	6819      	ldr	r1, [r3, #0]
 8004cda:	b151      	cbz	r1, 8004cf2 <_dtoa_r+0x4a>
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	604a      	str	r2, [r1, #4]
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	4093      	lsls	r3, r2
 8004ce4:	608b      	str	r3, [r1, #8]
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	f000 feaa 	bl	8005a40 <_Bfree>
 8004cec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	1e3b      	subs	r3, r7, #0
 8004cf4:	bfbb      	ittet	lt
 8004cf6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004cfa:	9301      	strlt	r3, [sp, #4]
 8004cfc:	2300      	movge	r3, #0
 8004cfe:	2201      	movlt	r2, #1
 8004d00:	bfac      	ite	ge
 8004d02:	f8c8 3000 	strge.w	r3, [r8]
 8004d06:	f8c8 2000 	strlt.w	r2, [r8]
 8004d0a:	4baf      	ldr	r3, [pc, #700]	; (8004fc8 <_dtoa_r+0x320>)
 8004d0c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004d10:	ea33 0308 	bics.w	r3, r3, r8
 8004d14:	d114      	bne.n	8004d40 <_dtoa_r+0x98>
 8004d16:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d18:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	9b00      	ldr	r3, [sp, #0]
 8004d20:	b923      	cbnz	r3, 8004d2c <_dtoa_r+0x84>
 8004d22:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004d26:	2800      	cmp	r0, #0
 8004d28:	f000 8542 	beq.w	80057b0 <_dtoa_r+0xb08>
 8004d2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d2e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004fdc <_dtoa_r+0x334>
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 8544 	beq.w	80057c0 <_dtoa_r+0xb18>
 8004d38:	f10b 0303 	add.w	r3, fp, #3
 8004d3c:	f000 bd3e 	b.w	80057bc <_dtoa_r+0xb14>
 8004d40:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004d44:	2200      	movs	r2, #0
 8004d46:	2300      	movs	r3, #0
 8004d48:	4630      	mov	r0, r6
 8004d4a:	4639      	mov	r1, r7
 8004d4c:	f7fb fec4 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d50:	4681      	mov	r9, r0
 8004d52:	b168      	cbz	r0, 8004d70 <_dtoa_r+0xc8>
 8004d54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d56:	2301      	movs	r3, #1
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 8524 	beq.w	80057aa <_dtoa_r+0xb02>
 8004d62:	4b9a      	ldr	r3, [pc, #616]	; (8004fcc <_dtoa_r+0x324>)
 8004d64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d66:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	f000 bd28 	b.w	80057c0 <_dtoa_r+0xb18>
 8004d70:	aa14      	add	r2, sp, #80	; 0x50
 8004d72:	a915      	add	r1, sp, #84	; 0x54
 8004d74:	ec47 6b10 	vmov	d0, r6, r7
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f001 f8ba 	bl	8005ef2 <__d2b>
 8004d7e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004d82:	9004      	str	r0, [sp, #16]
 8004d84:	2d00      	cmp	r5, #0
 8004d86:	d07c      	beq.n	8004e82 <_dtoa_r+0x1da>
 8004d88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004d8c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004d90:	46b2      	mov	sl, r6
 8004d92:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004d96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d9a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004d9e:	2200      	movs	r2, #0
 8004da0:	4b8b      	ldr	r3, [pc, #556]	; (8004fd0 <_dtoa_r+0x328>)
 8004da2:	4650      	mov	r0, sl
 8004da4:	4659      	mov	r1, fp
 8004da6:	f7fb fa77 	bl	8000298 <__aeabi_dsub>
 8004daa:	a381      	add	r3, pc, #516	; (adr r3, 8004fb0 <_dtoa_r+0x308>)
 8004dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db0:	f7fb fc2a 	bl	8000608 <__aeabi_dmul>
 8004db4:	a380      	add	r3, pc, #512	; (adr r3, 8004fb8 <_dtoa_r+0x310>)
 8004db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dba:	f7fb fa6f 	bl	800029c <__adddf3>
 8004dbe:	4606      	mov	r6, r0
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	460f      	mov	r7, r1
 8004dc4:	f7fb fbb6 	bl	8000534 <__aeabi_i2d>
 8004dc8:	a37d      	add	r3, pc, #500	; (adr r3, 8004fc0 <_dtoa_r+0x318>)
 8004dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dce:	f7fb fc1b 	bl	8000608 <__aeabi_dmul>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	4639      	mov	r1, r7
 8004dda:	f7fb fa5f 	bl	800029c <__adddf3>
 8004dde:	4606      	mov	r6, r0
 8004de0:	460f      	mov	r7, r1
 8004de2:	f7fb fec1 	bl	8000b68 <__aeabi_d2iz>
 8004de6:	2200      	movs	r2, #0
 8004de8:	4682      	mov	sl, r0
 8004dea:	2300      	movs	r3, #0
 8004dec:	4630      	mov	r0, r6
 8004dee:	4639      	mov	r1, r7
 8004df0:	f7fb fe7c 	bl	8000aec <__aeabi_dcmplt>
 8004df4:	b148      	cbz	r0, 8004e0a <_dtoa_r+0x162>
 8004df6:	4650      	mov	r0, sl
 8004df8:	f7fb fb9c 	bl	8000534 <__aeabi_i2d>
 8004dfc:	4632      	mov	r2, r6
 8004dfe:	463b      	mov	r3, r7
 8004e00:	f7fb fe6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e04:	b908      	cbnz	r0, 8004e0a <_dtoa_r+0x162>
 8004e06:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e0a:	f1ba 0f16 	cmp.w	sl, #22
 8004e0e:	d859      	bhi.n	8004ec4 <_dtoa_r+0x21c>
 8004e10:	4970      	ldr	r1, [pc, #448]	; (8004fd4 <_dtoa_r+0x32c>)
 8004e12:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004e16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e1e:	f7fb fe83 	bl	8000b28 <__aeabi_dcmpgt>
 8004e22:	2800      	cmp	r0, #0
 8004e24:	d050      	beq.n	8004ec8 <_dtoa_r+0x220>
 8004e26:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004e30:	1b5d      	subs	r5, r3, r5
 8004e32:	f1b5 0801 	subs.w	r8, r5, #1
 8004e36:	bf49      	itett	mi
 8004e38:	f1c5 0301 	rsbmi	r3, r5, #1
 8004e3c:	2300      	movpl	r3, #0
 8004e3e:	9305      	strmi	r3, [sp, #20]
 8004e40:	f04f 0800 	movmi.w	r8, #0
 8004e44:	bf58      	it	pl
 8004e46:	9305      	strpl	r3, [sp, #20]
 8004e48:	f1ba 0f00 	cmp.w	sl, #0
 8004e4c:	db3e      	blt.n	8004ecc <_dtoa_r+0x224>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	44d0      	add	r8, sl
 8004e52:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004e56:	9307      	str	r3, [sp, #28]
 8004e58:	9b06      	ldr	r3, [sp, #24]
 8004e5a:	2b09      	cmp	r3, #9
 8004e5c:	f200 8090 	bhi.w	8004f80 <_dtoa_r+0x2d8>
 8004e60:	2b05      	cmp	r3, #5
 8004e62:	bfc4      	itt	gt
 8004e64:	3b04      	subgt	r3, #4
 8004e66:	9306      	strgt	r3, [sp, #24]
 8004e68:	9b06      	ldr	r3, [sp, #24]
 8004e6a:	f1a3 0302 	sub.w	r3, r3, #2
 8004e6e:	bfcc      	ite	gt
 8004e70:	2500      	movgt	r5, #0
 8004e72:	2501      	movle	r5, #1
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	f200 808f 	bhi.w	8004f98 <_dtoa_r+0x2f0>
 8004e7a:	e8df f003 	tbb	[pc, r3]
 8004e7e:	7f7d      	.short	0x7f7d
 8004e80:	7131      	.short	0x7131
 8004e82:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004e86:	441d      	add	r5, r3
 8004e88:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004e8c:	2820      	cmp	r0, #32
 8004e8e:	dd13      	ble.n	8004eb8 <_dtoa_r+0x210>
 8004e90:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004e94:	9b00      	ldr	r3, [sp, #0]
 8004e96:	fa08 f800 	lsl.w	r8, r8, r0
 8004e9a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004e9e:	fa23 f000 	lsr.w	r0, r3, r0
 8004ea2:	ea48 0000 	orr.w	r0, r8, r0
 8004ea6:	f7fb fb35 	bl	8000514 <__aeabi_ui2d>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	4682      	mov	sl, r0
 8004eae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004eb2:	3d01      	subs	r5, #1
 8004eb4:	9313      	str	r3, [sp, #76]	; 0x4c
 8004eb6:	e772      	b.n	8004d9e <_dtoa_r+0xf6>
 8004eb8:	9b00      	ldr	r3, [sp, #0]
 8004eba:	f1c0 0020 	rsb	r0, r0, #32
 8004ebe:	fa03 f000 	lsl.w	r0, r3, r0
 8004ec2:	e7f0      	b.n	8004ea6 <_dtoa_r+0x1fe>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e7b1      	b.n	8004e2c <_dtoa_r+0x184>
 8004ec8:	900f      	str	r0, [sp, #60]	; 0x3c
 8004eca:	e7b0      	b.n	8004e2e <_dtoa_r+0x186>
 8004ecc:	9b05      	ldr	r3, [sp, #20]
 8004ece:	eba3 030a 	sub.w	r3, r3, sl
 8004ed2:	9305      	str	r3, [sp, #20]
 8004ed4:	f1ca 0300 	rsb	r3, sl, #0
 8004ed8:	9307      	str	r3, [sp, #28]
 8004eda:	2300      	movs	r3, #0
 8004edc:	930e      	str	r3, [sp, #56]	; 0x38
 8004ede:	e7bb      	b.n	8004e58 <_dtoa_r+0x1b0>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8004ee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	dd59      	ble.n	8004f9e <_dtoa_r+0x2f6>
 8004eea:	9302      	str	r3, [sp, #8]
 8004eec:	4699      	mov	r9, r3
 8004eee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	6072      	str	r2, [r6, #4]
 8004ef4:	2204      	movs	r2, #4
 8004ef6:	f102 0014 	add.w	r0, r2, #20
 8004efa:	4298      	cmp	r0, r3
 8004efc:	6871      	ldr	r1, [r6, #4]
 8004efe:	d953      	bls.n	8004fa8 <_dtoa_r+0x300>
 8004f00:	4620      	mov	r0, r4
 8004f02:	f000 fd69 	bl	80059d8 <_Balloc>
 8004f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f08:	6030      	str	r0, [r6, #0]
 8004f0a:	f1b9 0f0e 	cmp.w	r9, #14
 8004f0e:	f8d3 b000 	ldr.w	fp, [r3]
 8004f12:	f200 80e6 	bhi.w	80050e2 <_dtoa_r+0x43a>
 8004f16:	2d00      	cmp	r5, #0
 8004f18:	f000 80e3 	beq.w	80050e2 <_dtoa_r+0x43a>
 8004f1c:	ed9d 7b00 	vldr	d7, [sp]
 8004f20:	f1ba 0f00 	cmp.w	sl, #0
 8004f24:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004f28:	dd74      	ble.n	8005014 <_dtoa_r+0x36c>
 8004f2a:	4a2a      	ldr	r2, [pc, #168]	; (8004fd4 <_dtoa_r+0x32c>)
 8004f2c:	f00a 030f 	and.w	r3, sl, #15
 8004f30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f34:	ed93 7b00 	vldr	d7, [r3]
 8004f38:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004f3c:	06f0      	lsls	r0, r6, #27
 8004f3e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004f42:	d565      	bpl.n	8005010 <_dtoa_r+0x368>
 8004f44:	4b24      	ldr	r3, [pc, #144]	; (8004fd8 <_dtoa_r+0x330>)
 8004f46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f4a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f4e:	f7fb fc85 	bl	800085c <__aeabi_ddiv>
 8004f52:	e9cd 0100 	strd	r0, r1, [sp]
 8004f56:	f006 060f 	and.w	r6, r6, #15
 8004f5a:	2503      	movs	r5, #3
 8004f5c:	4f1e      	ldr	r7, [pc, #120]	; (8004fd8 <_dtoa_r+0x330>)
 8004f5e:	e04c      	b.n	8004ffa <_dtoa_r+0x352>
 8004f60:	2301      	movs	r3, #1
 8004f62:	930a      	str	r3, [sp, #40]	; 0x28
 8004f64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f66:	4453      	add	r3, sl
 8004f68:	f103 0901 	add.w	r9, r3, #1
 8004f6c:	9302      	str	r3, [sp, #8]
 8004f6e:	464b      	mov	r3, r9
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	bfb8      	it	lt
 8004f74:	2301      	movlt	r3, #1
 8004f76:	e7ba      	b.n	8004eee <_dtoa_r+0x246>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	e7b2      	b.n	8004ee2 <_dtoa_r+0x23a>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	e7f0      	b.n	8004f62 <_dtoa_r+0x2ba>
 8004f80:	2501      	movs	r5, #1
 8004f82:	2300      	movs	r3, #0
 8004f84:	9306      	str	r3, [sp, #24]
 8004f86:	950a      	str	r5, [sp, #40]	; 0x28
 8004f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f8c:	9302      	str	r3, [sp, #8]
 8004f8e:	4699      	mov	r9, r3
 8004f90:	2200      	movs	r2, #0
 8004f92:	2312      	movs	r3, #18
 8004f94:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f96:	e7aa      	b.n	8004eee <_dtoa_r+0x246>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	930a      	str	r3, [sp, #40]	; 0x28
 8004f9c:	e7f4      	b.n	8004f88 <_dtoa_r+0x2e0>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	9302      	str	r3, [sp, #8]
 8004fa2:	4699      	mov	r9, r3
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	e7f5      	b.n	8004f94 <_dtoa_r+0x2ec>
 8004fa8:	3101      	adds	r1, #1
 8004faa:	6071      	str	r1, [r6, #4]
 8004fac:	0052      	lsls	r2, r2, #1
 8004fae:	e7a2      	b.n	8004ef6 <_dtoa_r+0x24e>
 8004fb0:	636f4361 	.word	0x636f4361
 8004fb4:	3fd287a7 	.word	0x3fd287a7
 8004fb8:	8b60c8b3 	.word	0x8b60c8b3
 8004fbc:	3fc68a28 	.word	0x3fc68a28
 8004fc0:	509f79fb 	.word	0x509f79fb
 8004fc4:	3fd34413 	.word	0x3fd34413
 8004fc8:	7ff00000 	.word	0x7ff00000
 8004fcc:	0800695d 	.word	0x0800695d
 8004fd0:	3ff80000 	.word	0x3ff80000
 8004fd4:	08006a18 	.word	0x08006a18
 8004fd8:	080069f0 	.word	0x080069f0
 8004fdc:	08006989 	.word	0x08006989
 8004fe0:	07f1      	lsls	r1, r6, #31
 8004fe2:	d508      	bpl.n	8004ff6 <_dtoa_r+0x34e>
 8004fe4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fec:	f7fb fb0c 	bl	8000608 <__aeabi_dmul>
 8004ff0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004ff4:	3501      	adds	r5, #1
 8004ff6:	1076      	asrs	r6, r6, #1
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	2e00      	cmp	r6, #0
 8004ffc:	d1f0      	bne.n	8004fe0 <_dtoa_r+0x338>
 8004ffe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005002:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005006:	f7fb fc29 	bl	800085c <__aeabi_ddiv>
 800500a:	e9cd 0100 	strd	r0, r1, [sp]
 800500e:	e01a      	b.n	8005046 <_dtoa_r+0x39e>
 8005010:	2502      	movs	r5, #2
 8005012:	e7a3      	b.n	8004f5c <_dtoa_r+0x2b4>
 8005014:	f000 80a0 	beq.w	8005158 <_dtoa_r+0x4b0>
 8005018:	f1ca 0600 	rsb	r6, sl, #0
 800501c:	4b9f      	ldr	r3, [pc, #636]	; (800529c <_dtoa_r+0x5f4>)
 800501e:	4fa0      	ldr	r7, [pc, #640]	; (80052a0 <_dtoa_r+0x5f8>)
 8005020:	f006 020f 	and.w	r2, r6, #15
 8005024:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005030:	f7fb faea 	bl	8000608 <__aeabi_dmul>
 8005034:	e9cd 0100 	strd	r0, r1, [sp]
 8005038:	1136      	asrs	r6, r6, #4
 800503a:	2300      	movs	r3, #0
 800503c:	2502      	movs	r5, #2
 800503e:	2e00      	cmp	r6, #0
 8005040:	d17f      	bne.n	8005142 <_dtoa_r+0x49a>
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1e1      	bne.n	800500a <_dtoa_r+0x362>
 8005046:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8087 	beq.w	800515c <_dtoa_r+0x4b4>
 800504e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005052:	2200      	movs	r2, #0
 8005054:	4b93      	ldr	r3, [pc, #588]	; (80052a4 <_dtoa_r+0x5fc>)
 8005056:	4630      	mov	r0, r6
 8005058:	4639      	mov	r1, r7
 800505a:	f7fb fd47 	bl	8000aec <__aeabi_dcmplt>
 800505e:	2800      	cmp	r0, #0
 8005060:	d07c      	beq.n	800515c <_dtoa_r+0x4b4>
 8005062:	f1b9 0f00 	cmp.w	r9, #0
 8005066:	d079      	beq.n	800515c <_dtoa_r+0x4b4>
 8005068:	9b02      	ldr	r3, [sp, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	dd35      	ble.n	80050da <_dtoa_r+0x432>
 800506e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005072:	9308      	str	r3, [sp, #32]
 8005074:	4639      	mov	r1, r7
 8005076:	2200      	movs	r2, #0
 8005078:	4b8b      	ldr	r3, [pc, #556]	; (80052a8 <_dtoa_r+0x600>)
 800507a:	4630      	mov	r0, r6
 800507c:	f7fb fac4 	bl	8000608 <__aeabi_dmul>
 8005080:	e9cd 0100 	strd	r0, r1, [sp]
 8005084:	9f02      	ldr	r7, [sp, #8]
 8005086:	3501      	adds	r5, #1
 8005088:	4628      	mov	r0, r5
 800508a:	f7fb fa53 	bl	8000534 <__aeabi_i2d>
 800508e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005092:	f7fb fab9 	bl	8000608 <__aeabi_dmul>
 8005096:	2200      	movs	r2, #0
 8005098:	4b84      	ldr	r3, [pc, #528]	; (80052ac <_dtoa_r+0x604>)
 800509a:	f7fb f8ff 	bl	800029c <__adddf3>
 800509e:	4605      	mov	r5, r0
 80050a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80050a4:	2f00      	cmp	r7, #0
 80050a6:	d15d      	bne.n	8005164 <_dtoa_r+0x4bc>
 80050a8:	2200      	movs	r2, #0
 80050aa:	4b81      	ldr	r3, [pc, #516]	; (80052b0 <_dtoa_r+0x608>)
 80050ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050b0:	f7fb f8f2 	bl	8000298 <__aeabi_dsub>
 80050b4:	462a      	mov	r2, r5
 80050b6:	4633      	mov	r3, r6
 80050b8:	e9cd 0100 	strd	r0, r1, [sp]
 80050bc:	f7fb fd34 	bl	8000b28 <__aeabi_dcmpgt>
 80050c0:	2800      	cmp	r0, #0
 80050c2:	f040 8288 	bne.w	80055d6 <_dtoa_r+0x92e>
 80050c6:	462a      	mov	r2, r5
 80050c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80050cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050d0:	f7fb fd0c 	bl	8000aec <__aeabi_dcmplt>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	f040 827c 	bne.w	80055d2 <_dtoa_r+0x92a>
 80050da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80050de:	e9cd 2300 	strd	r2, r3, [sp]
 80050e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f2c0 8150 	blt.w	800538a <_dtoa_r+0x6e2>
 80050ea:	f1ba 0f0e 	cmp.w	sl, #14
 80050ee:	f300 814c 	bgt.w	800538a <_dtoa_r+0x6e2>
 80050f2:	4b6a      	ldr	r3, [pc, #424]	; (800529c <_dtoa_r+0x5f4>)
 80050f4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80050f8:	ed93 7b00 	vldr	d7, [r3]
 80050fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005104:	f280 80d8 	bge.w	80052b8 <_dtoa_r+0x610>
 8005108:	f1b9 0f00 	cmp.w	r9, #0
 800510c:	f300 80d4 	bgt.w	80052b8 <_dtoa_r+0x610>
 8005110:	f040 825e 	bne.w	80055d0 <_dtoa_r+0x928>
 8005114:	2200      	movs	r2, #0
 8005116:	4b66      	ldr	r3, [pc, #408]	; (80052b0 <_dtoa_r+0x608>)
 8005118:	ec51 0b17 	vmov	r0, r1, d7
 800511c:	f7fb fa74 	bl	8000608 <__aeabi_dmul>
 8005120:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005124:	f7fb fcf6 	bl	8000b14 <__aeabi_dcmpge>
 8005128:	464f      	mov	r7, r9
 800512a:	464e      	mov	r6, r9
 800512c:	2800      	cmp	r0, #0
 800512e:	f040 8234 	bne.w	800559a <_dtoa_r+0x8f2>
 8005132:	2331      	movs	r3, #49	; 0x31
 8005134:	f10b 0501 	add.w	r5, fp, #1
 8005138:	f88b 3000 	strb.w	r3, [fp]
 800513c:	f10a 0a01 	add.w	sl, sl, #1
 8005140:	e22f      	b.n	80055a2 <_dtoa_r+0x8fa>
 8005142:	07f2      	lsls	r2, r6, #31
 8005144:	d505      	bpl.n	8005152 <_dtoa_r+0x4aa>
 8005146:	e9d7 2300 	ldrd	r2, r3, [r7]
 800514a:	f7fb fa5d 	bl	8000608 <__aeabi_dmul>
 800514e:	3501      	adds	r5, #1
 8005150:	2301      	movs	r3, #1
 8005152:	1076      	asrs	r6, r6, #1
 8005154:	3708      	adds	r7, #8
 8005156:	e772      	b.n	800503e <_dtoa_r+0x396>
 8005158:	2502      	movs	r5, #2
 800515a:	e774      	b.n	8005046 <_dtoa_r+0x39e>
 800515c:	f8cd a020 	str.w	sl, [sp, #32]
 8005160:	464f      	mov	r7, r9
 8005162:	e791      	b.n	8005088 <_dtoa_r+0x3e0>
 8005164:	4b4d      	ldr	r3, [pc, #308]	; (800529c <_dtoa_r+0x5f4>)
 8005166:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800516a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800516e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005170:	2b00      	cmp	r3, #0
 8005172:	d047      	beq.n	8005204 <_dtoa_r+0x55c>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	2000      	movs	r0, #0
 800517a:	494e      	ldr	r1, [pc, #312]	; (80052b4 <_dtoa_r+0x60c>)
 800517c:	f7fb fb6e 	bl	800085c <__aeabi_ddiv>
 8005180:	462a      	mov	r2, r5
 8005182:	4633      	mov	r3, r6
 8005184:	f7fb f888 	bl	8000298 <__aeabi_dsub>
 8005188:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800518c:	465d      	mov	r5, fp
 800518e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005192:	f7fb fce9 	bl	8000b68 <__aeabi_d2iz>
 8005196:	4606      	mov	r6, r0
 8005198:	f7fb f9cc 	bl	8000534 <__aeabi_i2d>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051a4:	f7fb f878 	bl	8000298 <__aeabi_dsub>
 80051a8:	3630      	adds	r6, #48	; 0x30
 80051aa:	f805 6b01 	strb.w	r6, [r5], #1
 80051ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80051b2:	e9cd 0100 	strd	r0, r1, [sp]
 80051b6:	f7fb fc99 	bl	8000aec <__aeabi_dcmplt>
 80051ba:	2800      	cmp	r0, #0
 80051bc:	d163      	bne.n	8005286 <_dtoa_r+0x5de>
 80051be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051c2:	2000      	movs	r0, #0
 80051c4:	4937      	ldr	r1, [pc, #220]	; (80052a4 <_dtoa_r+0x5fc>)
 80051c6:	f7fb f867 	bl	8000298 <__aeabi_dsub>
 80051ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80051ce:	f7fb fc8d 	bl	8000aec <__aeabi_dcmplt>
 80051d2:	2800      	cmp	r0, #0
 80051d4:	f040 80b7 	bne.w	8005346 <_dtoa_r+0x69e>
 80051d8:	eba5 030b 	sub.w	r3, r5, fp
 80051dc:	429f      	cmp	r7, r3
 80051de:	f77f af7c 	ble.w	80050da <_dtoa_r+0x432>
 80051e2:	2200      	movs	r2, #0
 80051e4:	4b30      	ldr	r3, [pc, #192]	; (80052a8 <_dtoa_r+0x600>)
 80051e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051ea:	f7fb fa0d 	bl	8000608 <__aeabi_dmul>
 80051ee:	2200      	movs	r2, #0
 80051f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80051f4:	4b2c      	ldr	r3, [pc, #176]	; (80052a8 <_dtoa_r+0x600>)
 80051f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051fa:	f7fb fa05 	bl	8000608 <__aeabi_dmul>
 80051fe:	e9cd 0100 	strd	r0, r1, [sp]
 8005202:	e7c4      	b.n	800518e <_dtoa_r+0x4e6>
 8005204:	462a      	mov	r2, r5
 8005206:	4633      	mov	r3, r6
 8005208:	f7fb f9fe 	bl	8000608 <__aeabi_dmul>
 800520c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005210:	eb0b 0507 	add.w	r5, fp, r7
 8005214:	465e      	mov	r6, fp
 8005216:	e9dd 0100 	ldrd	r0, r1, [sp]
 800521a:	f7fb fca5 	bl	8000b68 <__aeabi_d2iz>
 800521e:	4607      	mov	r7, r0
 8005220:	f7fb f988 	bl	8000534 <__aeabi_i2d>
 8005224:	3730      	adds	r7, #48	; 0x30
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800522e:	f7fb f833 	bl	8000298 <__aeabi_dsub>
 8005232:	f806 7b01 	strb.w	r7, [r6], #1
 8005236:	42ae      	cmp	r6, r5
 8005238:	e9cd 0100 	strd	r0, r1, [sp]
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	d126      	bne.n	8005290 <_dtoa_r+0x5e8>
 8005242:	4b1c      	ldr	r3, [pc, #112]	; (80052b4 <_dtoa_r+0x60c>)
 8005244:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005248:	f7fb f828 	bl	800029c <__adddf3>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005254:	f7fb fc68 	bl	8000b28 <__aeabi_dcmpgt>
 8005258:	2800      	cmp	r0, #0
 800525a:	d174      	bne.n	8005346 <_dtoa_r+0x69e>
 800525c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005260:	2000      	movs	r0, #0
 8005262:	4914      	ldr	r1, [pc, #80]	; (80052b4 <_dtoa_r+0x60c>)
 8005264:	f7fb f818 	bl	8000298 <__aeabi_dsub>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005270:	f7fb fc3c 	bl	8000aec <__aeabi_dcmplt>
 8005274:	2800      	cmp	r0, #0
 8005276:	f43f af30 	beq.w	80050da <_dtoa_r+0x432>
 800527a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800527e:	2b30      	cmp	r3, #48	; 0x30
 8005280:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005284:	d002      	beq.n	800528c <_dtoa_r+0x5e4>
 8005286:	f8dd a020 	ldr.w	sl, [sp, #32]
 800528a:	e04a      	b.n	8005322 <_dtoa_r+0x67a>
 800528c:	4615      	mov	r5, r2
 800528e:	e7f4      	b.n	800527a <_dtoa_r+0x5d2>
 8005290:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <_dtoa_r+0x600>)
 8005292:	f7fb f9b9 	bl	8000608 <__aeabi_dmul>
 8005296:	e9cd 0100 	strd	r0, r1, [sp]
 800529a:	e7bc      	b.n	8005216 <_dtoa_r+0x56e>
 800529c:	08006a18 	.word	0x08006a18
 80052a0:	080069f0 	.word	0x080069f0
 80052a4:	3ff00000 	.word	0x3ff00000
 80052a8:	40240000 	.word	0x40240000
 80052ac:	401c0000 	.word	0x401c0000
 80052b0:	40140000 	.word	0x40140000
 80052b4:	3fe00000 	.word	0x3fe00000
 80052b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80052bc:	465d      	mov	r5, fp
 80052be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052c2:	4630      	mov	r0, r6
 80052c4:	4639      	mov	r1, r7
 80052c6:	f7fb fac9 	bl	800085c <__aeabi_ddiv>
 80052ca:	f7fb fc4d 	bl	8000b68 <__aeabi_d2iz>
 80052ce:	4680      	mov	r8, r0
 80052d0:	f7fb f930 	bl	8000534 <__aeabi_i2d>
 80052d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052d8:	f7fb f996 	bl	8000608 <__aeabi_dmul>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	4630      	mov	r0, r6
 80052e2:	4639      	mov	r1, r7
 80052e4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80052e8:	f7fa ffd6 	bl	8000298 <__aeabi_dsub>
 80052ec:	f805 6b01 	strb.w	r6, [r5], #1
 80052f0:	eba5 060b 	sub.w	r6, r5, fp
 80052f4:	45b1      	cmp	r9, r6
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	d139      	bne.n	8005370 <_dtoa_r+0x6c8>
 80052fc:	f7fa ffce 	bl	800029c <__adddf3>
 8005300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005304:	4606      	mov	r6, r0
 8005306:	460f      	mov	r7, r1
 8005308:	f7fb fc0e 	bl	8000b28 <__aeabi_dcmpgt>
 800530c:	b9c8      	cbnz	r0, 8005342 <_dtoa_r+0x69a>
 800530e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005312:	4630      	mov	r0, r6
 8005314:	4639      	mov	r1, r7
 8005316:	f7fb fbdf 	bl	8000ad8 <__aeabi_dcmpeq>
 800531a:	b110      	cbz	r0, 8005322 <_dtoa_r+0x67a>
 800531c:	f018 0f01 	tst.w	r8, #1
 8005320:	d10f      	bne.n	8005342 <_dtoa_r+0x69a>
 8005322:	9904      	ldr	r1, [sp, #16]
 8005324:	4620      	mov	r0, r4
 8005326:	f000 fb8b 	bl	8005a40 <_Bfree>
 800532a:	2300      	movs	r3, #0
 800532c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800532e:	702b      	strb	r3, [r5, #0]
 8005330:	f10a 0301 	add.w	r3, sl, #1
 8005334:	6013      	str	r3, [r2, #0]
 8005336:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 8241 	beq.w	80057c0 <_dtoa_r+0xb18>
 800533e:	601d      	str	r5, [r3, #0]
 8005340:	e23e      	b.n	80057c0 <_dtoa_r+0xb18>
 8005342:	f8cd a020 	str.w	sl, [sp, #32]
 8005346:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800534a:	2a39      	cmp	r2, #57	; 0x39
 800534c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8005350:	d108      	bne.n	8005364 <_dtoa_r+0x6bc>
 8005352:	459b      	cmp	fp, r3
 8005354:	d10a      	bne.n	800536c <_dtoa_r+0x6c4>
 8005356:	9b08      	ldr	r3, [sp, #32]
 8005358:	3301      	adds	r3, #1
 800535a:	9308      	str	r3, [sp, #32]
 800535c:	2330      	movs	r3, #48	; 0x30
 800535e:	f88b 3000 	strb.w	r3, [fp]
 8005362:	465b      	mov	r3, fp
 8005364:	781a      	ldrb	r2, [r3, #0]
 8005366:	3201      	adds	r2, #1
 8005368:	701a      	strb	r2, [r3, #0]
 800536a:	e78c      	b.n	8005286 <_dtoa_r+0x5de>
 800536c:	461d      	mov	r5, r3
 800536e:	e7ea      	b.n	8005346 <_dtoa_r+0x69e>
 8005370:	2200      	movs	r2, #0
 8005372:	4b9b      	ldr	r3, [pc, #620]	; (80055e0 <_dtoa_r+0x938>)
 8005374:	f7fb f948 	bl	8000608 <__aeabi_dmul>
 8005378:	2200      	movs	r2, #0
 800537a:	2300      	movs	r3, #0
 800537c:	4606      	mov	r6, r0
 800537e:	460f      	mov	r7, r1
 8005380:	f7fb fbaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8005384:	2800      	cmp	r0, #0
 8005386:	d09a      	beq.n	80052be <_dtoa_r+0x616>
 8005388:	e7cb      	b.n	8005322 <_dtoa_r+0x67a>
 800538a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800538c:	2a00      	cmp	r2, #0
 800538e:	f000 808b 	beq.w	80054a8 <_dtoa_r+0x800>
 8005392:	9a06      	ldr	r2, [sp, #24]
 8005394:	2a01      	cmp	r2, #1
 8005396:	dc6e      	bgt.n	8005476 <_dtoa_r+0x7ce>
 8005398:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800539a:	2a00      	cmp	r2, #0
 800539c:	d067      	beq.n	800546e <_dtoa_r+0x7c6>
 800539e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053a2:	9f07      	ldr	r7, [sp, #28]
 80053a4:	9d05      	ldr	r5, [sp, #20]
 80053a6:	9a05      	ldr	r2, [sp, #20]
 80053a8:	2101      	movs	r1, #1
 80053aa:	441a      	add	r2, r3
 80053ac:	4620      	mov	r0, r4
 80053ae:	9205      	str	r2, [sp, #20]
 80053b0:	4498      	add	r8, r3
 80053b2:	f000 fbe5 	bl	8005b80 <__i2b>
 80053b6:	4606      	mov	r6, r0
 80053b8:	2d00      	cmp	r5, #0
 80053ba:	dd0c      	ble.n	80053d6 <_dtoa_r+0x72e>
 80053bc:	f1b8 0f00 	cmp.w	r8, #0
 80053c0:	dd09      	ble.n	80053d6 <_dtoa_r+0x72e>
 80053c2:	4545      	cmp	r5, r8
 80053c4:	9a05      	ldr	r2, [sp, #20]
 80053c6:	462b      	mov	r3, r5
 80053c8:	bfa8      	it	ge
 80053ca:	4643      	movge	r3, r8
 80053cc:	1ad2      	subs	r2, r2, r3
 80053ce:	9205      	str	r2, [sp, #20]
 80053d0:	1aed      	subs	r5, r5, r3
 80053d2:	eba8 0803 	sub.w	r8, r8, r3
 80053d6:	9b07      	ldr	r3, [sp, #28]
 80053d8:	b1eb      	cbz	r3, 8005416 <_dtoa_r+0x76e>
 80053da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d067      	beq.n	80054b0 <_dtoa_r+0x808>
 80053e0:	b18f      	cbz	r7, 8005406 <_dtoa_r+0x75e>
 80053e2:	4631      	mov	r1, r6
 80053e4:	463a      	mov	r2, r7
 80053e6:	4620      	mov	r0, r4
 80053e8:	f000 fc6a 	bl	8005cc0 <__pow5mult>
 80053ec:	9a04      	ldr	r2, [sp, #16]
 80053ee:	4601      	mov	r1, r0
 80053f0:	4606      	mov	r6, r0
 80053f2:	4620      	mov	r0, r4
 80053f4:	f000 fbcd 	bl	8005b92 <__multiply>
 80053f8:	9904      	ldr	r1, [sp, #16]
 80053fa:	9008      	str	r0, [sp, #32]
 80053fc:	4620      	mov	r0, r4
 80053fe:	f000 fb1f 	bl	8005a40 <_Bfree>
 8005402:	9b08      	ldr	r3, [sp, #32]
 8005404:	9304      	str	r3, [sp, #16]
 8005406:	9b07      	ldr	r3, [sp, #28]
 8005408:	1bda      	subs	r2, r3, r7
 800540a:	d004      	beq.n	8005416 <_dtoa_r+0x76e>
 800540c:	9904      	ldr	r1, [sp, #16]
 800540e:	4620      	mov	r0, r4
 8005410:	f000 fc56 	bl	8005cc0 <__pow5mult>
 8005414:	9004      	str	r0, [sp, #16]
 8005416:	2101      	movs	r1, #1
 8005418:	4620      	mov	r0, r4
 800541a:	f000 fbb1 	bl	8005b80 <__i2b>
 800541e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005420:	4607      	mov	r7, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 81d0 	beq.w	80057c8 <_dtoa_r+0xb20>
 8005428:	461a      	mov	r2, r3
 800542a:	4601      	mov	r1, r0
 800542c:	4620      	mov	r0, r4
 800542e:	f000 fc47 	bl	8005cc0 <__pow5mult>
 8005432:	9b06      	ldr	r3, [sp, #24]
 8005434:	2b01      	cmp	r3, #1
 8005436:	4607      	mov	r7, r0
 8005438:	dc40      	bgt.n	80054bc <_dtoa_r+0x814>
 800543a:	9b00      	ldr	r3, [sp, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d139      	bne.n	80054b4 <_dtoa_r+0x80c>
 8005440:	9b01      	ldr	r3, [sp, #4]
 8005442:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005446:	2b00      	cmp	r3, #0
 8005448:	d136      	bne.n	80054b8 <_dtoa_r+0x810>
 800544a:	9b01      	ldr	r3, [sp, #4]
 800544c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005450:	0d1b      	lsrs	r3, r3, #20
 8005452:	051b      	lsls	r3, r3, #20
 8005454:	b12b      	cbz	r3, 8005462 <_dtoa_r+0x7ba>
 8005456:	9b05      	ldr	r3, [sp, #20]
 8005458:	3301      	adds	r3, #1
 800545a:	9305      	str	r3, [sp, #20]
 800545c:	f108 0801 	add.w	r8, r8, #1
 8005460:	2301      	movs	r3, #1
 8005462:	9307      	str	r3, [sp, #28]
 8005464:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005466:	2b00      	cmp	r3, #0
 8005468:	d12a      	bne.n	80054c0 <_dtoa_r+0x818>
 800546a:	2001      	movs	r0, #1
 800546c:	e030      	b.n	80054d0 <_dtoa_r+0x828>
 800546e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005470:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005474:	e795      	b.n	80053a2 <_dtoa_r+0x6fa>
 8005476:	9b07      	ldr	r3, [sp, #28]
 8005478:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800547c:	42bb      	cmp	r3, r7
 800547e:	bfbf      	itttt	lt
 8005480:	9b07      	ldrlt	r3, [sp, #28]
 8005482:	9707      	strlt	r7, [sp, #28]
 8005484:	1afa      	sublt	r2, r7, r3
 8005486:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005488:	bfbb      	ittet	lt
 800548a:	189b      	addlt	r3, r3, r2
 800548c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800548e:	1bdf      	subge	r7, r3, r7
 8005490:	2700      	movlt	r7, #0
 8005492:	f1b9 0f00 	cmp.w	r9, #0
 8005496:	bfb5      	itete	lt
 8005498:	9b05      	ldrlt	r3, [sp, #20]
 800549a:	9d05      	ldrge	r5, [sp, #20]
 800549c:	eba3 0509 	sublt.w	r5, r3, r9
 80054a0:	464b      	movge	r3, r9
 80054a2:	bfb8      	it	lt
 80054a4:	2300      	movlt	r3, #0
 80054a6:	e77e      	b.n	80053a6 <_dtoa_r+0x6fe>
 80054a8:	9f07      	ldr	r7, [sp, #28]
 80054aa:	9d05      	ldr	r5, [sp, #20]
 80054ac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80054ae:	e783      	b.n	80053b8 <_dtoa_r+0x710>
 80054b0:	9a07      	ldr	r2, [sp, #28]
 80054b2:	e7ab      	b.n	800540c <_dtoa_r+0x764>
 80054b4:	2300      	movs	r3, #0
 80054b6:	e7d4      	b.n	8005462 <_dtoa_r+0x7ba>
 80054b8:	9b00      	ldr	r3, [sp, #0]
 80054ba:	e7d2      	b.n	8005462 <_dtoa_r+0x7ba>
 80054bc:	2300      	movs	r3, #0
 80054be:	9307      	str	r3, [sp, #28]
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80054c6:	6918      	ldr	r0, [r3, #16]
 80054c8:	f000 fb0c 	bl	8005ae4 <__hi0bits>
 80054cc:	f1c0 0020 	rsb	r0, r0, #32
 80054d0:	4440      	add	r0, r8
 80054d2:	f010 001f 	ands.w	r0, r0, #31
 80054d6:	d047      	beq.n	8005568 <_dtoa_r+0x8c0>
 80054d8:	f1c0 0320 	rsb	r3, r0, #32
 80054dc:	2b04      	cmp	r3, #4
 80054de:	dd3b      	ble.n	8005558 <_dtoa_r+0x8b0>
 80054e0:	9b05      	ldr	r3, [sp, #20]
 80054e2:	f1c0 001c 	rsb	r0, r0, #28
 80054e6:	4403      	add	r3, r0
 80054e8:	9305      	str	r3, [sp, #20]
 80054ea:	4405      	add	r5, r0
 80054ec:	4480      	add	r8, r0
 80054ee:	9b05      	ldr	r3, [sp, #20]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	dd05      	ble.n	8005500 <_dtoa_r+0x858>
 80054f4:	461a      	mov	r2, r3
 80054f6:	9904      	ldr	r1, [sp, #16]
 80054f8:	4620      	mov	r0, r4
 80054fa:	f000 fc2f 	bl	8005d5c <__lshift>
 80054fe:	9004      	str	r0, [sp, #16]
 8005500:	f1b8 0f00 	cmp.w	r8, #0
 8005504:	dd05      	ble.n	8005512 <_dtoa_r+0x86a>
 8005506:	4639      	mov	r1, r7
 8005508:	4642      	mov	r2, r8
 800550a:	4620      	mov	r0, r4
 800550c:	f000 fc26 	bl	8005d5c <__lshift>
 8005510:	4607      	mov	r7, r0
 8005512:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005514:	b353      	cbz	r3, 800556c <_dtoa_r+0x8c4>
 8005516:	4639      	mov	r1, r7
 8005518:	9804      	ldr	r0, [sp, #16]
 800551a:	f000 fc73 	bl	8005e04 <__mcmp>
 800551e:	2800      	cmp	r0, #0
 8005520:	da24      	bge.n	800556c <_dtoa_r+0x8c4>
 8005522:	2300      	movs	r3, #0
 8005524:	220a      	movs	r2, #10
 8005526:	9904      	ldr	r1, [sp, #16]
 8005528:	4620      	mov	r0, r4
 800552a:	f000 faa0 	bl	8005a6e <__multadd>
 800552e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005530:	9004      	str	r0, [sp, #16]
 8005532:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 814d 	beq.w	80057d6 <_dtoa_r+0xb2e>
 800553c:	2300      	movs	r3, #0
 800553e:	4631      	mov	r1, r6
 8005540:	220a      	movs	r2, #10
 8005542:	4620      	mov	r0, r4
 8005544:	f000 fa93 	bl	8005a6e <__multadd>
 8005548:	9b02      	ldr	r3, [sp, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	4606      	mov	r6, r0
 800554e:	dc4f      	bgt.n	80055f0 <_dtoa_r+0x948>
 8005550:	9b06      	ldr	r3, [sp, #24]
 8005552:	2b02      	cmp	r3, #2
 8005554:	dd4c      	ble.n	80055f0 <_dtoa_r+0x948>
 8005556:	e011      	b.n	800557c <_dtoa_r+0x8d4>
 8005558:	d0c9      	beq.n	80054ee <_dtoa_r+0x846>
 800555a:	9a05      	ldr	r2, [sp, #20]
 800555c:	331c      	adds	r3, #28
 800555e:	441a      	add	r2, r3
 8005560:	9205      	str	r2, [sp, #20]
 8005562:	441d      	add	r5, r3
 8005564:	4498      	add	r8, r3
 8005566:	e7c2      	b.n	80054ee <_dtoa_r+0x846>
 8005568:	4603      	mov	r3, r0
 800556a:	e7f6      	b.n	800555a <_dtoa_r+0x8b2>
 800556c:	f1b9 0f00 	cmp.w	r9, #0
 8005570:	dc38      	bgt.n	80055e4 <_dtoa_r+0x93c>
 8005572:	9b06      	ldr	r3, [sp, #24]
 8005574:	2b02      	cmp	r3, #2
 8005576:	dd35      	ble.n	80055e4 <_dtoa_r+0x93c>
 8005578:	f8cd 9008 	str.w	r9, [sp, #8]
 800557c:	9b02      	ldr	r3, [sp, #8]
 800557e:	b963      	cbnz	r3, 800559a <_dtoa_r+0x8f2>
 8005580:	4639      	mov	r1, r7
 8005582:	2205      	movs	r2, #5
 8005584:	4620      	mov	r0, r4
 8005586:	f000 fa72 	bl	8005a6e <__multadd>
 800558a:	4601      	mov	r1, r0
 800558c:	4607      	mov	r7, r0
 800558e:	9804      	ldr	r0, [sp, #16]
 8005590:	f000 fc38 	bl	8005e04 <__mcmp>
 8005594:	2800      	cmp	r0, #0
 8005596:	f73f adcc 	bgt.w	8005132 <_dtoa_r+0x48a>
 800559a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800559c:	465d      	mov	r5, fp
 800559e:	ea6f 0a03 	mvn.w	sl, r3
 80055a2:	f04f 0900 	mov.w	r9, #0
 80055a6:	4639      	mov	r1, r7
 80055a8:	4620      	mov	r0, r4
 80055aa:	f000 fa49 	bl	8005a40 <_Bfree>
 80055ae:	2e00      	cmp	r6, #0
 80055b0:	f43f aeb7 	beq.w	8005322 <_dtoa_r+0x67a>
 80055b4:	f1b9 0f00 	cmp.w	r9, #0
 80055b8:	d005      	beq.n	80055c6 <_dtoa_r+0x91e>
 80055ba:	45b1      	cmp	r9, r6
 80055bc:	d003      	beq.n	80055c6 <_dtoa_r+0x91e>
 80055be:	4649      	mov	r1, r9
 80055c0:	4620      	mov	r0, r4
 80055c2:	f000 fa3d 	bl	8005a40 <_Bfree>
 80055c6:	4631      	mov	r1, r6
 80055c8:	4620      	mov	r0, r4
 80055ca:	f000 fa39 	bl	8005a40 <_Bfree>
 80055ce:	e6a8      	b.n	8005322 <_dtoa_r+0x67a>
 80055d0:	2700      	movs	r7, #0
 80055d2:	463e      	mov	r6, r7
 80055d4:	e7e1      	b.n	800559a <_dtoa_r+0x8f2>
 80055d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80055da:	463e      	mov	r6, r7
 80055dc:	e5a9      	b.n	8005132 <_dtoa_r+0x48a>
 80055de:	bf00      	nop
 80055e0:	40240000 	.word	0x40240000
 80055e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055e6:	f8cd 9008 	str.w	r9, [sp, #8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 80fa 	beq.w	80057e4 <_dtoa_r+0xb3c>
 80055f0:	2d00      	cmp	r5, #0
 80055f2:	dd05      	ble.n	8005600 <_dtoa_r+0x958>
 80055f4:	4631      	mov	r1, r6
 80055f6:	462a      	mov	r2, r5
 80055f8:	4620      	mov	r0, r4
 80055fa:	f000 fbaf 	bl	8005d5c <__lshift>
 80055fe:	4606      	mov	r6, r0
 8005600:	9b07      	ldr	r3, [sp, #28]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d04c      	beq.n	80056a0 <_dtoa_r+0x9f8>
 8005606:	6871      	ldr	r1, [r6, #4]
 8005608:	4620      	mov	r0, r4
 800560a:	f000 f9e5 	bl	80059d8 <_Balloc>
 800560e:	6932      	ldr	r2, [r6, #16]
 8005610:	3202      	adds	r2, #2
 8005612:	4605      	mov	r5, r0
 8005614:	0092      	lsls	r2, r2, #2
 8005616:	f106 010c 	add.w	r1, r6, #12
 800561a:	300c      	adds	r0, #12
 800561c:	f7fe fe2e 	bl	800427c <memcpy>
 8005620:	2201      	movs	r2, #1
 8005622:	4629      	mov	r1, r5
 8005624:	4620      	mov	r0, r4
 8005626:	f000 fb99 	bl	8005d5c <__lshift>
 800562a:	9b00      	ldr	r3, [sp, #0]
 800562c:	f8cd b014 	str.w	fp, [sp, #20]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	46b1      	mov	r9, r6
 8005636:	9307      	str	r3, [sp, #28]
 8005638:	4606      	mov	r6, r0
 800563a:	4639      	mov	r1, r7
 800563c:	9804      	ldr	r0, [sp, #16]
 800563e:	f7ff faa5 	bl	8004b8c <quorem>
 8005642:	4649      	mov	r1, r9
 8005644:	4605      	mov	r5, r0
 8005646:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800564a:	9804      	ldr	r0, [sp, #16]
 800564c:	f000 fbda 	bl	8005e04 <__mcmp>
 8005650:	4632      	mov	r2, r6
 8005652:	9000      	str	r0, [sp, #0]
 8005654:	4639      	mov	r1, r7
 8005656:	4620      	mov	r0, r4
 8005658:	f000 fbee 	bl	8005e38 <__mdiff>
 800565c:	68c3      	ldr	r3, [r0, #12]
 800565e:	4602      	mov	r2, r0
 8005660:	bb03      	cbnz	r3, 80056a4 <_dtoa_r+0x9fc>
 8005662:	4601      	mov	r1, r0
 8005664:	9008      	str	r0, [sp, #32]
 8005666:	9804      	ldr	r0, [sp, #16]
 8005668:	f000 fbcc 	bl	8005e04 <__mcmp>
 800566c:	9a08      	ldr	r2, [sp, #32]
 800566e:	4603      	mov	r3, r0
 8005670:	4611      	mov	r1, r2
 8005672:	4620      	mov	r0, r4
 8005674:	9308      	str	r3, [sp, #32]
 8005676:	f000 f9e3 	bl	8005a40 <_Bfree>
 800567a:	9b08      	ldr	r3, [sp, #32]
 800567c:	b9a3      	cbnz	r3, 80056a8 <_dtoa_r+0xa00>
 800567e:	9a06      	ldr	r2, [sp, #24]
 8005680:	b992      	cbnz	r2, 80056a8 <_dtoa_r+0xa00>
 8005682:	9a07      	ldr	r2, [sp, #28]
 8005684:	b982      	cbnz	r2, 80056a8 <_dtoa_r+0xa00>
 8005686:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800568a:	d029      	beq.n	80056e0 <_dtoa_r+0xa38>
 800568c:	9b00      	ldr	r3, [sp, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	dd01      	ble.n	8005696 <_dtoa_r+0x9ee>
 8005692:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005696:	9b05      	ldr	r3, [sp, #20]
 8005698:	1c5d      	adds	r5, r3, #1
 800569a:	f883 8000 	strb.w	r8, [r3]
 800569e:	e782      	b.n	80055a6 <_dtoa_r+0x8fe>
 80056a0:	4630      	mov	r0, r6
 80056a2:	e7c2      	b.n	800562a <_dtoa_r+0x982>
 80056a4:	2301      	movs	r3, #1
 80056a6:	e7e3      	b.n	8005670 <_dtoa_r+0x9c8>
 80056a8:	9a00      	ldr	r2, [sp, #0]
 80056aa:	2a00      	cmp	r2, #0
 80056ac:	db04      	blt.n	80056b8 <_dtoa_r+0xa10>
 80056ae:	d125      	bne.n	80056fc <_dtoa_r+0xa54>
 80056b0:	9a06      	ldr	r2, [sp, #24]
 80056b2:	bb1a      	cbnz	r2, 80056fc <_dtoa_r+0xa54>
 80056b4:	9a07      	ldr	r2, [sp, #28]
 80056b6:	bb0a      	cbnz	r2, 80056fc <_dtoa_r+0xa54>
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	ddec      	ble.n	8005696 <_dtoa_r+0x9ee>
 80056bc:	2201      	movs	r2, #1
 80056be:	9904      	ldr	r1, [sp, #16]
 80056c0:	4620      	mov	r0, r4
 80056c2:	f000 fb4b 	bl	8005d5c <__lshift>
 80056c6:	4639      	mov	r1, r7
 80056c8:	9004      	str	r0, [sp, #16]
 80056ca:	f000 fb9b 	bl	8005e04 <__mcmp>
 80056ce:	2800      	cmp	r0, #0
 80056d0:	dc03      	bgt.n	80056da <_dtoa_r+0xa32>
 80056d2:	d1e0      	bne.n	8005696 <_dtoa_r+0x9ee>
 80056d4:	f018 0f01 	tst.w	r8, #1
 80056d8:	d0dd      	beq.n	8005696 <_dtoa_r+0x9ee>
 80056da:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80056de:	d1d8      	bne.n	8005692 <_dtoa_r+0x9ea>
 80056e0:	9b05      	ldr	r3, [sp, #20]
 80056e2:	9a05      	ldr	r2, [sp, #20]
 80056e4:	1c5d      	adds	r5, r3, #1
 80056e6:	2339      	movs	r3, #57	; 0x39
 80056e8:	7013      	strb	r3, [r2, #0]
 80056ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80056ee:	2b39      	cmp	r3, #57	; 0x39
 80056f0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80056f4:	d04f      	beq.n	8005796 <_dtoa_r+0xaee>
 80056f6:	3301      	adds	r3, #1
 80056f8:	7013      	strb	r3, [r2, #0]
 80056fa:	e754      	b.n	80055a6 <_dtoa_r+0x8fe>
 80056fc:	9a05      	ldr	r2, [sp, #20]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f102 0501 	add.w	r5, r2, #1
 8005704:	dd06      	ble.n	8005714 <_dtoa_r+0xa6c>
 8005706:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800570a:	d0e9      	beq.n	80056e0 <_dtoa_r+0xa38>
 800570c:	f108 0801 	add.w	r8, r8, #1
 8005710:	9b05      	ldr	r3, [sp, #20]
 8005712:	e7c2      	b.n	800569a <_dtoa_r+0x9f2>
 8005714:	9a02      	ldr	r2, [sp, #8]
 8005716:	f805 8c01 	strb.w	r8, [r5, #-1]
 800571a:	eba5 030b 	sub.w	r3, r5, fp
 800571e:	4293      	cmp	r3, r2
 8005720:	d021      	beq.n	8005766 <_dtoa_r+0xabe>
 8005722:	2300      	movs	r3, #0
 8005724:	220a      	movs	r2, #10
 8005726:	9904      	ldr	r1, [sp, #16]
 8005728:	4620      	mov	r0, r4
 800572a:	f000 f9a0 	bl	8005a6e <__multadd>
 800572e:	45b1      	cmp	r9, r6
 8005730:	9004      	str	r0, [sp, #16]
 8005732:	f04f 0300 	mov.w	r3, #0
 8005736:	f04f 020a 	mov.w	r2, #10
 800573a:	4649      	mov	r1, r9
 800573c:	4620      	mov	r0, r4
 800573e:	d105      	bne.n	800574c <_dtoa_r+0xaa4>
 8005740:	f000 f995 	bl	8005a6e <__multadd>
 8005744:	4681      	mov	r9, r0
 8005746:	4606      	mov	r6, r0
 8005748:	9505      	str	r5, [sp, #20]
 800574a:	e776      	b.n	800563a <_dtoa_r+0x992>
 800574c:	f000 f98f 	bl	8005a6e <__multadd>
 8005750:	4631      	mov	r1, r6
 8005752:	4681      	mov	r9, r0
 8005754:	2300      	movs	r3, #0
 8005756:	220a      	movs	r2, #10
 8005758:	4620      	mov	r0, r4
 800575a:	f000 f988 	bl	8005a6e <__multadd>
 800575e:	4606      	mov	r6, r0
 8005760:	e7f2      	b.n	8005748 <_dtoa_r+0xaa0>
 8005762:	f04f 0900 	mov.w	r9, #0
 8005766:	2201      	movs	r2, #1
 8005768:	9904      	ldr	r1, [sp, #16]
 800576a:	4620      	mov	r0, r4
 800576c:	f000 faf6 	bl	8005d5c <__lshift>
 8005770:	4639      	mov	r1, r7
 8005772:	9004      	str	r0, [sp, #16]
 8005774:	f000 fb46 	bl	8005e04 <__mcmp>
 8005778:	2800      	cmp	r0, #0
 800577a:	dcb6      	bgt.n	80056ea <_dtoa_r+0xa42>
 800577c:	d102      	bne.n	8005784 <_dtoa_r+0xadc>
 800577e:	f018 0f01 	tst.w	r8, #1
 8005782:	d1b2      	bne.n	80056ea <_dtoa_r+0xa42>
 8005784:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005788:	2b30      	cmp	r3, #48	; 0x30
 800578a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800578e:	f47f af0a 	bne.w	80055a6 <_dtoa_r+0x8fe>
 8005792:	4615      	mov	r5, r2
 8005794:	e7f6      	b.n	8005784 <_dtoa_r+0xadc>
 8005796:	4593      	cmp	fp, r2
 8005798:	d105      	bne.n	80057a6 <_dtoa_r+0xafe>
 800579a:	2331      	movs	r3, #49	; 0x31
 800579c:	f10a 0a01 	add.w	sl, sl, #1
 80057a0:	f88b 3000 	strb.w	r3, [fp]
 80057a4:	e6ff      	b.n	80055a6 <_dtoa_r+0x8fe>
 80057a6:	4615      	mov	r5, r2
 80057a8:	e79f      	b.n	80056ea <_dtoa_r+0xa42>
 80057aa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005810 <_dtoa_r+0xb68>
 80057ae:	e007      	b.n	80057c0 <_dtoa_r+0xb18>
 80057b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057b2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005814 <_dtoa_r+0xb6c>
 80057b6:	b11b      	cbz	r3, 80057c0 <_dtoa_r+0xb18>
 80057b8:	f10b 0308 	add.w	r3, fp, #8
 80057bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	4658      	mov	r0, fp
 80057c2:	b017      	add	sp, #92	; 0x5c
 80057c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057c8:	9b06      	ldr	r3, [sp, #24]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	f77f ae35 	ble.w	800543a <_dtoa_r+0x792>
 80057d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057d2:	9307      	str	r3, [sp, #28]
 80057d4:	e649      	b.n	800546a <_dtoa_r+0x7c2>
 80057d6:	9b02      	ldr	r3, [sp, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	dc03      	bgt.n	80057e4 <_dtoa_r+0xb3c>
 80057dc:	9b06      	ldr	r3, [sp, #24]
 80057de:	2b02      	cmp	r3, #2
 80057e0:	f73f aecc 	bgt.w	800557c <_dtoa_r+0x8d4>
 80057e4:	465d      	mov	r5, fp
 80057e6:	4639      	mov	r1, r7
 80057e8:	9804      	ldr	r0, [sp, #16]
 80057ea:	f7ff f9cf 	bl	8004b8c <quorem>
 80057ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80057f2:	f805 8b01 	strb.w	r8, [r5], #1
 80057f6:	9a02      	ldr	r2, [sp, #8]
 80057f8:	eba5 030b 	sub.w	r3, r5, fp
 80057fc:	429a      	cmp	r2, r3
 80057fe:	ddb0      	ble.n	8005762 <_dtoa_r+0xaba>
 8005800:	2300      	movs	r3, #0
 8005802:	220a      	movs	r2, #10
 8005804:	9904      	ldr	r1, [sp, #16]
 8005806:	4620      	mov	r0, r4
 8005808:	f000 f931 	bl	8005a6e <__multadd>
 800580c:	9004      	str	r0, [sp, #16]
 800580e:	e7ea      	b.n	80057e6 <_dtoa_r+0xb3e>
 8005810:	0800695c 	.word	0x0800695c
 8005814:	08006980 	.word	0x08006980

08005818 <std>:
 8005818:	2300      	movs	r3, #0
 800581a:	b510      	push	{r4, lr}
 800581c:	4604      	mov	r4, r0
 800581e:	e9c0 3300 	strd	r3, r3, [r0]
 8005822:	6083      	str	r3, [r0, #8]
 8005824:	8181      	strh	r1, [r0, #12]
 8005826:	6643      	str	r3, [r0, #100]	; 0x64
 8005828:	81c2      	strh	r2, [r0, #14]
 800582a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800582e:	6183      	str	r3, [r0, #24]
 8005830:	4619      	mov	r1, r3
 8005832:	2208      	movs	r2, #8
 8005834:	305c      	adds	r0, #92	; 0x5c
 8005836:	f7fe fd2c 	bl	8004292 <memset>
 800583a:	4b05      	ldr	r3, [pc, #20]	; (8005850 <std+0x38>)
 800583c:	6263      	str	r3, [r4, #36]	; 0x24
 800583e:	4b05      	ldr	r3, [pc, #20]	; (8005854 <std+0x3c>)
 8005840:	62a3      	str	r3, [r4, #40]	; 0x28
 8005842:	4b05      	ldr	r3, [pc, #20]	; (8005858 <std+0x40>)
 8005844:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005846:	4b05      	ldr	r3, [pc, #20]	; (800585c <std+0x44>)
 8005848:	6224      	str	r4, [r4, #32]
 800584a:	6323      	str	r3, [r4, #48]	; 0x30
 800584c:	bd10      	pop	{r4, pc}
 800584e:	bf00      	nop
 8005850:	0800639d 	.word	0x0800639d
 8005854:	080063bf 	.word	0x080063bf
 8005858:	080063f7 	.word	0x080063f7
 800585c:	0800641b 	.word	0x0800641b

08005860 <_cleanup_r>:
 8005860:	4901      	ldr	r1, [pc, #4]	; (8005868 <_cleanup_r+0x8>)
 8005862:	f000 b885 	b.w	8005970 <_fwalk_reent>
 8005866:	bf00      	nop
 8005868:	080066f5 	.word	0x080066f5

0800586c <__sfmoreglue>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	1e4a      	subs	r2, r1, #1
 8005870:	2568      	movs	r5, #104	; 0x68
 8005872:	4355      	muls	r5, r2
 8005874:	460e      	mov	r6, r1
 8005876:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800587a:	f000 fbe5 	bl	8006048 <_malloc_r>
 800587e:	4604      	mov	r4, r0
 8005880:	b140      	cbz	r0, 8005894 <__sfmoreglue+0x28>
 8005882:	2100      	movs	r1, #0
 8005884:	e9c0 1600 	strd	r1, r6, [r0]
 8005888:	300c      	adds	r0, #12
 800588a:	60a0      	str	r0, [r4, #8]
 800588c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005890:	f7fe fcff 	bl	8004292 <memset>
 8005894:	4620      	mov	r0, r4
 8005896:	bd70      	pop	{r4, r5, r6, pc}

08005898 <__sinit>:
 8005898:	6983      	ldr	r3, [r0, #24]
 800589a:	b510      	push	{r4, lr}
 800589c:	4604      	mov	r4, r0
 800589e:	bb33      	cbnz	r3, 80058ee <__sinit+0x56>
 80058a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80058a4:	6503      	str	r3, [r0, #80]	; 0x50
 80058a6:	4b12      	ldr	r3, [pc, #72]	; (80058f0 <__sinit+0x58>)
 80058a8:	4a12      	ldr	r2, [pc, #72]	; (80058f4 <__sinit+0x5c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6282      	str	r2, [r0, #40]	; 0x28
 80058ae:	4298      	cmp	r0, r3
 80058b0:	bf04      	itt	eq
 80058b2:	2301      	moveq	r3, #1
 80058b4:	6183      	streq	r3, [r0, #24]
 80058b6:	f000 f81f 	bl	80058f8 <__sfp>
 80058ba:	6060      	str	r0, [r4, #4]
 80058bc:	4620      	mov	r0, r4
 80058be:	f000 f81b 	bl	80058f8 <__sfp>
 80058c2:	60a0      	str	r0, [r4, #8]
 80058c4:	4620      	mov	r0, r4
 80058c6:	f000 f817 	bl	80058f8 <__sfp>
 80058ca:	2200      	movs	r2, #0
 80058cc:	60e0      	str	r0, [r4, #12]
 80058ce:	2104      	movs	r1, #4
 80058d0:	6860      	ldr	r0, [r4, #4]
 80058d2:	f7ff ffa1 	bl	8005818 <std>
 80058d6:	2201      	movs	r2, #1
 80058d8:	2109      	movs	r1, #9
 80058da:	68a0      	ldr	r0, [r4, #8]
 80058dc:	f7ff ff9c 	bl	8005818 <std>
 80058e0:	2202      	movs	r2, #2
 80058e2:	2112      	movs	r1, #18
 80058e4:	68e0      	ldr	r0, [r4, #12]
 80058e6:	f7ff ff97 	bl	8005818 <std>
 80058ea:	2301      	movs	r3, #1
 80058ec:	61a3      	str	r3, [r4, #24]
 80058ee:	bd10      	pop	{r4, pc}
 80058f0:	08006948 	.word	0x08006948
 80058f4:	08005861 	.word	0x08005861

080058f8 <__sfp>:
 80058f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fa:	4b1b      	ldr	r3, [pc, #108]	; (8005968 <__sfp+0x70>)
 80058fc:	681e      	ldr	r6, [r3, #0]
 80058fe:	69b3      	ldr	r3, [r6, #24]
 8005900:	4607      	mov	r7, r0
 8005902:	b913      	cbnz	r3, 800590a <__sfp+0x12>
 8005904:	4630      	mov	r0, r6
 8005906:	f7ff ffc7 	bl	8005898 <__sinit>
 800590a:	3648      	adds	r6, #72	; 0x48
 800590c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005910:	3b01      	subs	r3, #1
 8005912:	d503      	bpl.n	800591c <__sfp+0x24>
 8005914:	6833      	ldr	r3, [r6, #0]
 8005916:	b133      	cbz	r3, 8005926 <__sfp+0x2e>
 8005918:	6836      	ldr	r6, [r6, #0]
 800591a:	e7f7      	b.n	800590c <__sfp+0x14>
 800591c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005920:	b16d      	cbz	r5, 800593e <__sfp+0x46>
 8005922:	3468      	adds	r4, #104	; 0x68
 8005924:	e7f4      	b.n	8005910 <__sfp+0x18>
 8005926:	2104      	movs	r1, #4
 8005928:	4638      	mov	r0, r7
 800592a:	f7ff ff9f 	bl	800586c <__sfmoreglue>
 800592e:	6030      	str	r0, [r6, #0]
 8005930:	2800      	cmp	r0, #0
 8005932:	d1f1      	bne.n	8005918 <__sfp+0x20>
 8005934:	230c      	movs	r3, #12
 8005936:	603b      	str	r3, [r7, #0]
 8005938:	4604      	mov	r4, r0
 800593a:	4620      	mov	r0, r4
 800593c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800593e:	4b0b      	ldr	r3, [pc, #44]	; (800596c <__sfp+0x74>)
 8005940:	6665      	str	r5, [r4, #100]	; 0x64
 8005942:	e9c4 5500 	strd	r5, r5, [r4]
 8005946:	60a5      	str	r5, [r4, #8]
 8005948:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800594c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005950:	2208      	movs	r2, #8
 8005952:	4629      	mov	r1, r5
 8005954:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005958:	f7fe fc9b 	bl	8004292 <memset>
 800595c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005960:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005964:	e7e9      	b.n	800593a <__sfp+0x42>
 8005966:	bf00      	nop
 8005968:	08006948 	.word	0x08006948
 800596c:	ffff0001 	.word	0xffff0001

08005970 <_fwalk_reent>:
 8005970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005974:	4680      	mov	r8, r0
 8005976:	4689      	mov	r9, r1
 8005978:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800597c:	2600      	movs	r6, #0
 800597e:	b914      	cbnz	r4, 8005986 <_fwalk_reent+0x16>
 8005980:	4630      	mov	r0, r6
 8005982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005986:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800598a:	3f01      	subs	r7, #1
 800598c:	d501      	bpl.n	8005992 <_fwalk_reent+0x22>
 800598e:	6824      	ldr	r4, [r4, #0]
 8005990:	e7f5      	b.n	800597e <_fwalk_reent+0xe>
 8005992:	89ab      	ldrh	r3, [r5, #12]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d907      	bls.n	80059a8 <_fwalk_reent+0x38>
 8005998:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800599c:	3301      	adds	r3, #1
 800599e:	d003      	beq.n	80059a8 <_fwalk_reent+0x38>
 80059a0:	4629      	mov	r1, r5
 80059a2:	4640      	mov	r0, r8
 80059a4:	47c8      	blx	r9
 80059a6:	4306      	orrs	r6, r0
 80059a8:	3568      	adds	r5, #104	; 0x68
 80059aa:	e7ee      	b.n	800598a <_fwalk_reent+0x1a>

080059ac <_localeconv_r>:
 80059ac:	4b04      	ldr	r3, [pc, #16]	; (80059c0 <_localeconv_r+0x14>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6a18      	ldr	r0, [r3, #32]
 80059b2:	4b04      	ldr	r3, [pc, #16]	; (80059c4 <_localeconv_r+0x18>)
 80059b4:	2800      	cmp	r0, #0
 80059b6:	bf08      	it	eq
 80059b8:	4618      	moveq	r0, r3
 80059ba:	30f0      	adds	r0, #240	; 0xf0
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	2000000c 	.word	0x2000000c
 80059c4:	20000070 	.word	0x20000070

080059c8 <malloc>:
 80059c8:	4b02      	ldr	r3, [pc, #8]	; (80059d4 <malloc+0xc>)
 80059ca:	4601      	mov	r1, r0
 80059cc:	6818      	ldr	r0, [r3, #0]
 80059ce:	f000 bb3b 	b.w	8006048 <_malloc_r>
 80059d2:	bf00      	nop
 80059d4:	2000000c 	.word	0x2000000c

080059d8 <_Balloc>:
 80059d8:	b570      	push	{r4, r5, r6, lr}
 80059da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80059dc:	4604      	mov	r4, r0
 80059de:	460e      	mov	r6, r1
 80059e0:	b93d      	cbnz	r5, 80059f2 <_Balloc+0x1a>
 80059e2:	2010      	movs	r0, #16
 80059e4:	f7ff fff0 	bl	80059c8 <malloc>
 80059e8:	6260      	str	r0, [r4, #36]	; 0x24
 80059ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80059ee:	6005      	str	r5, [r0, #0]
 80059f0:	60c5      	str	r5, [r0, #12]
 80059f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80059f4:	68eb      	ldr	r3, [r5, #12]
 80059f6:	b183      	cbz	r3, 8005a1a <_Balloc+0x42>
 80059f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005a00:	b9b8      	cbnz	r0, 8005a32 <_Balloc+0x5a>
 8005a02:	2101      	movs	r1, #1
 8005a04:	fa01 f506 	lsl.w	r5, r1, r6
 8005a08:	1d6a      	adds	r2, r5, #5
 8005a0a:	0092      	lsls	r2, r2, #2
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	f000 fabf 	bl	8005f90 <_calloc_r>
 8005a12:	b160      	cbz	r0, 8005a2e <_Balloc+0x56>
 8005a14:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005a18:	e00e      	b.n	8005a38 <_Balloc+0x60>
 8005a1a:	2221      	movs	r2, #33	; 0x21
 8005a1c:	2104      	movs	r1, #4
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f000 fab6 	bl	8005f90 <_calloc_r>
 8005a24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a26:	60e8      	str	r0, [r5, #12]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1e4      	bne.n	80059f8 <_Balloc+0x20>
 8005a2e:	2000      	movs	r0, #0
 8005a30:	bd70      	pop	{r4, r5, r6, pc}
 8005a32:	6802      	ldr	r2, [r0, #0]
 8005a34:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a3e:	e7f7      	b.n	8005a30 <_Balloc+0x58>

08005a40 <_Bfree>:
 8005a40:	b570      	push	{r4, r5, r6, lr}
 8005a42:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005a44:	4606      	mov	r6, r0
 8005a46:	460d      	mov	r5, r1
 8005a48:	b93c      	cbnz	r4, 8005a5a <_Bfree+0x1a>
 8005a4a:	2010      	movs	r0, #16
 8005a4c:	f7ff ffbc 	bl	80059c8 <malloc>
 8005a50:	6270      	str	r0, [r6, #36]	; 0x24
 8005a52:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a56:	6004      	str	r4, [r0, #0]
 8005a58:	60c4      	str	r4, [r0, #12]
 8005a5a:	b13d      	cbz	r5, 8005a6c <_Bfree+0x2c>
 8005a5c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005a5e:	686a      	ldr	r2, [r5, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a66:	6029      	str	r1, [r5, #0]
 8005a68:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005a6c:	bd70      	pop	{r4, r5, r6, pc}

08005a6e <__multadd>:
 8005a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a72:	690d      	ldr	r5, [r1, #16]
 8005a74:	461f      	mov	r7, r3
 8005a76:	4606      	mov	r6, r0
 8005a78:	460c      	mov	r4, r1
 8005a7a:	f101 0c14 	add.w	ip, r1, #20
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f8dc 0000 	ldr.w	r0, [ip]
 8005a84:	b281      	uxth	r1, r0
 8005a86:	fb02 7101 	mla	r1, r2, r1, r7
 8005a8a:	0c0f      	lsrs	r7, r1, #16
 8005a8c:	0c00      	lsrs	r0, r0, #16
 8005a8e:	fb02 7000 	mla	r0, r2, r0, r7
 8005a92:	b289      	uxth	r1, r1
 8005a94:	3301      	adds	r3, #1
 8005a96:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005a9a:	429d      	cmp	r5, r3
 8005a9c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005aa0:	f84c 1b04 	str.w	r1, [ip], #4
 8005aa4:	dcec      	bgt.n	8005a80 <__multadd+0x12>
 8005aa6:	b1d7      	cbz	r7, 8005ade <__multadd+0x70>
 8005aa8:	68a3      	ldr	r3, [r4, #8]
 8005aaa:	42ab      	cmp	r3, r5
 8005aac:	dc12      	bgt.n	8005ad4 <__multadd+0x66>
 8005aae:	6861      	ldr	r1, [r4, #4]
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	3101      	adds	r1, #1
 8005ab4:	f7ff ff90 	bl	80059d8 <_Balloc>
 8005ab8:	6922      	ldr	r2, [r4, #16]
 8005aba:	3202      	adds	r2, #2
 8005abc:	f104 010c 	add.w	r1, r4, #12
 8005ac0:	4680      	mov	r8, r0
 8005ac2:	0092      	lsls	r2, r2, #2
 8005ac4:	300c      	adds	r0, #12
 8005ac6:	f7fe fbd9 	bl	800427c <memcpy>
 8005aca:	4621      	mov	r1, r4
 8005acc:	4630      	mov	r0, r6
 8005ace:	f7ff ffb7 	bl	8005a40 <_Bfree>
 8005ad2:	4644      	mov	r4, r8
 8005ad4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ad8:	3501      	adds	r5, #1
 8005ada:	615f      	str	r7, [r3, #20]
 8005adc:	6125      	str	r5, [r4, #16]
 8005ade:	4620      	mov	r0, r4
 8005ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005ae4 <__hi0bits>:
 8005ae4:	0c02      	lsrs	r2, r0, #16
 8005ae6:	0412      	lsls	r2, r2, #16
 8005ae8:	4603      	mov	r3, r0
 8005aea:	b9b2      	cbnz	r2, 8005b1a <__hi0bits+0x36>
 8005aec:	0403      	lsls	r3, r0, #16
 8005aee:	2010      	movs	r0, #16
 8005af0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005af4:	bf04      	itt	eq
 8005af6:	021b      	lsleq	r3, r3, #8
 8005af8:	3008      	addeq	r0, #8
 8005afa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005afe:	bf04      	itt	eq
 8005b00:	011b      	lsleq	r3, r3, #4
 8005b02:	3004      	addeq	r0, #4
 8005b04:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005b08:	bf04      	itt	eq
 8005b0a:	009b      	lsleq	r3, r3, #2
 8005b0c:	3002      	addeq	r0, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	db06      	blt.n	8005b20 <__hi0bits+0x3c>
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	d503      	bpl.n	8005b1e <__hi0bits+0x3a>
 8005b16:	3001      	adds	r0, #1
 8005b18:	4770      	bx	lr
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	e7e8      	b.n	8005af0 <__hi0bits+0xc>
 8005b1e:	2020      	movs	r0, #32
 8005b20:	4770      	bx	lr

08005b22 <__lo0bits>:
 8005b22:	6803      	ldr	r3, [r0, #0]
 8005b24:	f013 0207 	ands.w	r2, r3, #7
 8005b28:	4601      	mov	r1, r0
 8005b2a:	d00b      	beq.n	8005b44 <__lo0bits+0x22>
 8005b2c:	07da      	lsls	r2, r3, #31
 8005b2e:	d423      	bmi.n	8005b78 <__lo0bits+0x56>
 8005b30:	0798      	lsls	r0, r3, #30
 8005b32:	bf49      	itett	mi
 8005b34:	085b      	lsrmi	r3, r3, #1
 8005b36:	089b      	lsrpl	r3, r3, #2
 8005b38:	2001      	movmi	r0, #1
 8005b3a:	600b      	strmi	r3, [r1, #0]
 8005b3c:	bf5c      	itt	pl
 8005b3e:	600b      	strpl	r3, [r1, #0]
 8005b40:	2002      	movpl	r0, #2
 8005b42:	4770      	bx	lr
 8005b44:	b298      	uxth	r0, r3
 8005b46:	b9a8      	cbnz	r0, 8005b74 <__lo0bits+0x52>
 8005b48:	0c1b      	lsrs	r3, r3, #16
 8005b4a:	2010      	movs	r0, #16
 8005b4c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005b50:	bf04      	itt	eq
 8005b52:	0a1b      	lsreq	r3, r3, #8
 8005b54:	3008      	addeq	r0, #8
 8005b56:	071a      	lsls	r2, r3, #28
 8005b58:	bf04      	itt	eq
 8005b5a:	091b      	lsreq	r3, r3, #4
 8005b5c:	3004      	addeq	r0, #4
 8005b5e:	079a      	lsls	r2, r3, #30
 8005b60:	bf04      	itt	eq
 8005b62:	089b      	lsreq	r3, r3, #2
 8005b64:	3002      	addeq	r0, #2
 8005b66:	07da      	lsls	r2, r3, #31
 8005b68:	d402      	bmi.n	8005b70 <__lo0bits+0x4e>
 8005b6a:	085b      	lsrs	r3, r3, #1
 8005b6c:	d006      	beq.n	8005b7c <__lo0bits+0x5a>
 8005b6e:	3001      	adds	r0, #1
 8005b70:	600b      	str	r3, [r1, #0]
 8005b72:	4770      	bx	lr
 8005b74:	4610      	mov	r0, r2
 8005b76:	e7e9      	b.n	8005b4c <__lo0bits+0x2a>
 8005b78:	2000      	movs	r0, #0
 8005b7a:	4770      	bx	lr
 8005b7c:	2020      	movs	r0, #32
 8005b7e:	4770      	bx	lr

08005b80 <__i2b>:
 8005b80:	b510      	push	{r4, lr}
 8005b82:	460c      	mov	r4, r1
 8005b84:	2101      	movs	r1, #1
 8005b86:	f7ff ff27 	bl	80059d8 <_Balloc>
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	6144      	str	r4, [r0, #20]
 8005b8e:	6102      	str	r2, [r0, #16]
 8005b90:	bd10      	pop	{r4, pc}

08005b92 <__multiply>:
 8005b92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b96:	4614      	mov	r4, r2
 8005b98:	690a      	ldr	r2, [r1, #16]
 8005b9a:	6923      	ldr	r3, [r4, #16]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	bfb8      	it	lt
 8005ba0:	460b      	movlt	r3, r1
 8005ba2:	4688      	mov	r8, r1
 8005ba4:	bfbc      	itt	lt
 8005ba6:	46a0      	movlt	r8, r4
 8005ba8:	461c      	movlt	r4, r3
 8005baa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005bae:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005bb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005bb6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005bba:	eb07 0609 	add.w	r6, r7, r9
 8005bbe:	42b3      	cmp	r3, r6
 8005bc0:	bfb8      	it	lt
 8005bc2:	3101      	addlt	r1, #1
 8005bc4:	f7ff ff08 	bl	80059d8 <_Balloc>
 8005bc8:	f100 0514 	add.w	r5, r0, #20
 8005bcc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005bd0:	462b      	mov	r3, r5
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	4573      	cmp	r3, lr
 8005bd6:	d316      	bcc.n	8005c06 <__multiply+0x74>
 8005bd8:	f104 0214 	add.w	r2, r4, #20
 8005bdc:	f108 0114 	add.w	r1, r8, #20
 8005be0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005be4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	9b00      	ldr	r3, [sp, #0]
 8005bec:	9201      	str	r2, [sp, #4]
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d80c      	bhi.n	8005c0c <__multiply+0x7a>
 8005bf2:	2e00      	cmp	r6, #0
 8005bf4:	dd03      	ble.n	8005bfe <__multiply+0x6c>
 8005bf6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d05d      	beq.n	8005cba <__multiply+0x128>
 8005bfe:	6106      	str	r6, [r0, #16]
 8005c00:	b003      	add	sp, #12
 8005c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c06:	f843 2b04 	str.w	r2, [r3], #4
 8005c0a:	e7e3      	b.n	8005bd4 <__multiply+0x42>
 8005c0c:	f8b2 b000 	ldrh.w	fp, [r2]
 8005c10:	f1bb 0f00 	cmp.w	fp, #0
 8005c14:	d023      	beq.n	8005c5e <__multiply+0xcc>
 8005c16:	4689      	mov	r9, r1
 8005c18:	46ac      	mov	ip, r5
 8005c1a:	f04f 0800 	mov.w	r8, #0
 8005c1e:	f859 4b04 	ldr.w	r4, [r9], #4
 8005c22:	f8dc a000 	ldr.w	sl, [ip]
 8005c26:	b2a3      	uxth	r3, r4
 8005c28:	fa1f fa8a 	uxth.w	sl, sl
 8005c2c:	fb0b a303 	mla	r3, fp, r3, sl
 8005c30:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005c34:	f8dc 4000 	ldr.w	r4, [ip]
 8005c38:	4443      	add	r3, r8
 8005c3a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005c3e:	fb0b 840a 	mla	r4, fp, sl, r8
 8005c42:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005c46:	46e2      	mov	sl, ip
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005c4e:	454f      	cmp	r7, r9
 8005c50:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005c54:	f84a 3b04 	str.w	r3, [sl], #4
 8005c58:	d82b      	bhi.n	8005cb2 <__multiply+0x120>
 8005c5a:	f8cc 8004 	str.w	r8, [ip, #4]
 8005c5e:	9b01      	ldr	r3, [sp, #4]
 8005c60:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005c64:	3204      	adds	r2, #4
 8005c66:	f1ba 0f00 	cmp.w	sl, #0
 8005c6a:	d020      	beq.n	8005cae <__multiply+0x11c>
 8005c6c:	682b      	ldr	r3, [r5, #0]
 8005c6e:	4689      	mov	r9, r1
 8005c70:	46a8      	mov	r8, r5
 8005c72:	f04f 0b00 	mov.w	fp, #0
 8005c76:	f8b9 c000 	ldrh.w	ip, [r9]
 8005c7a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005c7e:	fb0a 440c 	mla	r4, sl, ip, r4
 8005c82:	445c      	add	r4, fp
 8005c84:	46c4      	mov	ip, r8
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005c8c:	f84c 3b04 	str.w	r3, [ip], #4
 8005c90:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c94:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005c98:	0c1b      	lsrs	r3, r3, #16
 8005c9a:	fb0a b303 	mla	r3, sl, r3, fp
 8005c9e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005ca2:	454f      	cmp	r7, r9
 8005ca4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005ca8:	d805      	bhi.n	8005cb6 <__multiply+0x124>
 8005caa:	f8c8 3004 	str.w	r3, [r8, #4]
 8005cae:	3504      	adds	r5, #4
 8005cb0:	e79b      	b.n	8005bea <__multiply+0x58>
 8005cb2:	46d4      	mov	ip, sl
 8005cb4:	e7b3      	b.n	8005c1e <__multiply+0x8c>
 8005cb6:	46e0      	mov	r8, ip
 8005cb8:	e7dd      	b.n	8005c76 <__multiply+0xe4>
 8005cba:	3e01      	subs	r6, #1
 8005cbc:	e799      	b.n	8005bf2 <__multiply+0x60>
	...

08005cc0 <__pow5mult>:
 8005cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cc4:	4615      	mov	r5, r2
 8005cc6:	f012 0203 	ands.w	r2, r2, #3
 8005cca:	4606      	mov	r6, r0
 8005ccc:	460f      	mov	r7, r1
 8005cce:	d007      	beq.n	8005ce0 <__pow5mult+0x20>
 8005cd0:	3a01      	subs	r2, #1
 8005cd2:	4c21      	ldr	r4, [pc, #132]	; (8005d58 <__pow5mult+0x98>)
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005cda:	f7ff fec8 	bl	8005a6e <__multadd>
 8005cde:	4607      	mov	r7, r0
 8005ce0:	10ad      	asrs	r5, r5, #2
 8005ce2:	d035      	beq.n	8005d50 <__pow5mult+0x90>
 8005ce4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005ce6:	b93c      	cbnz	r4, 8005cf8 <__pow5mult+0x38>
 8005ce8:	2010      	movs	r0, #16
 8005cea:	f7ff fe6d 	bl	80059c8 <malloc>
 8005cee:	6270      	str	r0, [r6, #36]	; 0x24
 8005cf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005cf4:	6004      	str	r4, [r0, #0]
 8005cf6:	60c4      	str	r4, [r0, #12]
 8005cf8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005cfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d00:	b94c      	cbnz	r4, 8005d16 <__pow5mult+0x56>
 8005d02:	f240 2171 	movw	r1, #625	; 0x271
 8005d06:	4630      	mov	r0, r6
 8005d08:	f7ff ff3a 	bl	8005b80 <__i2b>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d12:	4604      	mov	r4, r0
 8005d14:	6003      	str	r3, [r0, #0]
 8005d16:	f04f 0800 	mov.w	r8, #0
 8005d1a:	07eb      	lsls	r3, r5, #31
 8005d1c:	d50a      	bpl.n	8005d34 <__pow5mult+0x74>
 8005d1e:	4639      	mov	r1, r7
 8005d20:	4622      	mov	r2, r4
 8005d22:	4630      	mov	r0, r6
 8005d24:	f7ff ff35 	bl	8005b92 <__multiply>
 8005d28:	4639      	mov	r1, r7
 8005d2a:	4681      	mov	r9, r0
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	f7ff fe87 	bl	8005a40 <_Bfree>
 8005d32:	464f      	mov	r7, r9
 8005d34:	106d      	asrs	r5, r5, #1
 8005d36:	d00b      	beq.n	8005d50 <__pow5mult+0x90>
 8005d38:	6820      	ldr	r0, [r4, #0]
 8005d3a:	b938      	cbnz	r0, 8005d4c <__pow5mult+0x8c>
 8005d3c:	4622      	mov	r2, r4
 8005d3e:	4621      	mov	r1, r4
 8005d40:	4630      	mov	r0, r6
 8005d42:	f7ff ff26 	bl	8005b92 <__multiply>
 8005d46:	6020      	str	r0, [r4, #0]
 8005d48:	f8c0 8000 	str.w	r8, [r0]
 8005d4c:	4604      	mov	r4, r0
 8005d4e:	e7e4      	b.n	8005d1a <__pow5mult+0x5a>
 8005d50:	4638      	mov	r0, r7
 8005d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d56:	bf00      	nop
 8005d58:	08006ae0 	.word	0x08006ae0

08005d5c <__lshift>:
 8005d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d60:	460c      	mov	r4, r1
 8005d62:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d66:	6923      	ldr	r3, [r4, #16]
 8005d68:	6849      	ldr	r1, [r1, #4]
 8005d6a:	eb0a 0903 	add.w	r9, sl, r3
 8005d6e:	68a3      	ldr	r3, [r4, #8]
 8005d70:	4607      	mov	r7, r0
 8005d72:	4616      	mov	r6, r2
 8005d74:	f109 0501 	add.w	r5, r9, #1
 8005d78:	42ab      	cmp	r3, r5
 8005d7a:	db32      	blt.n	8005de2 <__lshift+0x86>
 8005d7c:	4638      	mov	r0, r7
 8005d7e:	f7ff fe2b 	bl	80059d8 <_Balloc>
 8005d82:	2300      	movs	r3, #0
 8005d84:	4680      	mov	r8, r0
 8005d86:	f100 0114 	add.w	r1, r0, #20
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	4553      	cmp	r3, sl
 8005d8e:	db2b      	blt.n	8005de8 <__lshift+0x8c>
 8005d90:	6920      	ldr	r0, [r4, #16]
 8005d92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d96:	f104 0314 	add.w	r3, r4, #20
 8005d9a:	f016 021f 	ands.w	r2, r6, #31
 8005d9e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005da2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005da6:	d025      	beq.n	8005df4 <__lshift+0x98>
 8005da8:	f1c2 0e20 	rsb	lr, r2, #32
 8005dac:	2000      	movs	r0, #0
 8005dae:	681e      	ldr	r6, [r3, #0]
 8005db0:	468a      	mov	sl, r1
 8005db2:	4096      	lsls	r6, r2
 8005db4:	4330      	orrs	r0, r6
 8005db6:	f84a 0b04 	str.w	r0, [sl], #4
 8005dba:	f853 0b04 	ldr.w	r0, [r3], #4
 8005dbe:	459c      	cmp	ip, r3
 8005dc0:	fa20 f00e 	lsr.w	r0, r0, lr
 8005dc4:	d814      	bhi.n	8005df0 <__lshift+0x94>
 8005dc6:	6048      	str	r0, [r1, #4]
 8005dc8:	b108      	cbz	r0, 8005dce <__lshift+0x72>
 8005dca:	f109 0502 	add.w	r5, r9, #2
 8005dce:	3d01      	subs	r5, #1
 8005dd0:	4638      	mov	r0, r7
 8005dd2:	f8c8 5010 	str.w	r5, [r8, #16]
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	f7ff fe32 	bl	8005a40 <_Bfree>
 8005ddc:	4640      	mov	r0, r8
 8005dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de2:	3101      	adds	r1, #1
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	e7c7      	b.n	8005d78 <__lshift+0x1c>
 8005de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005dec:	3301      	adds	r3, #1
 8005dee:	e7cd      	b.n	8005d8c <__lshift+0x30>
 8005df0:	4651      	mov	r1, sl
 8005df2:	e7dc      	b.n	8005dae <__lshift+0x52>
 8005df4:	3904      	subs	r1, #4
 8005df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dfa:	f841 2f04 	str.w	r2, [r1, #4]!
 8005dfe:	459c      	cmp	ip, r3
 8005e00:	d8f9      	bhi.n	8005df6 <__lshift+0x9a>
 8005e02:	e7e4      	b.n	8005dce <__lshift+0x72>

08005e04 <__mcmp>:
 8005e04:	6903      	ldr	r3, [r0, #16]
 8005e06:	690a      	ldr	r2, [r1, #16]
 8005e08:	1a9b      	subs	r3, r3, r2
 8005e0a:	b530      	push	{r4, r5, lr}
 8005e0c:	d10c      	bne.n	8005e28 <__mcmp+0x24>
 8005e0e:	0092      	lsls	r2, r2, #2
 8005e10:	3014      	adds	r0, #20
 8005e12:	3114      	adds	r1, #20
 8005e14:	1884      	adds	r4, r0, r2
 8005e16:	4411      	add	r1, r2
 8005e18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e20:	4295      	cmp	r5, r2
 8005e22:	d003      	beq.n	8005e2c <__mcmp+0x28>
 8005e24:	d305      	bcc.n	8005e32 <__mcmp+0x2e>
 8005e26:	2301      	movs	r3, #1
 8005e28:	4618      	mov	r0, r3
 8005e2a:	bd30      	pop	{r4, r5, pc}
 8005e2c:	42a0      	cmp	r0, r4
 8005e2e:	d3f3      	bcc.n	8005e18 <__mcmp+0x14>
 8005e30:	e7fa      	b.n	8005e28 <__mcmp+0x24>
 8005e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e36:	e7f7      	b.n	8005e28 <__mcmp+0x24>

08005e38 <__mdiff>:
 8005e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e3c:	460d      	mov	r5, r1
 8005e3e:	4607      	mov	r7, r0
 8005e40:	4611      	mov	r1, r2
 8005e42:	4628      	mov	r0, r5
 8005e44:	4614      	mov	r4, r2
 8005e46:	f7ff ffdd 	bl	8005e04 <__mcmp>
 8005e4a:	1e06      	subs	r6, r0, #0
 8005e4c:	d108      	bne.n	8005e60 <__mdiff+0x28>
 8005e4e:	4631      	mov	r1, r6
 8005e50:	4638      	mov	r0, r7
 8005e52:	f7ff fdc1 	bl	80059d8 <_Balloc>
 8005e56:	2301      	movs	r3, #1
 8005e58:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e60:	bfa4      	itt	ge
 8005e62:	4623      	movge	r3, r4
 8005e64:	462c      	movge	r4, r5
 8005e66:	4638      	mov	r0, r7
 8005e68:	6861      	ldr	r1, [r4, #4]
 8005e6a:	bfa6      	itte	ge
 8005e6c:	461d      	movge	r5, r3
 8005e6e:	2600      	movge	r6, #0
 8005e70:	2601      	movlt	r6, #1
 8005e72:	f7ff fdb1 	bl	80059d8 <_Balloc>
 8005e76:	692b      	ldr	r3, [r5, #16]
 8005e78:	60c6      	str	r6, [r0, #12]
 8005e7a:	6926      	ldr	r6, [r4, #16]
 8005e7c:	f105 0914 	add.w	r9, r5, #20
 8005e80:	f104 0214 	add.w	r2, r4, #20
 8005e84:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005e88:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005e8c:	f100 0514 	add.w	r5, r0, #20
 8005e90:	f04f 0e00 	mov.w	lr, #0
 8005e94:	f852 ab04 	ldr.w	sl, [r2], #4
 8005e98:	f859 4b04 	ldr.w	r4, [r9], #4
 8005e9c:	fa1e f18a 	uxtah	r1, lr, sl
 8005ea0:	b2a3      	uxth	r3, r4
 8005ea2:	1ac9      	subs	r1, r1, r3
 8005ea4:	0c23      	lsrs	r3, r4, #16
 8005ea6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005eaa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005eae:	b289      	uxth	r1, r1
 8005eb0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005eb4:	45c8      	cmp	r8, r9
 8005eb6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005eba:	4694      	mov	ip, r2
 8005ebc:	f845 3b04 	str.w	r3, [r5], #4
 8005ec0:	d8e8      	bhi.n	8005e94 <__mdiff+0x5c>
 8005ec2:	45bc      	cmp	ip, r7
 8005ec4:	d304      	bcc.n	8005ed0 <__mdiff+0x98>
 8005ec6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005eca:	b183      	cbz	r3, 8005eee <__mdiff+0xb6>
 8005ecc:	6106      	str	r6, [r0, #16]
 8005ece:	e7c5      	b.n	8005e5c <__mdiff+0x24>
 8005ed0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005ed4:	fa1e f381 	uxtah	r3, lr, r1
 8005ed8:	141a      	asrs	r2, r3, #16
 8005eda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ee4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005ee8:	f845 3b04 	str.w	r3, [r5], #4
 8005eec:	e7e9      	b.n	8005ec2 <__mdiff+0x8a>
 8005eee:	3e01      	subs	r6, #1
 8005ef0:	e7e9      	b.n	8005ec6 <__mdiff+0x8e>

08005ef2 <__d2b>:
 8005ef2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ef6:	460e      	mov	r6, r1
 8005ef8:	2101      	movs	r1, #1
 8005efa:	ec59 8b10 	vmov	r8, r9, d0
 8005efe:	4615      	mov	r5, r2
 8005f00:	f7ff fd6a 	bl	80059d8 <_Balloc>
 8005f04:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005f08:	4607      	mov	r7, r0
 8005f0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f0e:	bb34      	cbnz	r4, 8005f5e <__d2b+0x6c>
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	f1b8 0300 	subs.w	r3, r8, #0
 8005f16:	d027      	beq.n	8005f68 <__d2b+0x76>
 8005f18:	a802      	add	r0, sp, #8
 8005f1a:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005f1e:	f7ff fe00 	bl	8005b22 <__lo0bits>
 8005f22:	9900      	ldr	r1, [sp, #0]
 8005f24:	b1f0      	cbz	r0, 8005f64 <__d2b+0x72>
 8005f26:	9a01      	ldr	r2, [sp, #4]
 8005f28:	f1c0 0320 	rsb	r3, r0, #32
 8005f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f30:	430b      	orrs	r3, r1
 8005f32:	40c2      	lsrs	r2, r0
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	9201      	str	r2, [sp, #4]
 8005f38:	9b01      	ldr	r3, [sp, #4]
 8005f3a:	61bb      	str	r3, [r7, #24]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bf14      	ite	ne
 8005f40:	2102      	movne	r1, #2
 8005f42:	2101      	moveq	r1, #1
 8005f44:	6139      	str	r1, [r7, #16]
 8005f46:	b1c4      	cbz	r4, 8005f7a <__d2b+0x88>
 8005f48:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005f4c:	4404      	add	r4, r0
 8005f4e:	6034      	str	r4, [r6, #0]
 8005f50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f54:	6028      	str	r0, [r5, #0]
 8005f56:	4638      	mov	r0, r7
 8005f58:	b003      	add	sp, #12
 8005f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f62:	e7d5      	b.n	8005f10 <__d2b+0x1e>
 8005f64:	6179      	str	r1, [r7, #20]
 8005f66:	e7e7      	b.n	8005f38 <__d2b+0x46>
 8005f68:	a801      	add	r0, sp, #4
 8005f6a:	f7ff fdda 	bl	8005b22 <__lo0bits>
 8005f6e:	9b01      	ldr	r3, [sp, #4]
 8005f70:	617b      	str	r3, [r7, #20]
 8005f72:	2101      	movs	r1, #1
 8005f74:	6139      	str	r1, [r7, #16]
 8005f76:	3020      	adds	r0, #32
 8005f78:	e7e5      	b.n	8005f46 <__d2b+0x54>
 8005f7a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005f7e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f82:	6030      	str	r0, [r6, #0]
 8005f84:	6918      	ldr	r0, [r3, #16]
 8005f86:	f7ff fdad 	bl	8005ae4 <__hi0bits>
 8005f8a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005f8e:	e7e1      	b.n	8005f54 <__d2b+0x62>

08005f90 <_calloc_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	fb02 f401 	mul.w	r4, r2, r1
 8005f96:	4621      	mov	r1, r4
 8005f98:	f000 f856 	bl	8006048 <_malloc_r>
 8005f9c:	4605      	mov	r5, r0
 8005f9e:	b118      	cbz	r0, 8005fa8 <_calloc_r+0x18>
 8005fa0:	4622      	mov	r2, r4
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	f7fe f975 	bl	8004292 <memset>
 8005fa8:	4628      	mov	r0, r5
 8005faa:	bd38      	pop	{r3, r4, r5, pc}

08005fac <_free_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	4605      	mov	r5, r0
 8005fb0:	2900      	cmp	r1, #0
 8005fb2:	d045      	beq.n	8006040 <_free_r+0x94>
 8005fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fb8:	1f0c      	subs	r4, r1, #4
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	bfb8      	it	lt
 8005fbe:	18e4      	addlt	r4, r4, r3
 8005fc0:	f000 fc4a 	bl	8006858 <__malloc_lock>
 8005fc4:	4a1f      	ldr	r2, [pc, #124]	; (8006044 <_free_r+0x98>)
 8005fc6:	6813      	ldr	r3, [r2, #0]
 8005fc8:	4610      	mov	r0, r2
 8005fca:	b933      	cbnz	r3, 8005fda <_free_r+0x2e>
 8005fcc:	6063      	str	r3, [r4, #4]
 8005fce:	6014      	str	r4, [r2, #0]
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fd6:	f000 bc40 	b.w	800685a <__malloc_unlock>
 8005fda:	42a3      	cmp	r3, r4
 8005fdc:	d90c      	bls.n	8005ff8 <_free_r+0x4c>
 8005fde:	6821      	ldr	r1, [r4, #0]
 8005fe0:	1862      	adds	r2, r4, r1
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	bf04      	itt	eq
 8005fe6:	681a      	ldreq	r2, [r3, #0]
 8005fe8:	685b      	ldreq	r3, [r3, #4]
 8005fea:	6063      	str	r3, [r4, #4]
 8005fec:	bf04      	itt	eq
 8005fee:	1852      	addeq	r2, r2, r1
 8005ff0:	6022      	streq	r2, [r4, #0]
 8005ff2:	6004      	str	r4, [r0, #0]
 8005ff4:	e7ec      	b.n	8005fd0 <_free_r+0x24>
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	b10a      	cbz	r2, 8006000 <_free_r+0x54>
 8005ffc:	42a2      	cmp	r2, r4
 8005ffe:	d9fa      	bls.n	8005ff6 <_free_r+0x4a>
 8006000:	6819      	ldr	r1, [r3, #0]
 8006002:	1858      	adds	r0, r3, r1
 8006004:	42a0      	cmp	r0, r4
 8006006:	d10b      	bne.n	8006020 <_free_r+0x74>
 8006008:	6820      	ldr	r0, [r4, #0]
 800600a:	4401      	add	r1, r0
 800600c:	1858      	adds	r0, r3, r1
 800600e:	4282      	cmp	r2, r0
 8006010:	6019      	str	r1, [r3, #0]
 8006012:	d1dd      	bne.n	8005fd0 <_free_r+0x24>
 8006014:	6810      	ldr	r0, [r2, #0]
 8006016:	6852      	ldr	r2, [r2, #4]
 8006018:	605a      	str	r2, [r3, #4]
 800601a:	4401      	add	r1, r0
 800601c:	6019      	str	r1, [r3, #0]
 800601e:	e7d7      	b.n	8005fd0 <_free_r+0x24>
 8006020:	d902      	bls.n	8006028 <_free_r+0x7c>
 8006022:	230c      	movs	r3, #12
 8006024:	602b      	str	r3, [r5, #0]
 8006026:	e7d3      	b.n	8005fd0 <_free_r+0x24>
 8006028:	6820      	ldr	r0, [r4, #0]
 800602a:	1821      	adds	r1, r4, r0
 800602c:	428a      	cmp	r2, r1
 800602e:	bf04      	itt	eq
 8006030:	6811      	ldreq	r1, [r2, #0]
 8006032:	6852      	ldreq	r2, [r2, #4]
 8006034:	6062      	str	r2, [r4, #4]
 8006036:	bf04      	itt	eq
 8006038:	1809      	addeq	r1, r1, r0
 800603a:	6021      	streq	r1, [r4, #0]
 800603c:	605c      	str	r4, [r3, #4]
 800603e:	e7c7      	b.n	8005fd0 <_free_r+0x24>
 8006040:	bd38      	pop	{r3, r4, r5, pc}
 8006042:	bf00      	nop
 8006044:	200001fc 	.word	0x200001fc

08006048 <_malloc_r>:
 8006048:	b570      	push	{r4, r5, r6, lr}
 800604a:	1ccd      	adds	r5, r1, #3
 800604c:	f025 0503 	bic.w	r5, r5, #3
 8006050:	3508      	adds	r5, #8
 8006052:	2d0c      	cmp	r5, #12
 8006054:	bf38      	it	cc
 8006056:	250c      	movcc	r5, #12
 8006058:	2d00      	cmp	r5, #0
 800605a:	4606      	mov	r6, r0
 800605c:	db01      	blt.n	8006062 <_malloc_r+0x1a>
 800605e:	42a9      	cmp	r1, r5
 8006060:	d903      	bls.n	800606a <_malloc_r+0x22>
 8006062:	230c      	movs	r3, #12
 8006064:	6033      	str	r3, [r6, #0]
 8006066:	2000      	movs	r0, #0
 8006068:	bd70      	pop	{r4, r5, r6, pc}
 800606a:	f000 fbf5 	bl	8006858 <__malloc_lock>
 800606e:	4a21      	ldr	r2, [pc, #132]	; (80060f4 <_malloc_r+0xac>)
 8006070:	6814      	ldr	r4, [r2, #0]
 8006072:	4621      	mov	r1, r4
 8006074:	b991      	cbnz	r1, 800609c <_malloc_r+0x54>
 8006076:	4c20      	ldr	r4, [pc, #128]	; (80060f8 <_malloc_r+0xb0>)
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	b91b      	cbnz	r3, 8006084 <_malloc_r+0x3c>
 800607c:	4630      	mov	r0, r6
 800607e:	f000 f97d 	bl	800637c <_sbrk_r>
 8006082:	6020      	str	r0, [r4, #0]
 8006084:	4629      	mov	r1, r5
 8006086:	4630      	mov	r0, r6
 8006088:	f000 f978 	bl	800637c <_sbrk_r>
 800608c:	1c43      	adds	r3, r0, #1
 800608e:	d124      	bne.n	80060da <_malloc_r+0x92>
 8006090:	230c      	movs	r3, #12
 8006092:	6033      	str	r3, [r6, #0]
 8006094:	4630      	mov	r0, r6
 8006096:	f000 fbe0 	bl	800685a <__malloc_unlock>
 800609a:	e7e4      	b.n	8006066 <_malloc_r+0x1e>
 800609c:	680b      	ldr	r3, [r1, #0]
 800609e:	1b5b      	subs	r3, r3, r5
 80060a0:	d418      	bmi.n	80060d4 <_malloc_r+0x8c>
 80060a2:	2b0b      	cmp	r3, #11
 80060a4:	d90f      	bls.n	80060c6 <_malloc_r+0x7e>
 80060a6:	600b      	str	r3, [r1, #0]
 80060a8:	50cd      	str	r5, [r1, r3]
 80060aa:	18cc      	adds	r4, r1, r3
 80060ac:	4630      	mov	r0, r6
 80060ae:	f000 fbd4 	bl	800685a <__malloc_unlock>
 80060b2:	f104 000b 	add.w	r0, r4, #11
 80060b6:	1d23      	adds	r3, r4, #4
 80060b8:	f020 0007 	bic.w	r0, r0, #7
 80060bc:	1ac3      	subs	r3, r0, r3
 80060be:	d0d3      	beq.n	8006068 <_malloc_r+0x20>
 80060c0:	425a      	negs	r2, r3
 80060c2:	50e2      	str	r2, [r4, r3]
 80060c4:	e7d0      	b.n	8006068 <_malloc_r+0x20>
 80060c6:	428c      	cmp	r4, r1
 80060c8:	684b      	ldr	r3, [r1, #4]
 80060ca:	bf16      	itet	ne
 80060cc:	6063      	strne	r3, [r4, #4]
 80060ce:	6013      	streq	r3, [r2, #0]
 80060d0:	460c      	movne	r4, r1
 80060d2:	e7eb      	b.n	80060ac <_malloc_r+0x64>
 80060d4:	460c      	mov	r4, r1
 80060d6:	6849      	ldr	r1, [r1, #4]
 80060d8:	e7cc      	b.n	8006074 <_malloc_r+0x2c>
 80060da:	1cc4      	adds	r4, r0, #3
 80060dc:	f024 0403 	bic.w	r4, r4, #3
 80060e0:	42a0      	cmp	r0, r4
 80060e2:	d005      	beq.n	80060f0 <_malloc_r+0xa8>
 80060e4:	1a21      	subs	r1, r4, r0
 80060e6:	4630      	mov	r0, r6
 80060e8:	f000 f948 	bl	800637c <_sbrk_r>
 80060ec:	3001      	adds	r0, #1
 80060ee:	d0cf      	beq.n	8006090 <_malloc_r+0x48>
 80060f0:	6025      	str	r5, [r4, #0]
 80060f2:	e7db      	b.n	80060ac <_malloc_r+0x64>
 80060f4:	200001fc 	.word	0x200001fc
 80060f8:	20000200 	.word	0x20000200

080060fc <__sfputc_r>:
 80060fc:	6893      	ldr	r3, [r2, #8]
 80060fe:	3b01      	subs	r3, #1
 8006100:	2b00      	cmp	r3, #0
 8006102:	b410      	push	{r4}
 8006104:	6093      	str	r3, [r2, #8]
 8006106:	da08      	bge.n	800611a <__sfputc_r+0x1e>
 8006108:	6994      	ldr	r4, [r2, #24]
 800610a:	42a3      	cmp	r3, r4
 800610c:	db01      	blt.n	8006112 <__sfputc_r+0x16>
 800610e:	290a      	cmp	r1, #10
 8006110:	d103      	bne.n	800611a <__sfputc_r+0x1e>
 8006112:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006116:	f000 b985 	b.w	8006424 <__swbuf_r>
 800611a:	6813      	ldr	r3, [r2, #0]
 800611c:	1c58      	adds	r0, r3, #1
 800611e:	6010      	str	r0, [r2, #0]
 8006120:	7019      	strb	r1, [r3, #0]
 8006122:	4608      	mov	r0, r1
 8006124:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006128:	4770      	bx	lr

0800612a <__sfputs_r>:
 800612a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612c:	4606      	mov	r6, r0
 800612e:	460f      	mov	r7, r1
 8006130:	4614      	mov	r4, r2
 8006132:	18d5      	adds	r5, r2, r3
 8006134:	42ac      	cmp	r4, r5
 8006136:	d101      	bne.n	800613c <__sfputs_r+0x12>
 8006138:	2000      	movs	r0, #0
 800613a:	e007      	b.n	800614c <__sfputs_r+0x22>
 800613c:	463a      	mov	r2, r7
 800613e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006142:	4630      	mov	r0, r6
 8006144:	f7ff ffda 	bl	80060fc <__sfputc_r>
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	d1f3      	bne.n	8006134 <__sfputs_r+0xa>
 800614c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006150 <_vfiprintf_r>:
 8006150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006154:	460c      	mov	r4, r1
 8006156:	b09d      	sub	sp, #116	; 0x74
 8006158:	4617      	mov	r7, r2
 800615a:	461d      	mov	r5, r3
 800615c:	4606      	mov	r6, r0
 800615e:	b118      	cbz	r0, 8006168 <_vfiprintf_r+0x18>
 8006160:	6983      	ldr	r3, [r0, #24]
 8006162:	b90b      	cbnz	r3, 8006168 <_vfiprintf_r+0x18>
 8006164:	f7ff fb98 	bl	8005898 <__sinit>
 8006168:	4b7c      	ldr	r3, [pc, #496]	; (800635c <_vfiprintf_r+0x20c>)
 800616a:	429c      	cmp	r4, r3
 800616c:	d158      	bne.n	8006220 <_vfiprintf_r+0xd0>
 800616e:	6874      	ldr	r4, [r6, #4]
 8006170:	89a3      	ldrh	r3, [r4, #12]
 8006172:	0718      	lsls	r0, r3, #28
 8006174:	d55e      	bpl.n	8006234 <_vfiprintf_r+0xe4>
 8006176:	6923      	ldr	r3, [r4, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d05b      	beq.n	8006234 <_vfiprintf_r+0xe4>
 800617c:	2300      	movs	r3, #0
 800617e:	9309      	str	r3, [sp, #36]	; 0x24
 8006180:	2320      	movs	r3, #32
 8006182:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006186:	2330      	movs	r3, #48	; 0x30
 8006188:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800618c:	9503      	str	r5, [sp, #12]
 800618e:	f04f 0b01 	mov.w	fp, #1
 8006192:	46b8      	mov	r8, r7
 8006194:	4645      	mov	r5, r8
 8006196:	f815 3b01 	ldrb.w	r3, [r5], #1
 800619a:	b10b      	cbz	r3, 80061a0 <_vfiprintf_r+0x50>
 800619c:	2b25      	cmp	r3, #37	; 0x25
 800619e:	d154      	bne.n	800624a <_vfiprintf_r+0xfa>
 80061a0:	ebb8 0a07 	subs.w	sl, r8, r7
 80061a4:	d00b      	beq.n	80061be <_vfiprintf_r+0x6e>
 80061a6:	4653      	mov	r3, sl
 80061a8:	463a      	mov	r2, r7
 80061aa:	4621      	mov	r1, r4
 80061ac:	4630      	mov	r0, r6
 80061ae:	f7ff ffbc 	bl	800612a <__sfputs_r>
 80061b2:	3001      	adds	r0, #1
 80061b4:	f000 80c2 	beq.w	800633c <_vfiprintf_r+0x1ec>
 80061b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ba:	4453      	add	r3, sl
 80061bc:	9309      	str	r3, [sp, #36]	; 0x24
 80061be:	f898 3000 	ldrb.w	r3, [r8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 80ba 	beq.w	800633c <_vfiprintf_r+0x1ec>
 80061c8:	2300      	movs	r3, #0
 80061ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061d2:	9304      	str	r3, [sp, #16]
 80061d4:	9307      	str	r3, [sp, #28]
 80061d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061da:	931a      	str	r3, [sp, #104]	; 0x68
 80061dc:	46a8      	mov	r8, r5
 80061de:	2205      	movs	r2, #5
 80061e0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80061e4:	485e      	ldr	r0, [pc, #376]	; (8006360 <_vfiprintf_r+0x210>)
 80061e6:	f7fa f803 	bl	80001f0 <memchr>
 80061ea:	9b04      	ldr	r3, [sp, #16]
 80061ec:	bb78      	cbnz	r0, 800624e <_vfiprintf_r+0xfe>
 80061ee:	06d9      	lsls	r1, r3, #27
 80061f0:	bf44      	itt	mi
 80061f2:	2220      	movmi	r2, #32
 80061f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80061f8:	071a      	lsls	r2, r3, #28
 80061fa:	bf44      	itt	mi
 80061fc:	222b      	movmi	r2, #43	; 0x2b
 80061fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006202:	782a      	ldrb	r2, [r5, #0]
 8006204:	2a2a      	cmp	r2, #42	; 0x2a
 8006206:	d02a      	beq.n	800625e <_vfiprintf_r+0x10e>
 8006208:	9a07      	ldr	r2, [sp, #28]
 800620a:	46a8      	mov	r8, r5
 800620c:	2000      	movs	r0, #0
 800620e:	250a      	movs	r5, #10
 8006210:	4641      	mov	r1, r8
 8006212:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006216:	3b30      	subs	r3, #48	; 0x30
 8006218:	2b09      	cmp	r3, #9
 800621a:	d969      	bls.n	80062f0 <_vfiprintf_r+0x1a0>
 800621c:	b360      	cbz	r0, 8006278 <_vfiprintf_r+0x128>
 800621e:	e024      	b.n	800626a <_vfiprintf_r+0x11a>
 8006220:	4b50      	ldr	r3, [pc, #320]	; (8006364 <_vfiprintf_r+0x214>)
 8006222:	429c      	cmp	r4, r3
 8006224:	d101      	bne.n	800622a <_vfiprintf_r+0xda>
 8006226:	68b4      	ldr	r4, [r6, #8]
 8006228:	e7a2      	b.n	8006170 <_vfiprintf_r+0x20>
 800622a:	4b4f      	ldr	r3, [pc, #316]	; (8006368 <_vfiprintf_r+0x218>)
 800622c:	429c      	cmp	r4, r3
 800622e:	bf08      	it	eq
 8006230:	68f4      	ldreq	r4, [r6, #12]
 8006232:	e79d      	b.n	8006170 <_vfiprintf_r+0x20>
 8006234:	4621      	mov	r1, r4
 8006236:	4630      	mov	r0, r6
 8006238:	f000 f958 	bl	80064ec <__swsetup_r>
 800623c:	2800      	cmp	r0, #0
 800623e:	d09d      	beq.n	800617c <_vfiprintf_r+0x2c>
 8006240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006244:	b01d      	add	sp, #116	; 0x74
 8006246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800624a:	46a8      	mov	r8, r5
 800624c:	e7a2      	b.n	8006194 <_vfiprintf_r+0x44>
 800624e:	4a44      	ldr	r2, [pc, #272]	; (8006360 <_vfiprintf_r+0x210>)
 8006250:	1a80      	subs	r0, r0, r2
 8006252:	fa0b f000 	lsl.w	r0, fp, r0
 8006256:	4318      	orrs	r0, r3
 8006258:	9004      	str	r0, [sp, #16]
 800625a:	4645      	mov	r5, r8
 800625c:	e7be      	b.n	80061dc <_vfiprintf_r+0x8c>
 800625e:	9a03      	ldr	r2, [sp, #12]
 8006260:	1d11      	adds	r1, r2, #4
 8006262:	6812      	ldr	r2, [r2, #0]
 8006264:	9103      	str	r1, [sp, #12]
 8006266:	2a00      	cmp	r2, #0
 8006268:	db01      	blt.n	800626e <_vfiprintf_r+0x11e>
 800626a:	9207      	str	r2, [sp, #28]
 800626c:	e004      	b.n	8006278 <_vfiprintf_r+0x128>
 800626e:	4252      	negs	r2, r2
 8006270:	f043 0302 	orr.w	r3, r3, #2
 8006274:	9207      	str	r2, [sp, #28]
 8006276:	9304      	str	r3, [sp, #16]
 8006278:	f898 3000 	ldrb.w	r3, [r8]
 800627c:	2b2e      	cmp	r3, #46	; 0x2e
 800627e:	d10e      	bne.n	800629e <_vfiprintf_r+0x14e>
 8006280:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006284:	2b2a      	cmp	r3, #42	; 0x2a
 8006286:	d138      	bne.n	80062fa <_vfiprintf_r+0x1aa>
 8006288:	9b03      	ldr	r3, [sp, #12]
 800628a:	1d1a      	adds	r2, r3, #4
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	9203      	str	r2, [sp, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	bfb8      	it	lt
 8006294:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006298:	f108 0802 	add.w	r8, r8, #2
 800629c:	9305      	str	r3, [sp, #20]
 800629e:	4d33      	ldr	r5, [pc, #204]	; (800636c <_vfiprintf_r+0x21c>)
 80062a0:	f898 1000 	ldrb.w	r1, [r8]
 80062a4:	2203      	movs	r2, #3
 80062a6:	4628      	mov	r0, r5
 80062a8:	f7f9 ffa2 	bl	80001f0 <memchr>
 80062ac:	b140      	cbz	r0, 80062c0 <_vfiprintf_r+0x170>
 80062ae:	2340      	movs	r3, #64	; 0x40
 80062b0:	1b40      	subs	r0, r0, r5
 80062b2:	fa03 f000 	lsl.w	r0, r3, r0
 80062b6:	9b04      	ldr	r3, [sp, #16]
 80062b8:	4303      	orrs	r3, r0
 80062ba:	f108 0801 	add.w	r8, r8, #1
 80062be:	9304      	str	r3, [sp, #16]
 80062c0:	f898 1000 	ldrb.w	r1, [r8]
 80062c4:	482a      	ldr	r0, [pc, #168]	; (8006370 <_vfiprintf_r+0x220>)
 80062c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062ca:	2206      	movs	r2, #6
 80062cc:	f108 0701 	add.w	r7, r8, #1
 80062d0:	f7f9 ff8e 	bl	80001f0 <memchr>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	d037      	beq.n	8006348 <_vfiprintf_r+0x1f8>
 80062d8:	4b26      	ldr	r3, [pc, #152]	; (8006374 <_vfiprintf_r+0x224>)
 80062da:	bb1b      	cbnz	r3, 8006324 <_vfiprintf_r+0x1d4>
 80062dc:	9b03      	ldr	r3, [sp, #12]
 80062de:	3307      	adds	r3, #7
 80062e0:	f023 0307 	bic.w	r3, r3, #7
 80062e4:	3308      	adds	r3, #8
 80062e6:	9303      	str	r3, [sp, #12]
 80062e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ea:	444b      	add	r3, r9
 80062ec:	9309      	str	r3, [sp, #36]	; 0x24
 80062ee:	e750      	b.n	8006192 <_vfiprintf_r+0x42>
 80062f0:	fb05 3202 	mla	r2, r5, r2, r3
 80062f4:	2001      	movs	r0, #1
 80062f6:	4688      	mov	r8, r1
 80062f8:	e78a      	b.n	8006210 <_vfiprintf_r+0xc0>
 80062fa:	2300      	movs	r3, #0
 80062fc:	f108 0801 	add.w	r8, r8, #1
 8006300:	9305      	str	r3, [sp, #20]
 8006302:	4619      	mov	r1, r3
 8006304:	250a      	movs	r5, #10
 8006306:	4640      	mov	r0, r8
 8006308:	f810 2b01 	ldrb.w	r2, [r0], #1
 800630c:	3a30      	subs	r2, #48	; 0x30
 800630e:	2a09      	cmp	r2, #9
 8006310:	d903      	bls.n	800631a <_vfiprintf_r+0x1ca>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0c3      	beq.n	800629e <_vfiprintf_r+0x14e>
 8006316:	9105      	str	r1, [sp, #20]
 8006318:	e7c1      	b.n	800629e <_vfiprintf_r+0x14e>
 800631a:	fb05 2101 	mla	r1, r5, r1, r2
 800631e:	2301      	movs	r3, #1
 8006320:	4680      	mov	r8, r0
 8006322:	e7f0      	b.n	8006306 <_vfiprintf_r+0x1b6>
 8006324:	ab03      	add	r3, sp, #12
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	4622      	mov	r2, r4
 800632a:	4b13      	ldr	r3, [pc, #76]	; (8006378 <_vfiprintf_r+0x228>)
 800632c:	a904      	add	r1, sp, #16
 800632e:	4630      	mov	r0, r6
 8006330:	f7fe f84c 	bl	80043cc <_printf_float>
 8006334:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006338:	4681      	mov	r9, r0
 800633a:	d1d5      	bne.n	80062e8 <_vfiprintf_r+0x198>
 800633c:	89a3      	ldrh	r3, [r4, #12]
 800633e:	065b      	lsls	r3, r3, #25
 8006340:	f53f af7e 	bmi.w	8006240 <_vfiprintf_r+0xf0>
 8006344:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006346:	e77d      	b.n	8006244 <_vfiprintf_r+0xf4>
 8006348:	ab03      	add	r3, sp, #12
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	4622      	mov	r2, r4
 800634e:	4b0a      	ldr	r3, [pc, #40]	; (8006378 <_vfiprintf_r+0x228>)
 8006350:	a904      	add	r1, sp, #16
 8006352:	4630      	mov	r0, r6
 8006354:	f7fe faf0 	bl	8004938 <_printf_i>
 8006358:	e7ec      	b.n	8006334 <_vfiprintf_r+0x1e4>
 800635a:	bf00      	nop
 800635c:	080069b0 	.word	0x080069b0
 8006360:	08006aec 	.word	0x08006aec
 8006364:	080069d0 	.word	0x080069d0
 8006368:	08006990 	.word	0x08006990
 800636c:	08006af2 	.word	0x08006af2
 8006370:	08006af6 	.word	0x08006af6
 8006374:	080043cd 	.word	0x080043cd
 8006378:	0800612b 	.word	0x0800612b

0800637c <_sbrk_r>:
 800637c:	b538      	push	{r3, r4, r5, lr}
 800637e:	4c06      	ldr	r4, [pc, #24]	; (8006398 <_sbrk_r+0x1c>)
 8006380:	2300      	movs	r3, #0
 8006382:	4605      	mov	r5, r0
 8006384:	4608      	mov	r0, r1
 8006386:	6023      	str	r3, [r4, #0]
 8006388:	f7fa ff5a 	bl	8001240 <_sbrk>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d102      	bne.n	8006396 <_sbrk_r+0x1a>
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	b103      	cbz	r3, 8006396 <_sbrk_r+0x1a>
 8006394:	602b      	str	r3, [r5, #0]
 8006396:	bd38      	pop	{r3, r4, r5, pc}
 8006398:	20000330 	.word	0x20000330

0800639c <__sread>:
 800639c:	b510      	push	{r4, lr}
 800639e:	460c      	mov	r4, r1
 80063a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a4:	f000 fa5a 	bl	800685c <_read_r>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	bfab      	itete	ge
 80063ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063ae:	89a3      	ldrhlt	r3, [r4, #12]
 80063b0:	181b      	addge	r3, r3, r0
 80063b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063b6:	bfac      	ite	ge
 80063b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80063ba:	81a3      	strhlt	r3, [r4, #12]
 80063bc:	bd10      	pop	{r4, pc}

080063be <__swrite>:
 80063be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c2:	461f      	mov	r7, r3
 80063c4:	898b      	ldrh	r3, [r1, #12]
 80063c6:	05db      	lsls	r3, r3, #23
 80063c8:	4605      	mov	r5, r0
 80063ca:	460c      	mov	r4, r1
 80063cc:	4616      	mov	r6, r2
 80063ce:	d505      	bpl.n	80063dc <__swrite+0x1e>
 80063d0:	2302      	movs	r3, #2
 80063d2:	2200      	movs	r2, #0
 80063d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d8:	f000 f9b6 	bl	8006748 <_lseek_r>
 80063dc:	89a3      	ldrh	r3, [r4, #12]
 80063de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063e6:	81a3      	strh	r3, [r4, #12]
 80063e8:	4632      	mov	r2, r6
 80063ea:	463b      	mov	r3, r7
 80063ec:	4628      	mov	r0, r5
 80063ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063f2:	f000 b869 	b.w	80064c8 <_write_r>

080063f6 <__sseek>:
 80063f6:	b510      	push	{r4, lr}
 80063f8:	460c      	mov	r4, r1
 80063fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063fe:	f000 f9a3 	bl	8006748 <_lseek_r>
 8006402:	1c43      	adds	r3, r0, #1
 8006404:	89a3      	ldrh	r3, [r4, #12]
 8006406:	bf15      	itete	ne
 8006408:	6560      	strne	r0, [r4, #84]	; 0x54
 800640a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800640e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006412:	81a3      	strheq	r3, [r4, #12]
 8006414:	bf18      	it	ne
 8006416:	81a3      	strhne	r3, [r4, #12]
 8006418:	bd10      	pop	{r4, pc}

0800641a <__sclose>:
 800641a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800641e:	f000 b8d3 	b.w	80065c8 <_close_r>
	...

08006424 <__swbuf_r>:
 8006424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006426:	460e      	mov	r6, r1
 8006428:	4614      	mov	r4, r2
 800642a:	4605      	mov	r5, r0
 800642c:	b118      	cbz	r0, 8006436 <__swbuf_r+0x12>
 800642e:	6983      	ldr	r3, [r0, #24]
 8006430:	b90b      	cbnz	r3, 8006436 <__swbuf_r+0x12>
 8006432:	f7ff fa31 	bl	8005898 <__sinit>
 8006436:	4b21      	ldr	r3, [pc, #132]	; (80064bc <__swbuf_r+0x98>)
 8006438:	429c      	cmp	r4, r3
 800643a:	d12a      	bne.n	8006492 <__swbuf_r+0x6e>
 800643c:	686c      	ldr	r4, [r5, #4]
 800643e:	69a3      	ldr	r3, [r4, #24]
 8006440:	60a3      	str	r3, [r4, #8]
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	071a      	lsls	r2, r3, #28
 8006446:	d52e      	bpl.n	80064a6 <__swbuf_r+0x82>
 8006448:	6923      	ldr	r3, [r4, #16]
 800644a:	b363      	cbz	r3, 80064a6 <__swbuf_r+0x82>
 800644c:	6923      	ldr	r3, [r4, #16]
 800644e:	6820      	ldr	r0, [r4, #0]
 8006450:	1ac0      	subs	r0, r0, r3
 8006452:	6963      	ldr	r3, [r4, #20]
 8006454:	b2f6      	uxtb	r6, r6
 8006456:	4283      	cmp	r3, r0
 8006458:	4637      	mov	r7, r6
 800645a:	dc04      	bgt.n	8006466 <__swbuf_r+0x42>
 800645c:	4621      	mov	r1, r4
 800645e:	4628      	mov	r0, r5
 8006460:	f000 f948 	bl	80066f4 <_fflush_r>
 8006464:	bb28      	cbnz	r0, 80064b2 <__swbuf_r+0x8e>
 8006466:	68a3      	ldr	r3, [r4, #8]
 8006468:	3b01      	subs	r3, #1
 800646a:	60a3      	str	r3, [r4, #8]
 800646c:	6823      	ldr	r3, [r4, #0]
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	6022      	str	r2, [r4, #0]
 8006472:	701e      	strb	r6, [r3, #0]
 8006474:	6963      	ldr	r3, [r4, #20]
 8006476:	3001      	adds	r0, #1
 8006478:	4283      	cmp	r3, r0
 800647a:	d004      	beq.n	8006486 <__swbuf_r+0x62>
 800647c:	89a3      	ldrh	r3, [r4, #12]
 800647e:	07db      	lsls	r3, r3, #31
 8006480:	d519      	bpl.n	80064b6 <__swbuf_r+0x92>
 8006482:	2e0a      	cmp	r6, #10
 8006484:	d117      	bne.n	80064b6 <__swbuf_r+0x92>
 8006486:	4621      	mov	r1, r4
 8006488:	4628      	mov	r0, r5
 800648a:	f000 f933 	bl	80066f4 <_fflush_r>
 800648e:	b190      	cbz	r0, 80064b6 <__swbuf_r+0x92>
 8006490:	e00f      	b.n	80064b2 <__swbuf_r+0x8e>
 8006492:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <__swbuf_r+0x9c>)
 8006494:	429c      	cmp	r4, r3
 8006496:	d101      	bne.n	800649c <__swbuf_r+0x78>
 8006498:	68ac      	ldr	r4, [r5, #8]
 800649a:	e7d0      	b.n	800643e <__swbuf_r+0x1a>
 800649c:	4b09      	ldr	r3, [pc, #36]	; (80064c4 <__swbuf_r+0xa0>)
 800649e:	429c      	cmp	r4, r3
 80064a0:	bf08      	it	eq
 80064a2:	68ec      	ldreq	r4, [r5, #12]
 80064a4:	e7cb      	b.n	800643e <__swbuf_r+0x1a>
 80064a6:	4621      	mov	r1, r4
 80064a8:	4628      	mov	r0, r5
 80064aa:	f000 f81f 	bl	80064ec <__swsetup_r>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d0cc      	beq.n	800644c <__swbuf_r+0x28>
 80064b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80064b6:	4638      	mov	r0, r7
 80064b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064ba:	bf00      	nop
 80064bc:	080069b0 	.word	0x080069b0
 80064c0:	080069d0 	.word	0x080069d0
 80064c4:	08006990 	.word	0x08006990

080064c8 <_write_r>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	4c07      	ldr	r4, [pc, #28]	; (80064e8 <_write_r+0x20>)
 80064cc:	4605      	mov	r5, r0
 80064ce:	4608      	mov	r0, r1
 80064d0:	4611      	mov	r1, r2
 80064d2:	2200      	movs	r2, #0
 80064d4:	6022      	str	r2, [r4, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	f7fa ff6c 	bl	80013b4 <_write>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d102      	bne.n	80064e6 <_write_r+0x1e>
 80064e0:	6823      	ldr	r3, [r4, #0]
 80064e2:	b103      	cbz	r3, 80064e6 <_write_r+0x1e>
 80064e4:	602b      	str	r3, [r5, #0]
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	20000330 	.word	0x20000330

080064ec <__swsetup_r>:
 80064ec:	4b32      	ldr	r3, [pc, #200]	; (80065b8 <__swsetup_r+0xcc>)
 80064ee:	b570      	push	{r4, r5, r6, lr}
 80064f0:	681d      	ldr	r5, [r3, #0]
 80064f2:	4606      	mov	r6, r0
 80064f4:	460c      	mov	r4, r1
 80064f6:	b125      	cbz	r5, 8006502 <__swsetup_r+0x16>
 80064f8:	69ab      	ldr	r3, [r5, #24]
 80064fa:	b913      	cbnz	r3, 8006502 <__swsetup_r+0x16>
 80064fc:	4628      	mov	r0, r5
 80064fe:	f7ff f9cb 	bl	8005898 <__sinit>
 8006502:	4b2e      	ldr	r3, [pc, #184]	; (80065bc <__swsetup_r+0xd0>)
 8006504:	429c      	cmp	r4, r3
 8006506:	d10f      	bne.n	8006528 <__swsetup_r+0x3c>
 8006508:	686c      	ldr	r4, [r5, #4]
 800650a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800650e:	b29a      	uxth	r2, r3
 8006510:	0715      	lsls	r5, r2, #28
 8006512:	d42c      	bmi.n	800656e <__swsetup_r+0x82>
 8006514:	06d0      	lsls	r0, r2, #27
 8006516:	d411      	bmi.n	800653c <__swsetup_r+0x50>
 8006518:	2209      	movs	r2, #9
 800651a:	6032      	str	r2, [r6, #0]
 800651c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006520:	81a3      	strh	r3, [r4, #12]
 8006522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006526:	e03e      	b.n	80065a6 <__swsetup_r+0xba>
 8006528:	4b25      	ldr	r3, [pc, #148]	; (80065c0 <__swsetup_r+0xd4>)
 800652a:	429c      	cmp	r4, r3
 800652c:	d101      	bne.n	8006532 <__swsetup_r+0x46>
 800652e:	68ac      	ldr	r4, [r5, #8]
 8006530:	e7eb      	b.n	800650a <__swsetup_r+0x1e>
 8006532:	4b24      	ldr	r3, [pc, #144]	; (80065c4 <__swsetup_r+0xd8>)
 8006534:	429c      	cmp	r4, r3
 8006536:	bf08      	it	eq
 8006538:	68ec      	ldreq	r4, [r5, #12]
 800653a:	e7e6      	b.n	800650a <__swsetup_r+0x1e>
 800653c:	0751      	lsls	r1, r2, #29
 800653e:	d512      	bpl.n	8006566 <__swsetup_r+0x7a>
 8006540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006542:	b141      	cbz	r1, 8006556 <__swsetup_r+0x6a>
 8006544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006548:	4299      	cmp	r1, r3
 800654a:	d002      	beq.n	8006552 <__swsetup_r+0x66>
 800654c:	4630      	mov	r0, r6
 800654e:	f7ff fd2d 	bl	8005fac <_free_r>
 8006552:	2300      	movs	r3, #0
 8006554:	6363      	str	r3, [r4, #52]	; 0x34
 8006556:	89a3      	ldrh	r3, [r4, #12]
 8006558:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800655c:	81a3      	strh	r3, [r4, #12]
 800655e:	2300      	movs	r3, #0
 8006560:	6063      	str	r3, [r4, #4]
 8006562:	6923      	ldr	r3, [r4, #16]
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	89a3      	ldrh	r3, [r4, #12]
 8006568:	f043 0308 	orr.w	r3, r3, #8
 800656c:	81a3      	strh	r3, [r4, #12]
 800656e:	6923      	ldr	r3, [r4, #16]
 8006570:	b94b      	cbnz	r3, 8006586 <__swsetup_r+0x9a>
 8006572:	89a3      	ldrh	r3, [r4, #12]
 8006574:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800657c:	d003      	beq.n	8006586 <__swsetup_r+0x9a>
 800657e:	4621      	mov	r1, r4
 8006580:	4630      	mov	r0, r6
 8006582:	f000 f917 	bl	80067b4 <__smakebuf_r>
 8006586:	89a2      	ldrh	r2, [r4, #12]
 8006588:	f012 0301 	ands.w	r3, r2, #1
 800658c:	d00c      	beq.n	80065a8 <__swsetup_r+0xbc>
 800658e:	2300      	movs	r3, #0
 8006590:	60a3      	str	r3, [r4, #8]
 8006592:	6963      	ldr	r3, [r4, #20]
 8006594:	425b      	negs	r3, r3
 8006596:	61a3      	str	r3, [r4, #24]
 8006598:	6923      	ldr	r3, [r4, #16]
 800659a:	b953      	cbnz	r3, 80065b2 <__swsetup_r+0xc6>
 800659c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80065a4:	d1ba      	bne.n	800651c <__swsetup_r+0x30>
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
 80065a8:	0792      	lsls	r2, r2, #30
 80065aa:	bf58      	it	pl
 80065ac:	6963      	ldrpl	r3, [r4, #20]
 80065ae:	60a3      	str	r3, [r4, #8]
 80065b0:	e7f2      	b.n	8006598 <__swsetup_r+0xac>
 80065b2:	2000      	movs	r0, #0
 80065b4:	e7f7      	b.n	80065a6 <__swsetup_r+0xba>
 80065b6:	bf00      	nop
 80065b8:	2000000c 	.word	0x2000000c
 80065bc:	080069b0 	.word	0x080069b0
 80065c0:	080069d0 	.word	0x080069d0
 80065c4:	08006990 	.word	0x08006990

080065c8 <_close_r>:
 80065c8:	b538      	push	{r3, r4, r5, lr}
 80065ca:	4c06      	ldr	r4, [pc, #24]	; (80065e4 <_close_r+0x1c>)
 80065cc:	2300      	movs	r3, #0
 80065ce:	4605      	mov	r5, r0
 80065d0:	4608      	mov	r0, r1
 80065d2:	6023      	str	r3, [r4, #0]
 80065d4:	f7fa fdff 	bl	80011d6 <_close>
 80065d8:	1c43      	adds	r3, r0, #1
 80065da:	d102      	bne.n	80065e2 <_close_r+0x1a>
 80065dc:	6823      	ldr	r3, [r4, #0]
 80065de:	b103      	cbz	r3, 80065e2 <_close_r+0x1a>
 80065e0:	602b      	str	r3, [r5, #0]
 80065e2:	bd38      	pop	{r3, r4, r5, pc}
 80065e4:	20000330 	.word	0x20000330

080065e8 <__sflush_r>:
 80065e8:	898a      	ldrh	r2, [r1, #12]
 80065ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ee:	4605      	mov	r5, r0
 80065f0:	0710      	lsls	r0, r2, #28
 80065f2:	460c      	mov	r4, r1
 80065f4:	d458      	bmi.n	80066a8 <__sflush_r+0xc0>
 80065f6:	684b      	ldr	r3, [r1, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	dc05      	bgt.n	8006608 <__sflush_r+0x20>
 80065fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80065fe:	2b00      	cmp	r3, #0
 8006600:	dc02      	bgt.n	8006608 <__sflush_r+0x20>
 8006602:	2000      	movs	r0, #0
 8006604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006608:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800660a:	2e00      	cmp	r6, #0
 800660c:	d0f9      	beq.n	8006602 <__sflush_r+0x1a>
 800660e:	2300      	movs	r3, #0
 8006610:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006614:	682f      	ldr	r7, [r5, #0]
 8006616:	6a21      	ldr	r1, [r4, #32]
 8006618:	602b      	str	r3, [r5, #0]
 800661a:	d032      	beq.n	8006682 <__sflush_r+0x9a>
 800661c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800661e:	89a3      	ldrh	r3, [r4, #12]
 8006620:	075a      	lsls	r2, r3, #29
 8006622:	d505      	bpl.n	8006630 <__sflush_r+0x48>
 8006624:	6863      	ldr	r3, [r4, #4]
 8006626:	1ac0      	subs	r0, r0, r3
 8006628:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800662a:	b10b      	cbz	r3, 8006630 <__sflush_r+0x48>
 800662c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800662e:	1ac0      	subs	r0, r0, r3
 8006630:	2300      	movs	r3, #0
 8006632:	4602      	mov	r2, r0
 8006634:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006636:	6a21      	ldr	r1, [r4, #32]
 8006638:	4628      	mov	r0, r5
 800663a:	47b0      	blx	r6
 800663c:	1c43      	adds	r3, r0, #1
 800663e:	89a3      	ldrh	r3, [r4, #12]
 8006640:	d106      	bne.n	8006650 <__sflush_r+0x68>
 8006642:	6829      	ldr	r1, [r5, #0]
 8006644:	291d      	cmp	r1, #29
 8006646:	d848      	bhi.n	80066da <__sflush_r+0xf2>
 8006648:	4a29      	ldr	r2, [pc, #164]	; (80066f0 <__sflush_r+0x108>)
 800664a:	40ca      	lsrs	r2, r1
 800664c:	07d6      	lsls	r6, r2, #31
 800664e:	d544      	bpl.n	80066da <__sflush_r+0xf2>
 8006650:	2200      	movs	r2, #0
 8006652:	6062      	str	r2, [r4, #4]
 8006654:	04d9      	lsls	r1, r3, #19
 8006656:	6922      	ldr	r2, [r4, #16]
 8006658:	6022      	str	r2, [r4, #0]
 800665a:	d504      	bpl.n	8006666 <__sflush_r+0x7e>
 800665c:	1c42      	adds	r2, r0, #1
 800665e:	d101      	bne.n	8006664 <__sflush_r+0x7c>
 8006660:	682b      	ldr	r3, [r5, #0]
 8006662:	b903      	cbnz	r3, 8006666 <__sflush_r+0x7e>
 8006664:	6560      	str	r0, [r4, #84]	; 0x54
 8006666:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006668:	602f      	str	r7, [r5, #0]
 800666a:	2900      	cmp	r1, #0
 800666c:	d0c9      	beq.n	8006602 <__sflush_r+0x1a>
 800666e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006672:	4299      	cmp	r1, r3
 8006674:	d002      	beq.n	800667c <__sflush_r+0x94>
 8006676:	4628      	mov	r0, r5
 8006678:	f7ff fc98 	bl	8005fac <_free_r>
 800667c:	2000      	movs	r0, #0
 800667e:	6360      	str	r0, [r4, #52]	; 0x34
 8006680:	e7c0      	b.n	8006604 <__sflush_r+0x1c>
 8006682:	2301      	movs	r3, #1
 8006684:	4628      	mov	r0, r5
 8006686:	47b0      	blx	r6
 8006688:	1c41      	adds	r1, r0, #1
 800668a:	d1c8      	bne.n	800661e <__sflush_r+0x36>
 800668c:	682b      	ldr	r3, [r5, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0c5      	beq.n	800661e <__sflush_r+0x36>
 8006692:	2b1d      	cmp	r3, #29
 8006694:	d001      	beq.n	800669a <__sflush_r+0xb2>
 8006696:	2b16      	cmp	r3, #22
 8006698:	d101      	bne.n	800669e <__sflush_r+0xb6>
 800669a:	602f      	str	r7, [r5, #0]
 800669c:	e7b1      	b.n	8006602 <__sflush_r+0x1a>
 800669e:	89a3      	ldrh	r3, [r4, #12]
 80066a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066a4:	81a3      	strh	r3, [r4, #12]
 80066a6:	e7ad      	b.n	8006604 <__sflush_r+0x1c>
 80066a8:	690f      	ldr	r7, [r1, #16]
 80066aa:	2f00      	cmp	r7, #0
 80066ac:	d0a9      	beq.n	8006602 <__sflush_r+0x1a>
 80066ae:	0793      	lsls	r3, r2, #30
 80066b0:	680e      	ldr	r6, [r1, #0]
 80066b2:	bf08      	it	eq
 80066b4:	694b      	ldreq	r3, [r1, #20]
 80066b6:	600f      	str	r7, [r1, #0]
 80066b8:	bf18      	it	ne
 80066ba:	2300      	movne	r3, #0
 80066bc:	eba6 0807 	sub.w	r8, r6, r7
 80066c0:	608b      	str	r3, [r1, #8]
 80066c2:	f1b8 0f00 	cmp.w	r8, #0
 80066c6:	dd9c      	ble.n	8006602 <__sflush_r+0x1a>
 80066c8:	4643      	mov	r3, r8
 80066ca:	463a      	mov	r2, r7
 80066cc:	6a21      	ldr	r1, [r4, #32]
 80066ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066d0:	4628      	mov	r0, r5
 80066d2:	47b0      	blx	r6
 80066d4:	2800      	cmp	r0, #0
 80066d6:	dc06      	bgt.n	80066e6 <__sflush_r+0xfe>
 80066d8:	89a3      	ldrh	r3, [r4, #12]
 80066da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066de:	81a3      	strh	r3, [r4, #12]
 80066e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066e4:	e78e      	b.n	8006604 <__sflush_r+0x1c>
 80066e6:	4407      	add	r7, r0
 80066e8:	eba8 0800 	sub.w	r8, r8, r0
 80066ec:	e7e9      	b.n	80066c2 <__sflush_r+0xda>
 80066ee:	bf00      	nop
 80066f0:	20400001 	.word	0x20400001

080066f4 <_fflush_r>:
 80066f4:	b538      	push	{r3, r4, r5, lr}
 80066f6:	690b      	ldr	r3, [r1, #16]
 80066f8:	4605      	mov	r5, r0
 80066fa:	460c      	mov	r4, r1
 80066fc:	b1db      	cbz	r3, 8006736 <_fflush_r+0x42>
 80066fe:	b118      	cbz	r0, 8006708 <_fflush_r+0x14>
 8006700:	6983      	ldr	r3, [r0, #24]
 8006702:	b90b      	cbnz	r3, 8006708 <_fflush_r+0x14>
 8006704:	f7ff f8c8 	bl	8005898 <__sinit>
 8006708:	4b0c      	ldr	r3, [pc, #48]	; (800673c <_fflush_r+0x48>)
 800670a:	429c      	cmp	r4, r3
 800670c:	d109      	bne.n	8006722 <_fflush_r+0x2e>
 800670e:	686c      	ldr	r4, [r5, #4]
 8006710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006714:	b17b      	cbz	r3, 8006736 <_fflush_r+0x42>
 8006716:	4621      	mov	r1, r4
 8006718:	4628      	mov	r0, r5
 800671a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800671e:	f7ff bf63 	b.w	80065e8 <__sflush_r>
 8006722:	4b07      	ldr	r3, [pc, #28]	; (8006740 <_fflush_r+0x4c>)
 8006724:	429c      	cmp	r4, r3
 8006726:	d101      	bne.n	800672c <_fflush_r+0x38>
 8006728:	68ac      	ldr	r4, [r5, #8]
 800672a:	e7f1      	b.n	8006710 <_fflush_r+0x1c>
 800672c:	4b05      	ldr	r3, [pc, #20]	; (8006744 <_fflush_r+0x50>)
 800672e:	429c      	cmp	r4, r3
 8006730:	bf08      	it	eq
 8006732:	68ec      	ldreq	r4, [r5, #12]
 8006734:	e7ec      	b.n	8006710 <_fflush_r+0x1c>
 8006736:	2000      	movs	r0, #0
 8006738:	bd38      	pop	{r3, r4, r5, pc}
 800673a:	bf00      	nop
 800673c:	080069b0 	.word	0x080069b0
 8006740:	080069d0 	.word	0x080069d0
 8006744:	08006990 	.word	0x08006990

08006748 <_lseek_r>:
 8006748:	b538      	push	{r3, r4, r5, lr}
 800674a:	4c07      	ldr	r4, [pc, #28]	; (8006768 <_lseek_r+0x20>)
 800674c:	4605      	mov	r5, r0
 800674e:	4608      	mov	r0, r1
 8006750:	4611      	mov	r1, r2
 8006752:	2200      	movs	r2, #0
 8006754:	6022      	str	r2, [r4, #0]
 8006756:	461a      	mov	r2, r3
 8006758:	f7fa fd64 	bl	8001224 <_lseek>
 800675c:	1c43      	adds	r3, r0, #1
 800675e:	d102      	bne.n	8006766 <_lseek_r+0x1e>
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	b103      	cbz	r3, 8006766 <_lseek_r+0x1e>
 8006764:	602b      	str	r3, [r5, #0]
 8006766:	bd38      	pop	{r3, r4, r5, pc}
 8006768:	20000330 	.word	0x20000330

0800676c <__swhatbuf_r>:
 800676c:	b570      	push	{r4, r5, r6, lr}
 800676e:	460e      	mov	r6, r1
 8006770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006774:	2900      	cmp	r1, #0
 8006776:	b096      	sub	sp, #88	; 0x58
 8006778:	4614      	mov	r4, r2
 800677a:	461d      	mov	r5, r3
 800677c:	da07      	bge.n	800678e <__swhatbuf_r+0x22>
 800677e:	2300      	movs	r3, #0
 8006780:	602b      	str	r3, [r5, #0]
 8006782:	89b3      	ldrh	r3, [r6, #12]
 8006784:	061a      	lsls	r2, r3, #24
 8006786:	d410      	bmi.n	80067aa <__swhatbuf_r+0x3e>
 8006788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800678c:	e00e      	b.n	80067ac <__swhatbuf_r+0x40>
 800678e:	466a      	mov	r2, sp
 8006790:	f000 f884 	bl	800689c <_fstat_r>
 8006794:	2800      	cmp	r0, #0
 8006796:	dbf2      	blt.n	800677e <__swhatbuf_r+0x12>
 8006798:	9a01      	ldr	r2, [sp, #4]
 800679a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800679e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067a2:	425a      	negs	r2, r3
 80067a4:	415a      	adcs	r2, r3
 80067a6:	602a      	str	r2, [r5, #0]
 80067a8:	e7ee      	b.n	8006788 <__swhatbuf_r+0x1c>
 80067aa:	2340      	movs	r3, #64	; 0x40
 80067ac:	2000      	movs	r0, #0
 80067ae:	6023      	str	r3, [r4, #0]
 80067b0:	b016      	add	sp, #88	; 0x58
 80067b2:	bd70      	pop	{r4, r5, r6, pc}

080067b4 <__smakebuf_r>:
 80067b4:	898b      	ldrh	r3, [r1, #12]
 80067b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067b8:	079d      	lsls	r5, r3, #30
 80067ba:	4606      	mov	r6, r0
 80067bc:	460c      	mov	r4, r1
 80067be:	d507      	bpl.n	80067d0 <__smakebuf_r+0x1c>
 80067c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	6123      	str	r3, [r4, #16]
 80067c8:	2301      	movs	r3, #1
 80067ca:	6163      	str	r3, [r4, #20]
 80067cc:	b002      	add	sp, #8
 80067ce:	bd70      	pop	{r4, r5, r6, pc}
 80067d0:	ab01      	add	r3, sp, #4
 80067d2:	466a      	mov	r2, sp
 80067d4:	f7ff ffca 	bl	800676c <__swhatbuf_r>
 80067d8:	9900      	ldr	r1, [sp, #0]
 80067da:	4605      	mov	r5, r0
 80067dc:	4630      	mov	r0, r6
 80067de:	f7ff fc33 	bl	8006048 <_malloc_r>
 80067e2:	b948      	cbnz	r0, 80067f8 <__smakebuf_r+0x44>
 80067e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067e8:	059a      	lsls	r2, r3, #22
 80067ea:	d4ef      	bmi.n	80067cc <__smakebuf_r+0x18>
 80067ec:	f023 0303 	bic.w	r3, r3, #3
 80067f0:	f043 0302 	orr.w	r3, r3, #2
 80067f4:	81a3      	strh	r3, [r4, #12]
 80067f6:	e7e3      	b.n	80067c0 <__smakebuf_r+0xc>
 80067f8:	4b0d      	ldr	r3, [pc, #52]	; (8006830 <__smakebuf_r+0x7c>)
 80067fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	6020      	str	r0, [r4, #0]
 8006800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006804:	81a3      	strh	r3, [r4, #12]
 8006806:	9b00      	ldr	r3, [sp, #0]
 8006808:	6163      	str	r3, [r4, #20]
 800680a:	9b01      	ldr	r3, [sp, #4]
 800680c:	6120      	str	r0, [r4, #16]
 800680e:	b15b      	cbz	r3, 8006828 <__smakebuf_r+0x74>
 8006810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006814:	4630      	mov	r0, r6
 8006816:	f000 f853 	bl	80068c0 <_isatty_r>
 800681a:	b128      	cbz	r0, 8006828 <__smakebuf_r+0x74>
 800681c:	89a3      	ldrh	r3, [r4, #12]
 800681e:	f023 0303 	bic.w	r3, r3, #3
 8006822:	f043 0301 	orr.w	r3, r3, #1
 8006826:	81a3      	strh	r3, [r4, #12]
 8006828:	89a3      	ldrh	r3, [r4, #12]
 800682a:	431d      	orrs	r5, r3
 800682c:	81a5      	strh	r5, [r4, #12]
 800682e:	e7cd      	b.n	80067cc <__smakebuf_r+0x18>
 8006830:	08005861 	.word	0x08005861

08006834 <__ascii_mbtowc>:
 8006834:	b082      	sub	sp, #8
 8006836:	b901      	cbnz	r1, 800683a <__ascii_mbtowc+0x6>
 8006838:	a901      	add	r1, sp, #4
 800683a:	b142      	cbz	r2, 800684e <__ascii_mbtowc+0x1a>
 800683c:	b14b      	cbz	r3, 8006852 <__ascii_mbtowc+0x1e>
 800683e:	7813      	ldrb	r3, [r2, #0]
 8006840:	600b      	str	r3, [r1, #0]
 8006842:	7812      	ldrb	r2, [r2, #0]
 8006844:	1c10      	adds	r0, r2, #0
 8006846:	bf18      	it	ne
 8006848:	2001      	movne	r0, #1
 800684a:	b002      	add	sp, #8
 800684c:	4770      	bx	lr
 800684e:	4610      	mov	r0, r2
 8006850:	e7fb      	b.n	800684a <__ascii_mbtowc+0x16>
 8006852:	f06f 0001 	mvn.w	r0, #1
 8006856:	e7f8      	b.n	800684a <__ascii_mbtowc+0x16>

08006858 <__malloc_lock>:
 8006858:	4770      	bx	lr

0800685a <__malloc_unlock>:
 800685a:	4770      	bx	lr

0800685c <_read_r>:
 800685c:	b538      	push	{r3, r4, r5, lr}
 800685e:	4c07      	ldr	r4, [pc, #28]	; (800687c <_read_r+0x20>)
 8006860:	4605      	mov	r5, r0
 8006862:	4608      	mov	r0, r1
 8006864:	4611      	mov	r1, r2
 8006866:	2200      	movs	r2, #0
 8006868:	6022      	str	r2, [r4, #0]
 800686a:	461a      	mov	r2, r3
 800686c:	f7fa fc96 	bl	800119c <_read>
 8006870:	1c43      	adds	r3, r0, #1
 8006872:	d102      	bne.n	800687a <_read_r+0x1e>
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	b103      	cbz	r3, 800687a <_read_r+0x1e>
 8006878:	602b      	str	r3, [r5, #0]
 800687a:	bd38      	pop	{r3, r4, r5, pc}
 800687c:	20000330 	.word	0x20000330

08006880 <__ascii_wctomb>:
 8006880:	b149      	cbz	r1, 8006896 <__ascii_wctomb+0x16>
 8006882:	2aff      	cmp	r2, #255	; 0xff
 8006884:	bf85      	ittet	hi
 8006886:	238a      	movhi	r3, #138	; 0x8a
 8006888:	6003      	strhi	r3, [r0, #0]
 800688a:	700a      	strbls	r2, [r1, #0]
 800688c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006890:	bf98      	it	ls
 8006892:	2001      	movls	r0, #1
 8006894:	4770      	bx	lr
 8006896:	4608      	mov	r0, r1
 8006898:	4770      	bx	lr
	...

0800689c <_fstat_r>:
 800689c:	b538      	push	{r3, r4, r5, lr}
 800689e:	4c07      	ldr	r4, [pc, #28]	; (80068bc <_fstat_r+0x20>)
 80068a0:	2300      	movs	r3, #0
 80068a2:	4605      	mov	r5, r0
 80068a4:	4608      	mov	r0, r1
 80068a6:	4611      	mov	r1, r2
 80068a8:	6023      	str	r3, [r4, #0]
 80068aa:	f7fa fca0 	bl	80011ee <_fstat>
 80068ae:	1c43      	adds	r3, r0, #1
 80068b0:	d102      	bne.n	80068b8 <_fstat_r+0x1c>
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	b103      	cbz	r3, 80068b8 <_fstat_r+0x1c>
 80068b6:	602b      	str	r3, [r5, #0]
 80068b8:	bd38      	pop	{r3, r4, r5, pc}
 80068ba:	bf00      	nop
 80068bc:	20000330 	.word	0x20000330

080068c0 <_isatty_r>:
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	4c06      	ldr	r4, [pc, #24]	; (80068dc <_isatty_r+0x1c>)
 80068c4:	2300      	movs	r3, #0
 80068c6:	4605      	mov	r5, r0
 80068c8:	4608      	mov	r0, r1
 80068ca:	6023      	str	r3, [r4, #0]
 80068cc:	f7fa fc9f 	bl	800120e <_isatty>
 80068d0:	1c43      	adds	r3, r0, #1
 80068d2:	d102      	bne.n	80068da <_isatty_r+0x1a>
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	b103      	cbz	r3, 80068da <_isatty_r+0x1a>
 80068d8:	602b      	str	r3, [r5, #0]
 80068da:	bd38      	pop	{r3, r4, r5, pc}
 80068dc:	20000330 	.word	0x20000330

080068e0 <_init>:
 80068e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e2:	bf00      	nop
 80068e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e6:	bc08      	pop	{r3}
 80068e8:	469e      	mov	lr, r3
 80068ea:	4770      	bx	lr

080068ec <_fini>:
 80068ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ee:	bf00      	nop
 80068f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f2:	bc08      	pop	{r3}
 80068f4:	469e      	mov	lr, r3
 80068f6:	4770      	bx	lr
