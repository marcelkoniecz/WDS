
stm32-WDS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006254  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  080063f8  080063f8  000163f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066a8  080066a8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080066a8  080066a8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066a8  080066a8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066a8  080066a8  000166a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066ac  080066ac  000166ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080066b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200001dc  0800688c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  0800688c  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001064b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020af  00000000  00000000  00030857  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a28  00000000  00000000  00032908  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000930  00000000  00000000  00033330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021483  00000000  00000000  00033c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c0d0  00000000  00000000  000550e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c181b  00000000  00000000  000611b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001229ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000322c  00000000  00000000  00122a4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080063dc 	.word	0x080063dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080063dc 	.word	0x080063dc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <BMA220_Init>:
 *      Author: marcel
 */
#include "bma220.h"
#include "i2c.h"

uint8_t BMA220_Init(BMA220 *dev, I2C_HandleTypeDef *i2cHandle){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
	dev->i2cHandle=hi2c1;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a39      	ldr	r2, [pc, #228]	; (8000cac <BMA220_Init+0xf4>)
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	4611      	mov	r1, r2
 8000bca:	234c      	movs	r3, #76	; 0x4c
 8000bcc:	461a      	mov	r2, r3
 8000bce:	f003 fba5 	bl	800431c <memcpy>

	dev->accData[0]=0;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	dev->accData[1]=0;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	dev->accData[2]=0;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	//dev->accData[0]=0.3f;
	//dev->accData[1]=0.3f;
	//dev->accData[2]=0.3f;

	uint8_t errNum=0; //Liczba bledow
 8000bea:	2300      	movs	r3, #0
 8000bec:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;

	uint8_t regData;

	//Checking chip id
	status=BMA220_ReadRegister(dev,BMA220_REG_CHIP_ID,&regData);
 8000bee:	f107 030d 	add.w	r3, r7, #13
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 f8b2 	bl	8000d60 <BMA220_ReadRegister>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	73bb      	strb	r3, [r7, #14]
	errNum+=(status!=HAL_OK);
 8000c00:	7bbb      	ldrb	r3, [r7, #14]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	bf14      	ite	ne
 8000c06:	2301      	movne	r3, #1
 8000c08:	2300      	moveq	r3, #0
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	4413      	add	r3, r2
 8000c12:	73fb      	strb	r3, [r7, #15]

	if(regData!=CHIP_ID)
 8000c14:	7b7b      	ldrb	r3, [r7, #13]
 8000c16:	2bdd      	cmp	r3, #221	; 0xdd
 8000c18:	d001      	beq.n	8000c1e <BMA220_Init+0x66>
		return 255;
 8000c1a:	23ff      	movs	r3, #255	; 0xff
 8000c1c:	e042      	b.n	8000ca4 <BMA220_Init+0xec>

	status =BMA220_ReadRegister(dev,BMA220_REG_REV_ID,&regData);
 8000c1e:	f107 030d 	add.w	r3, r7, #13
 8000c22:	461a      	mov	r2, r3
 8000c24:	2102      	movs	r1, #2
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 f89a 	bl	8000d60 <BMA220_ReadRegister>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	73bb      	strb	r3, [r7, #14]
	errNum+=(status!=HAL_OK);
 8000c30:	7bbb      	ldrb	r3, [r7, #14]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	bf14      	ite	ne
 8000c36:	2301      	movne	r3, #1
 8000c38:	2300      	moveq	r3, #0
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	4413      	add	r3, r2
 8000c42:	73fb      	strb	r3, [r7, #15]

	if(regData!=REVISION_ID)
 8000c44:	7b7b      	ldrb	r3, [r7, #13]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <BMA220_Init+0x96>
		return 255;
 8000c4a:	23ff      	movs	r3, #255	; 0xff
 8000c4c:	e02a      	b.n	8000ca4 <BMA220_Init+0xec>

	//Filter

	regData=0x3;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	737b      	strb	r3, [r7, #13]
	status =BMA220_ReadRegister(dev,0x20,&regData);
 8000c52:	f107 030d 	add.w	r3, r7, #13
 8000c56:	461a      	mov	r2, r3
 8000c58:	2120      	movs	r1, #32
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f000 f880 	bl	8000d60 <BMA220_ReadRegister>
 8000c60:	4603      	mov	r3, r0
 8000c62:	73bb      	strb	r3, [r7, #14]
	errNum+=(status!=HAL_OK);
 8000c64:	7bbb      	ldrb	r3, [r7, #14]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	bf14      	ite	ne
 8000c6a:	2301      	movne	r3, #1
 8000c6c:	2300      	moveq	r3, #0
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	461a      	mov	r2, r3
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	4413      	add	r3, r2
 8000c76:	73fb      	strb	r3, [r7, #15]

	//Setting 4g

	regData=G4_MES;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	737b      	strb	r3, [r7, #13]
	status =BMA220_ReadRegister(dev,0x22,&regData);
 8000c7c:	f107 030d 	add.w	r3, r7, #13
 8000c80:	461a      	mov	r2, r3
 8000c82:	2122      	movs	r1, #34	; 0x22
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f000 f86b 	bl	8000d60 <BMA220_ReadRegister>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	73bb      	strb	r3, [r7, #14]
	errNum+=(status!=HAL_OK);
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	bf14      	ite	ne
 8000c94:	2301      	movne	r3, #1
 8000c96:	2300      	moveq	r3, #0
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	73fb      	strb	r3, [r7, #15]

	return errNum;
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000254 	.word	0x20000254

08000cb0 <BMA220_ReadAcc>:

HAL_StatusTypeDef BMA220_ReadAcc(BMA220 *dev){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

	int8_t data;
	uint8_t status;
	uint8_t errNum;
	status=BMA220_ReadRegister(dev,BMA220_REG_ACC_X,&data);
 8000cb8:	f107 030d 	add.w	r3, r7, #13
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f000 f84d 	bl	8000d60 <BMA220_ReadRegister>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	73fb      	strb	r3, [r7, #15]
	errNum+=(status!=HAL_OK);
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	bf14      	ite	ne
 8000cd0:	2301      	movne	r3, #1
 8000cd2:	2300      	moveq	r3, #0
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	7bbb      	ldrb	r3, [r7, #14]
 8000cda:	4413      	add	r3, r2
 8000cdc:	73bb      	strb	r3, [r7, #14]
//	dev->accData[0]=data*0.0625*9.81;
	dev->accData[0]=(data>>2);
 8000cde:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ce2:	109b      	asrs	r3, r3, #2
 8000ce4:	b25a      	sxtb	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	//dev->accData[0]=data;
	status=BMA220_ReadRegister(dev,BMA220_REG_ACC_Y,&data);
 8000cec:	f107 030d 	add.w	r3, r7, #13
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	2106      	movs	r1, #6
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f000 f833 	bl	8000d60 <BMA220_ReadRegister>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	73fb      	strb	r3, [r7, #15]
	errNum+=(status!=HAL_OK);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	bf14      	ite	ne
 8000d04:	2301      	movne	r3, #1
 8000d06:	2300      	moveq	r3, #0
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	7bbb      	ldrb	r3, [r7, #14]
 8000d0e:	4413      	add	r3, r2
 8000d10:	73bb      	strb	r3, [r7, #14]
//	dev->accData[1]=data*0.0625*9.81;
	dev->accData[1]=(data>>2);
 8000d12:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d16:	109b      	asrs	r3, r3, #2
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	//dev->accData[1]=data;
	status=BMA220_ReadRegister(dev,BMA220_REG_ACC_Z,&data);
 8000d20:	f107 030d 	add.w	r3, r7, #13
 8000d24:	461a      	mov	r2, r3
 8000d26:	2108      	movs	r1, #8
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f000 f819 	bl	8000d60 <BMA220_ReadRegister>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	73fb      	strb	r3, [r7, #15]
	errNum+=(status!=HAL_OK);
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	bf14      	ite	ne
 8000d38:	2301      	movne	r3, #1
 8000d3a:	2300      	moveq	r3, #0
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	461a      	mov	r2, r3
 8000d40:	7bbb      	ldrb	r3, [r7, #14]
 8000d42:	4413      	add	r3, r2
 8000d44:	73bb      	strb	r3, [r7, #14]
//	dev->accData[2]=data*0.0625*9.81;
	dev->accData[2]=(data>>2);
 8000d46:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d4a:	109b      	asrs	r3, r3, #2
 8000d4c:	b25a      	sxtb	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	//dev->accData[2]=data;
	return errNum;
 8000d54:	7bbb      	ldrb	r3, [r7, #14]

}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <BMA220_ReadRegister>:


HAL_StatusTypeDef BMA220_ReadRegister(BMA220 *dev, uint8_t reg, uint8_t *data){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af04      	add	r7, sp, #16
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	607a      	str	r2, [r7, #4]
 8000d6c:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(&hi2c1, BMA220_I2C_ADDR,reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000d6e:	7afb      	ldrb	r3, [r7, #11]
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d76:	9302      	str	r3, [sp, #8]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	9301      	str	r3, [sp, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2301      	movs	r3, #1
 8000d82:	2114      	movs	r1, #20
 8000d84:	4803      	ldr	r0, [pc, #12]	; (8000d94 <BMA220_ReadRegister+0x34>)
 8000d86:	f000 ff43 	bl	8001c10 <HAL_I2C_Mem_Read>
 8000d8a:	4603      	mov	r3, r0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000254 	.word	0x20000254

08000d98 <CRCSingleByte>:
#include <string.h>
#include "bma220.h"
#include "crc8.h"
#include "usart.h"

uint16_t CRCSingleByte(uint16_t data) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80fb      	strh	r3, [r7, #6]
	uint16_t poly = (POLYNOMIAL << 7);
 8000da2:	f24b 0380 	movw	r3, #45184	; 0xb080
 8000da6:	81bb      	strh	r3, [r7, #12]
	for (uint8_t i = 0; i < 8; i++) {
 8000da8:	2300      	movs	r3, #0
 8000daa:	73fb      	strb	r3, [r7, #15]
 8000dac:	e00d      	b.n	8000dca <CRCSingleByte+0x32>
		if ((data & 0x8000) != 0)
 8000dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	da03      	bge.n	8000dbe <CRCSingleByte+0x26>
			data ^= poly;
 8000db6:	88fa      	ldrh	r2, [r7, #6]
 8000db8:	89bb      	ldrh	r3, [r7, #12]
 8000dba:	4053      	eors	r3, r2
 8000dbc:	80fb      	strh	r3, [r7, #6]
		data <<= 1;
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 8; i++) {
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	73fb      	strb	r3, [r7, #15]
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	2b07      	cmp	r3, #7
 8000dce:	d9ee      	bls.n	8000dae <CRCSingleByte+0x16>
	}
	return data;
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <CalculateCRC8>:

uint16_t CalculateCRC8(uint8_t *ptr, uint32_t len) {
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b084      	sub	sp, #16
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	6039      	str	r1, [r7, #0]
	uint16_t data = ptr[0] << 8;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	81fb      	strh	r3, [r7, #14]

	for (int i = 1; i < strlen(ptr); i++) {
 8000df2:	2301      	movs	r3, #1
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	e010      	b.n	8000e1a <CalculateCRC8+0x3c>
		data |= ptr[i];
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	89fb      	ldrh	r3, [r7, #14]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	81fb      	strh	r3, [r7, #14]
		data = CRCSingleByte(data);
 8000e08:	89fb      	ldrh	r3, [r7, #14]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ffc4 	bl	8000d98 <CRCSingleByte>
 8000e10:	4603      	mov	r3, r0
 8000e12:	81fb      	strh	r3, [r7, #14]
	for (int i = 1; i < strlen(ptr); i++) {
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	3301      	adds	r3, #1
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff f9e0 	bl	80001e0 <strlen>
 8000e20:	4602      	mov	r2, r0
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d8e7      	bhi.n	8000df8 <CalculateCRC8+0x1a>
	}
	data = CRCSingleByte(data);
 8000e28:	89fb      	ldrh	r3, [r7, #14]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ffb4 	bl	8000d98 <CRCSingleByte>
 8000e30:	4603      	mov	r3, r0
 8000e32:	81fb      	strh	r3, [r7, #14]
	return (data >> 8);
 8000e34:	89fb      	ldrh	r3, [r7, #14]
 8000e36:	0a1b      	lsrs	r3, r3, #8
 8000e38:	b29b      	uxth	r3, r3
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <printValues>:

void printValues(BMA220 acc) {
 8000e44:	b084      	sub	sp, #16
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af02      	add	r7, sp, #8
 8000e4c:	f107 0c18 	add.w	ip, r7, #24
 8000e50:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t *FChar = "X "; //First char
 8000e54:	4b22      	ldr	r3, [pc, #136]	; (8000ee0 <printValues+0x9c>)
 8000e56:	60fb      	str	r3, [r7, #12]
	uint8_t *EChar = " \n"; //End chars
 8000e58:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <printValues+0xa0>)
 8000e5a:	60bb      	str	r3, [r7, #8]
	uint16_t CRC8 = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	80fb      	strh	r3, [r7, #6]
	static uint8_t buf[50];
	static uint8_t help[25];

	strcpy(buf, FChar); //Copy "X " to bufor
 8000e60:	68f9      	ldr	r1, [r7, #12]
 8000e62:	4821      	ldr	r0, [pc, #132]	; (8000ee8 <printValues+0xa4>)
 8000e64:	f003 fef9 	bl	8004c5a <strcpy>
	sprintf(help,"%d %d %d",acc.accData[0],acc.accData[1],acc.accData[2]);
 8000e68:	f997 3064 	ldrsb.w	r3, [r7, #100]	; 0x64
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	f997 3065 	ldrsb.w	r3, [r7, #101]	; 0x65
 8000e72:	4619      	mov	r1, r3
 8000e74:	f997 3066 	ldrsb.w	r3, [r7, #102]	; 0x66
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	491b      	ldr	r1, [pc, #108]	; (8000eec <printValues+0xa8>)
 8000e7e:	481c      	ldr	r0, [pc, #112]	; (8000ef0 <printValues+0xac>)
 8000e80:	f003 febc 	bl	8004bfc <siprintf>
	strcat(buf, help); 	//Copy message to bufor
 8000e84:	491a      	ldr	r1, [pc, #104]	; (8000ef0 <printValues+0xac>)
 8000e86:	4818      	ldr	r0, [pc, #96]	; (8000ee8 <printValues+0xa4>)
 8000e88:	f003 fed8 	bl	8004c3c <strcat>
	CRC8 = CalculateCRC8(buf, strlen(buf));
 8000e8c:	4816      	ldr	r0, [pc, #88]	; (8000ee8 <printValues+0xa4>)
 8000e8e:	f7ff f9a7 	bl	80001e0 <strlen>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4619      	mov	r1, r3
 8000e96:	4814      	ldr	r0, [pc, #80]	; (8000ee8 <printValues+0xa4>)
 8000e98:	f7ff ffa1 	bl	8000dde <CalculateCRC8>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	80fb      	strh	r3, [r7, #6]
	sprintf(help, " %X", CRC8);
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4913      	ldr	r1, [pc, #76]	; (8000ef4 <printValues+0xb0>)
 8000ea6:	4812      	ldr	r0, [pc, #72]	; (8000ef0 <printValues+0xac>)
 8000ea8:	f003 fea8 	bl	8004bfc <siprintf>
	strcat(buf, help);
 8000eac:	4910      	ldr	r1, [pc, #64]	; (8000ef0 <printValues+0xac>)
 8000eae:	480e      	ldr	r0, [pc, #56]	; (8000ee8 <printValues+0xa4>)
 8000eb0:	f003 fec4 	bl	8004c3c <strcat>
	strcat(buf, EChar); //Copy end chars to buf
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <printValues+0xa4>)
 8000eb8:	f003 fec0 	bl	8004c3c <strcat>

	HAL_UART_Transmit(&huart2, buf, strlen(buf), 1000);
 8000ebc:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <printValues+0xa4>)
 8000ebe:	f7ff f98f 	bl	80001e0 <strlen>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eca:	4907      	ldr	r1, [pc, #28]	; (8000ee8 <printValues+0xa4>)
 8000ecc:	480a      	ldr	r0, [pc, #40]	; (8000ef8 <printValues+0xb4>)
 8000ece:	f002 fde3 	bl	8003a98 <HAL_UART_Transmit>
}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000edc:	b004      	add	sp, #16
 8000ede:	4770      	bx	lr
 8000ee0:	080063f8 	.word	0x080063f8
 8000ee4:	080063fc 	.word	0x080063fc
 8000ee8:	200001f8 	.word	0x200001f8
 8000eec:	08006400 	.word	0x08006400
 8000ef0:	2000022c 	.word	0x2000022c
 8000ef4:	0800640c 	.word	0x0800640c
 8000ef8:	200002f0 	.word	0x200002f0

08000efc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	4b35      	ldr	r3, [pc, #212]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	4a34      	ldr	r2, [pc, #208]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f1c:	6153      	str	r3, [r2, #20]
 8000f1e:	4b32      	ldr	r3, [pc, #200]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f2a:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	4a2e      	ldr	r2, [pc, #184]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f34:	6153      	str	r3, [r2, #20]
 8000f36:	4b2c      	ldr	r3, [pc, #176]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	4a28      	ldr	r2, [pc, #160]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	6153      	str	r3, [r2, #20]
 8000f4e:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f64:	6153      	str	r3, [r2, #20]
 8000f66:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2120      	movs	r1, #32
 8000f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7a:	f000 fda1 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2110      	movs	r1, #16
 8000f82:	481a      	ldr	r0, [pc, #104]	; (8000fec <MX_GPIO_Init+0xf0>)
 8000f84:	f000 fd9c 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f8e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4814      	ldr	r0, [pc, #80]	; (8000ff0 <MX_GPIO_Init+0xf4>)
 8000fa0:	f000 fc04 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fa4:	2320      	movs	r3, #32
 8000fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbe:	f000 fbf5 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fc2:	2310      	movs	r3, #16
 8000fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <MX_GPIO_Init+0xf0>)
 8000fda:	f000 fbe7 	bl	80017ac <HAL_GPIO_Init>

}
 8000fde:	bf00      	nop
 8000fe0:	3728      	adds	r7, #40	; 0x28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	48000400 	.word	0x48000400
 8000ff0:	48000800 	.word	0x48000800

08000ff4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <MX_I2C1_Init+0x74>)
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	; (800106c <MX_I2C1_Init+0x78>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <MX_I2C1_Init+0x74>)
 8001000:	4a1b      	ldr	r2, [pc, #108]	; (8001070 <MX_I2C1_Init+0x7c>)
 8001002:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_I2C1_Init+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <MX_I2C1_Init+0x74>)
 800100c:	2201      	movs	r2, #1
 800100e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <MX_I2C1_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_I2C1_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_I2C1_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_I2C1_Init+0x74>)
 8001024:	2200      	movs	r2, #0
 8001026:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_I2C1_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800102e:	480e      	ldr	r0, [pc, #56]	; (8001068 <MX_I2C1_Init+0x74>)
 8001030:	f000 fd5e 	bl	8001af0 <HAL_I2C_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800103a:	f000 f90b 	bl	8001254 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800103e:	2100      	movs	r1, #0
 8001040:	4809      	ldr	r0, [pc, #36]	; (8001068 <MX_I2C1_Init+0x74>)
 8001042:	f001 f8d7 	bl	80021f4 <HAL_I2CEx_ConfigAnalogFilter>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800104c:	f000 f902 	bl	8001254 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001050:	2100      	movs	r1, #0
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_I2C1_Init+0x74>)
 8001054:	f001 f919 	bl	800228a <HAL_I2CEx_ConfigDigitalFilter>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800105e:	f000 f8f9 	bl	8001254 <Error_Handler>
  }

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000254 	.word	0x20000254
 800106c:	40005400 	.word	0x40005400
 8001070:	2000090e 	.word	0x2000090e

08001074 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a26      	ldr	r2, [pc, #152]	; (800112c <HAL_I2C_MspInit+0xb8>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d145      	bne.n	8001122 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b26      	ldr	r3, [pc, #152]	; (8001130 <HAL_I2C_MspInit+0xbc>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	4a25      	ldr	r2, [pc, #148]	; (8001130 <HAL_I2C_MspInit+0xbc>)
 800109c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a0:	6153      	str	r3, [r2, #20]
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <HAL_I2C_MspInit+0xbc>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <HAL_I2C_MspInit+0xbc>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	4a1f      	ldr	r2, [pc, #124]	; (8001130 <HAL_I2C_MspInit+0xbc>)
 80010b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b8:	6153      	str	r3, [r2, #20]
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <HAL_I2C_MspInit+0xbc>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010cc:	2312      	movs	r3, #18
 80010ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010d8:	2304      	movs	r3, #4
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e6:	f000 fb61 	bl	80017ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ee:	2312      	movs	r3, #18
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010fa:	2304      	movs	r3, #4
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	480b      	ldr	r0, [pc, #44]	; (8001134 <HAL_I2C_MspInit+0xc0>)
 8001106:	f000 fb51 	bl	80017ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_I2C_MspInit+0xbc>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_I2C_MspInit+0xbc>)
 8001110:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001114:	61d3      	str	r3, [r2, #28]
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_I2C_MspInit+0xbc>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40005400 	.word	0x40005400
 8001130:	40021000 	.word	0x40021000
 8001134:	48000400 	.word	0x48000400

08001138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113a:	b091      	sub	sp, #68	; 0x44
 800113c:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113e:	f000 f9c7 	bl	80014d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001142:	f000 f827 	bl	8001194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001146:	f7ff fed9 	bl	8000efc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800114a:	f000 f925 	bl	8001398 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800114e:	f7ff ff51 	bl	8000ff4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //BMA220_init();
  BMA220_Init(&acc, &hi2c1);
 8001152:	490e      	ldr	r1, [pc, #56]	; (800118c <main+0x54>)
 8001154:	480e      	ldr	r0, [pc, #56]	; (8001190 <main+0x58>)
 8001156:	f7ff fd2f 	bl	8000bb8 <BMA220_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMA220_ReadAcc(&acc);
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <main+0x58>)
 800115c:	f7ff fda8 	bl	8000cb0 <BMA220_ReadAcc>
	  printValues(acc);
 8001160:	4e0b      	ldr	r6, [pc, #44]	; (8001190 <main+0x58>)
 8001162:	466d      	mov	r5, sp
 8001164:	f106 0410 	add.w	r4, r6, #16
 8001168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800116c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001174:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001178:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800117c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001180:	f7ff fe60 	bl	8000e44 <printValues>
	 //printf("%d %d %d",acc.accData[0],acc.accData[1],acc.accData[2]);
	  // printf("X  d Y d Z d/n");
	 HAL_Delay(10);
 8001184:	200a      	movs	r0, #10
 8001186:	f000 fa09 	bl	800159c <HAL_Delay>
	  BMA220_ReadAcc(&acc);
 800118a:	e7e6      	b.n	800115a <main+0x22>
 800118c:	20000254 	.word	0x20000254
 8001190:	200002a0 	.word	0x200002a0

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b0a6      	sub	sp, #152	; 0x98
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800119e:	2228      	movs	r2, #40	; 0x28
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 f8c5 	bl	8004332 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2258      	movs	r2, #88	; 0x58
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 f8b7 	bl	8004332 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c4:	2302      	movs	r3, #2
 80011c6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c8:	2301      	movs	r3, #1
 80011ca:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011cc:	2310      	movs	r3, #16
 80011ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d2:	2302      	movs	r3, #2
 80011d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011e0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 f896 	bl	8002324 <HAL_RCC_OscConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011fe:	f000 f829 	bl	8001254 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001202:	230f      	movs	r3, #15
 8001204:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001206:	2302      	movs	r3, #2
 8001208:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800120e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001212:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001218:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800121c:	2102      	movs	r1, #2
 800121e:	4618      	mov	r0, r3
 8001220:	f001 ff96 	bl	8003150 <HAL_RCC_ClockConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800122a:	f000 f813 	bl	8001254 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800122e:	2322      	movs	r3, #34	; 0x22
 8001230:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001236:	2300      	movs	r3, #0
 8001238:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4618      	mov	r0, r3
 800123e:	f002 f9bf 	bl	80035c0 <HAL_RCCEx_PeriphCLKConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001248:	f000 f804 	bl	8001254 <Error_Handler>
  }
}
 800124c:	bf00      	nop
 800124e:	3798      	adds	r7, #152	; 0x98
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <HAL_MspInit+0x44>)
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <HAL_MspInit+0x44>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6193      	str	r3, [r2, #24]
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <HAL_MspInit+0x44>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_MspInit+0x44>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <HAL_MspInit+0x44>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	61d3      	str	r3, [r2, #28]
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_MspInit+0x44>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800129a:	2007      	movs	r0, #7
 800129c:	f000 fa52 	bl	8001744 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <HardFault_Handler+0x4>

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <MemManage_Handler+0x4>

080012c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <BusFault_Handler+0x4>

080012cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <UsageFault_Handler+0x4>

080012d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001300:	f000 f92c 	bl	800155c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}

08001308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001310:	4a14      	ldr	r2, [pc, #80]	; (8001364 <_sbrk+0x5c>)
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <_sbrk+0x60>)
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d102      	bne.n	800132a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <_sbrk+0x64>)
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <_sbrk+0x68>)
 8001328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	429a      	cmp	r2, r3
 8001336:	d207      	bcs.n	8001348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001338:	f002 ffc6 	bl	80042c8 <__errno>
 800133c:	4602      	mov	r2, r0
 800133e:	230c      	movs	r3, #12
 8001340:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001346:	e009      	b.n	800135c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	4a05      	ldr	r2, [pc, #20]	; (800136c <_sbrk+0x64>)
 8001358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135a:	68fb      	ldr	r3, [r7, #12]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20010000 	.word	0x20010000
 8001368:	00000400 	.word	0x00000400
 800136c:	20000248 	.word	0x20000248
 8001370:	20000380 	.word	0x20000380

08001374 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <SystemInit+0x20>)
 800137a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <SystemInit+0x20>)
 8001380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <MX_USART2_UART_Init>:

UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <MX_USART2_UART_Init+0x58>)
 800139e:	4a15      	ldr	r2, [pc, #84]	; (80013f4 <MX_USART2_UART_Init+0x5c>)
 80013a0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <MX_USART2_UART_Init+0x58>)
 80013a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_USART2_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_USART2_UART_Init+0x58>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <MX_USART2_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_USART2_UART_Init+0x58>)
 80013be:	220c      	movs	r2, #12
 80013c0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <MX_USART2_UART_Init+0x58>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_USART2_UART_Init+0x58>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <MX_USART2_UART_Init+0x58>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MX_USART2_UART_Init+0x58>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_USART2_UART_Init+0x58>)
 80013dc:	f002 fb0e 	bl	80039fc <HAL_UART_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80013e6:	f7ff ff35 	bl	8001254 <Error_Handler>
	}

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200002f0 	.word	0x200002f0
 80013f4:	40004400 	.word	0x40004400

080013f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
	if (uartHandle->Instance == USART2) {
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a17      	ldr	r2, [pc, #92]	; (8001474 <HAL_UART_MspInit+0x7c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d128      	bne.n	800146c <HAL_UART_MspInit+0x74>
		/* USER CODE BEGIN USART2_MspInit 0 */

		/* USER CODE END USART2_MspInit 0 */
		/* USART2 clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_UART_MspInit+0x80>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	4a16      	ldr	r2, [pc, #88]	; (8001478 <HAL_UART_MspInit+0x80>)
 8001420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001424:	61d3      	str	r3, [r2, #28]
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_UART_MspInit+0x80>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_UART_MspInit+0x80>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_UART_MspInit+0x80>)
 8001438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800143c:	6153      	str	r3, [r2, #20]
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_UART_MspInit+0x80>)
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
		/**USART2 GPIO Configuration
		 PA2     ------> USART2_TX
		 PA3     ------> USART2_RX
		 */
		GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
 800144a:	230c      	movs	r3, #12
 800144c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800145a:	2307      	movs	r3, #7
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001468:	f000 f9a0 	bl	80017ac <HAL_GPIO_Init>

		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}
}
 800146c:	bf00      	nop
 800146e:	3728      	adds	r7, #40	; 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40004400 	.word	0x40004400
 8001478:	40021000 	.word	0x40021000

0800147c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800147c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001482:	490e      	ldr	r1, [pc, #56]	; (80014bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001484:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <LoopForever+0xe>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001496:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001498:	4c0b      	ldr	r4, [pc, #44]	; (80014c8 <LoopForever+0x16>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014a6:	f7ff ff65 	bl	8001374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014aa:	f002 ff13 	bl	80042d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ae:	f7ff fe43 	bl	8001138 <main>

080014b2 <LoopForever>:

LoopForever:
    b LoopForever
 80014b2:	e7fe      	b.n	80014b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014bc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80014c0:	080066b0 	.word	0x080066b0
  ldr r2, =_sbss
 80014c4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80014c8:	2000037c 	.word	0x2000037c

080014cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <ADC1_2_IRQHandler>
	...

080014d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <HAL_Init+0x28>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <HAL_Init+0x28>)
 80014da:	f043 0310 	orr.w	r3, r3, #16
 80014de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e0:	2003      	movs	r0, #3
 80014e2:	f000 f92f 	bl	8001744 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e6:	2000      	movs	r0, #0
 80014e8:	f000 f808 	bl	80014fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ec:	f7ff feba 	bl	8001264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40022000 	.word	0x40022000

080014fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_InitTick+0x54>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_InitTick+0x58>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001512:	fbb3 f3f1 	udiv	r3, r3, r1
 8001516:	fbb2 f3f3 	udiv	r3, r2, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f939 	bl	8001792 <HAL_SYSTICK_Config>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e00e      	b.n	8001548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b0f      	cmp	r3, #15
 800152e:	d80a      	bhi.n	8001546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001530:	2200      	movs	r2, #0
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001538:	f000 f90f 	bl	800175a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800153c:	4a06      	ldr	r2, [pc, #24]	; (8001558 <HAL_InitTick+0x5c>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e000      	b.n	8001548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000000 	.word	0x20000000
 8001554:	20000008 	.word	0x20000008
 8001558:	20000004 	.word	0x20000004

0800155c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_IncTick+0x20>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_IncTick+0x24>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <HAL_IncTick+0x24>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000008 	.word	0x20000008
 8001580:	20000374 	.word	0x20000374

08001584 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;  
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <HAL_GetTick+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000374 	.word	0x20000374

0800159c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff ffee 	bl	8001584 <HAL_GetTick>
 80015a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015b4:	d005      	beq.n	80015c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_Delay+0x40>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015c2:	bf00      	nop
 80015c4:	f7ff ffde 	bl	8001584 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d8f7      	bhi.n	80015c4 <HAL_Delay+0x28>
  {
  }
}
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000008 	.word	0x20000008

080015e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800160c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001612:	4a04      	ldr	r2, [pc, #16]	; (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	60d3      	str	r3, [r2, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	2b00      	cmp	r3, #0
 8001656:	db0a      	blt.n	800166e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	490c      	ldr	r1, [pc, #48]	; (8001690 <__NVIC_SetPriority+0x4c>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	0112      	lsls	r2, r2, #4
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	440b      	add	r3, r1
 8001668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800166c:	e00a      	b.n	8001684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4908      	ldr	r1, [pc, #32]	; (8001694 <__NVIC_SetPriority+0x50>)
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	3b04      	subs	r3, #4
 800167c:	0112      	lsls	r2, r2, #4
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	440b      	add	r3, r1
 8001682:	761a      	strb	r2, [r3, #24]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000e100 	.word	0xe000e100
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	; 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f1c3 0307 	rsb	r3, r3, #7
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	bf28      	it	cs
 80016b6:	2304      	movcs	r3, #4
 80016b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3304      	adds	r3, #4
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d902      	bls.n	80016c8 <NVIC_EncodePriority+0x30>
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3b03      	subs	r3, #3
 80016c6:	e000      	b.n	80016ca <NVIC_EncodePriority+0x32>
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43da      	mvns	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	401a      	ands	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	43d9      	mvns	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	4313      	orrs	r3, r2
         );
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001710:	d301      	bcc.n	8001716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001712:	2301      	movs	r3, #1
 8001714:	e00f      	b.n	8001736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001716:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <SysTick_Config+0x40>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171e:	210f      	movs	r1, #15
 8001720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001724:	f7ff ff8e 	bl	8001644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <SysTick_Config+0x40>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172e:	4b04      	ldr	r3, [pc, #16]	; (8001740 <SysTick_Config+0x40>)
 8001730:	2207      	movs	r2, #7
 8001732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	e000e010 	.word	0xe000e010

08001744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ff47 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800176c:	f7ff ff5c 	bl	8001628 <__NVIC_GetPriorityGrouping>
 8001770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	6978      	ldr	r0, [r7, #20]
 8001778:	f7ff ff8e 	bl	8001698 <NVIC_EncodePriority>
 800177c:	4602      	mov	r2, r0
 800177e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff5d 	bl	8001644 <__NVIC_SetPriority>
}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ffb0 	bl	8001700 <SysTick_Config>
 80017a0:	4603      	mov	r3, r0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b087      	sub	sp, #28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ba:	e160      	b.n	8001a7e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	2101      	movs	r1, #1
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	fa01 f303 	lsl.w	r3, r1, r3
 80017c8:	4013      	ands	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 8152 	beq.w	8001a78 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d005      	beq.n	80017ec <HAL_GPIO_Init+0x40>
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d130      	bne.n	800184e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	2203      	movs	r2, #3
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001822:	2201      	movs	r2, #1
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	091b      	lsrs	r3, r3, #4
 8001838:	f003 0201 	and.w	r2, r3, #1
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	2b03      	cmp	r3, #3
 8001858:	d017      	beq.n	800188a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	2203      	movs	r2, #3
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d123      	bne.n	80018de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	08da      	lsrs	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3208      	adds	r2, #8
 800189e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	220f      	movs	r2, #15
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	691a      	ldr	r2, [r3, #16]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	08da      	lsrs	r2, r3, #3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3208      	adds	r2, #8
 80018d8:	6939      	ldr	r1, [r7, #16]
 80018da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	2203      	movs	r2, #3
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0203 	and.w	r2, r3, #3
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80ac 	beq.w	8001a78 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001920:	4b5e      	ldr	r3, [pc, #376]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a5d      	ldr	r2, [pc, #372]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6193      	str	r3, [r2, #24]
 800192c:	4b5b      	ldr	r3, [pc, #364]	; (8001a9c <HAL_GPIO_Init+0x2f0>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001938:	4a59      	ldr	r2, [pc, #356]	; (8001aa0 <HAL_GPIO_Init+0x2f4>)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	3302      	adds	r3, #2
 8001940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001944:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	220f      	movs	r2, #15
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001962:	d025      	beq.n	80019b0 <HAL_GPIO_Init+0x204>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a4f      	ldr	r2, [pc, #316]	; (8001aa4 <HAL_GPIO_Init+0x2f8>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d01f      	beq.n	80019ac <HAL_GPIO_Init+0x200>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a4e      	ldr	r2, [pc, #312]	; (8001aa8 <HAL_GPIO_Init+0x2fc>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d019      	beq.n	80019a8 <HAL_GPIO_Init+0x1fc>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a4d      	ldr	r2, [pc, #308]	; (8001aac <HAL_GPIO_Init+0x300>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d013      	beq.n	80019a4 <HAL_GPIO_Init+0x1f8>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a4c      	ldr	r2, [pc, #304]	; (8001ab0 <HAL_GPIO_Init+0x304>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d00d      	beq.n	80019a0 <HAL_GPIO_Init+0x1f4>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a4b      	ldr	r2, [pc, #300]	; (8001ab4 <HAL_GPIO_Init+0x308>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d007      	beq.n	800199c <HAL_GPIO_Init+0x1f0>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a4a      	ldr	r2, [pc, #296]	; (8001ab8 <HAL_GPIO_Init+0x30c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d101      	bne.n	8001998 <HAL_GPIO_Init+0x1ec>
 8001994:	2306      	movs	r3, #6
 8001996:	e00c      	b.n	80019b2 <HAL_GPIO_Init+0x206>
 8001998:	2307      	movs	r3, #7
 800199a:	e00a      	b.n	80019b2 <HAL_GPIO_Init+0x206>
 800199c:	2305      	movs	r3, #5
 800199e:	e008      	b.n	80019b2 <HAL_GPIO_Init+0x206>
 80019a0:	2304      	movs	r3, #4
 80019a2:	e006      	b.n	80019b2 <HAL_GPIO_Init+0x206>
 80019a4:	2303      	movs	r3, #3
 80019a6:	e004      	b.n	80019b2 <HAL_GPIO_Init+0x206>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e002      	b.n	80019b2 <HAL_GPIO_Init+0x206>
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <HAL_GPIO_Init+0x206>
 80019b0:	2300      	movs	r3, #0
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	f002 0203 	and.w	r2, r2, #3
 80019b8:	0092      	lsls	r2, r2, #2
 80019ba:	4093      	lsls	r3, r2
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019c2:	4937      	ldr	r1, [pc, #220]	; (8001aa0 <HAL_GPIO_Init+0x2f4>)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	3302      	adds	r3, #2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d0:	4b3a      	ldr	r3, [pc, #232]	; (8001abc <HAL_GPIO_Init+0x310>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019f4:	4a31      	ldr	r2, [pc, #196]	; (8001abc <HAL_GPIO_Init+0x310>)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019fa:	4b30      	ldr	r3, [pc, #192]	; (8001abc <HAL_GPIO_Init+0x310>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a1e:	4a27      	ldr	r2, [pc, #156]	; (8001abc <HAL_GPIO_Init+0x310>)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a24:	4b25      	ldr	r3, [pc, #148]	; (8001abc <HAL_GPIO_Init+0x310>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a48:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <HAL_GPIO_Init+0x310>)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_GPIO_Init+0x310>)
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a72:	4a12      	ldr	r2, [pc, #72]	; (8001abc <HAL_GPIO_Init+0x310>)
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f47f ae97 	bne.w	80017bc <HAL_GPIO_Init+0x10>
  }
}
 8001a8e:	bf00      	nop
 8001a90:	371c      	adds	r7, #28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	48000400 	.word	0x48000400
 8001aa8:	48000800 	.word	0x48000800
 8001aac:	48000c00 	.word	0x48000c00
 8001ab0:	48001000 	.word	0x48001000
 8001ab4:	48001400 	.word	0x48001400
 8001ab8:	48001800 	.word	0x48001800
 8001abc:	40010400 	.word	0x40010400

08001ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	807b      	strh	r3, [r7, #2]
 8001acc:	4613      	mov	r3, r2
 8001ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ad0:	787b      	ldrb	r3, [r7, #1]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ad6:	887a      	ldrh	r2, [r7, #2]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001adc:	e002      	b.n	8001ae4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ade:	887a      	ldrh	r2, [r7, #2]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e081      	b.n	8001c06 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d106      	bne.n	8001b1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff faac 	bl	8001074 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2224      	movs	r2, #36	; 0x24
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0201 	bic.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d107      	bne.n	8001b6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	e006      	b.n	8001b78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d104      	bne.n	8001b8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69d9      	ldr	r1, [r3, #28]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1a      	ldr	r2, [r3, #32]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0201 	orr.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af02      	add	r7, sp, #8
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	4608      	mov	r0, r1
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4603      	mov	r3, r0
 8001c20:	817b      	strh	r3, [r7, #10]
 8001c22:	460b      	mov	r3, r1
 8001c24:	813b      	strh	r3, [r7, #8]
 8001c26:	4613      	mov	r3, r2
 8001c28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b20      	cmp	r3, #32
 8001c34:	f040 80fd 	bne.w	8001e32 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <HAL_I2C_Mem_Read+0x34>
 8001c3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d105      	bne.n	8001c50 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c4a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0f1      	b.n	8001e34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d101      	bne.n	8001c5e <HAL_I2C_Mem_Read+0x4e>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e0ea      	b.n	8001e34 <HAL_I2C_Mem_Read+0x224>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c66:	f7ff fc8d 	bl	8001584 <HAL_GetTick>
 8001c6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	2319      	movs	r3, #25
 8001c72:	2201      	movs	r2, #1
 8001c74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 f95b 	bl	8001f34 <I2C_WaitOnFlagUntilTimeout>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0d5      	b.n	8001e34 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2222      	movs	r2, #34	; 0x22
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2240      	movs	r2, #64	; 0x40
 8001c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a3a      	ldr	r2, [r7, #32]
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cb0:	88f8      	ldrh	r0, [r7, #6]
 8001cb2:	893a      	ldrh	r2, [r7, #8]
 8001cb4:	8979      	ldrh	r1, [r7, #10]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 f8bf 	bl	8001e44 <I2C_RequestMemoryRead>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0ad      	b.n	8001e34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	2bff      	cmp	r3, #255	; 0xff
 8001ce0:	d90e      	bls.n	8001d00 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	22ff      	movs	r2, #255	; 0xff
 8001ce6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	8979      	ldrh	r1, [r7, #10]
 8001cf0:	4b52      	ldr	r3, [pc, #328]	; (8001e3c <HAL_I2C_Mem_Read+0x22c>)
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 fa4d 	bl	8002198 <I2C_TransferConfig>
 8001cfe:	e00f      	b.n	8001d20 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	8979      	ldrh	r1, [r7, #10]
 8001d12:	4b4a      	ldr	r3, [pc, #296]	; (8001e3c <HAL_I2C_Mem_Read+0x22c>)
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 fa3c 	bl	8002198 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d26:	2200      	movs	r2, #0
 8001d28:	2104      	movs	r1, #4
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f902 	bl	8001f34 <I2C_WaitOnFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e07c      	b.n	8001e34 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d56:	3b01      	subs	r3, #1
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d034      	beq.n	8001de0 <HAL_I2C_Mem_Read+0x1d0>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d130      	bne.n	8001de0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d84:	2200      	movs	r2, #0
 8001d86:	2180      	movs	r1, #128	; 0x80
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 f8d3 	bl	8001f34 <I2C_WaitOnFlagUntilTimeout>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e04d      	b.n	8001e34 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	2bff      	cmp	r3, #255	; 0xff
 8001da0:	d90e      	bls.n	8001dc0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	22ff      	movs	r2, #255	; 0xff
 8001da6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	8979      	ldrh	r1, [r7, #10]
 8001db0:	2300      	movs	r3, #0
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 f9ed 	bl	8002198 <I2C_TransferConfig>
 8001dbe:	e00f      	b.n	8001de0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	8979      	ldrh	r1, [r7, #10]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 f9dc 	bl	8002198 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d19a      	bne.n	8001d20 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 f920 	bl	8002034 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e01a      	b.n	8001e34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2220      	movs	r2, #32
 8001e04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_I2C_Mem_Read+0x230>)
 8001e12:	400b      	ands	r3, r1
 8001e14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2220      	movs	r2, #32
 8001e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e000      	b.n	8001e34 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001e32:	2302      	movs	r3, #2
  }
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	80002400 	.word	0x80002400
 8001e40:	fe00e800 	.word	0xfe00e800

08001e44 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af02      	add	r7, sp, #8
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	4608      	mov	r0, r1
 8001e4e:	4611      	mov	r1, r2
 8001e50:	461a      	mov	r2, r3
 8001e52:	4603      	mov	r3, r0
 8001e54:	817b      	strh	r3, [r7, #10]
 8001e56:	460b      	mov	r3, r1
 8001e58:	813b      	strh	r3, [r7, #8]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	8979      	ldrh	r1, [r7, #10]
 8001e64:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <I2C_RequestMemoryRead+0xa4>)
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 f994 	bl	8002198 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	69b9      	ldr	r1, [r7, #24]
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 f89d 	bl	8001fb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e02c      	b.n	8001ede <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d105      	bne.n	8001e96 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e8a:	893b      	ldrh	r3, [r7, #8]
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	629a      	str	r2, [r3, #40]	; 0x28
 8001e94:	e015      	b.n	8001ec2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e96:	893b      	ldrh	r3, [r7, #8]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ea4:	69fa      	ldr	r2, [r7, #28]
 8001ea6:	69b9      	ldr	r1, [r7, #24]
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 f883 	bl	8001fb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e012      	b.n	8001ede <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001eb8:	893b      	ldrh	r3, [r7, #8]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2140      	movs	r1, #64	; 0x40
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 f831 	bl	8001f34 <I2C_WaitOnFlagUntilTimeout>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	80002000 	.word	0x80002000

08001eec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d103      	bne.n	8001f0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2200      	movs	r2, #0
 8001f08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d007      	beq.n	8001f28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	619a      	str	r2, [r3, #24]
  }
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	4613      	mov	r3, r2
 8001f42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f44:	e022      	b.n	8001f8c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f4c:	d01e      	beq.n	8001f8c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4e:	f7ff fb19 	bl	8001584 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d302      	bcc.n	8001f64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d113      	bne.n	8001f8c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f68:	f043 0220 	orr.w	r2, r3, #32
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e00f      	b.n	8001fac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699a      	ldr	r2, [r3, #24]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	4013      	ands	r3, r2
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	bf0c      	ite	eq
 8001f9c:	2301      	moveq	r3, #1
 8001f9e:	2300      	movne	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d0cd      	beq.n	8001f46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fc0:	e02c      	b.n	800201c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f870 	bl	80020ac <I2C_IsAcknowledgeFailed>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e02a      	b.n	800202c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fdc:	d01e      	beq.n	800201c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fde:	f7ff fad1 	bl	8001584 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d302      	bcc.n	8001ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d113      	bne.n	800201c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff8:	f043 0220 	orr.w	r2, r3, #32
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2220      	movs	r2, #32
 8002004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e007      	b.n	800202c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b02      	cmp	r3, #2
 8002028:	d1cb      	bne.n	8001fc2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002040:	e028      	b.n	8002094 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 f830 	bl	80020ac <I2C_IsAcknowledgeFailed>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e026      	b.n	80020a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002056:	f7ff fa95 	bl	8001584 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	429a      	cmp	r2, r3
 8002064:	d302      	bcc.n	800206c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d113      	bne.n	8002094 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002070:	f043 0220 	orr.w	r2, r3, #32
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e007      	b.n	80020a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	f003 0320 	and.w	r3, r3, #32
 800209e:	2b20      	cmp	r3, #32
 80020a0:	d1cf      	bne.n	8002042 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b10      	cmp	r3, #16
 80020c4:	d161      	bne.n	800218a <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020d4:	d02b      	beq.n	800212e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020e4:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020e6:	e022      	b.n	800212e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020ee:	d01e      	beq.n	800212e <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f0:	f7ff fa48 	bl	8001584 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d302      	bcc.n	8002106 <I2C_IsAcknowledgeFailed+0x5a>
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d113      	bne.n	800212e <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	f043 0220 	orr.w	r2, r3, #32
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2220      	movs	r2, #32
 8002116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e02e      	b.n	800218c <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0320 	and.w	r3, r3, #32
 8002138:	2b20      	cmp	r3, #32
 800213a:	d1d5      	bne.n	80020e8 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2210      	movs	r2, #16
 8002142:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2220      	movs	r2, #32
 800214a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f7ff fecd 	bl	8001eec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6859      	ldr	r1, [r3, #4]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <I2C_IsAcknowledgeFailed+0xe8>)
 800215e:	400b      	ands	r3, r1
 8002160:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	f043 0204 	orr.w	r2, r3, #4
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2220      	movs	r2, #32
 8002172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	fe00e800 	.word	0xfe00e800

08002198 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	607b      	str	r3, [r7, #4]
 80021a2:	460b      	mov	r3, r1
 80021a4:	817b      	strh	r3, [r7, #10]
 80021a6:	4613      	mov	r3, r2
 80021a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	0d5b      	lsrs	r3, r3, #21
 80021b4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80021b8:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <I2C_TransferConfig+0x58>)
 80021ba:	430b      	orrs	r3, r1
 80021bc:	43db      	mvns	r3, r3
 80021be:	ea02 0103 	and.w	r1, r2, r3
 80021c2:	897b      	ldrh	r3, [r7, #10]
 80021c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021c8:	7a7b      	ldrb	r3, [r7, #9]
 80021ca:	041b      	lsls	r3, r3, #16
 80021cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	431a      	orrs	r2, r3
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	431a      	orrs	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	03ff63ff 	.word	0x03ff63ff

080021f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b20      	cmp	r3, #32
 8002208:	d138      	bne.n	800227c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002214:	2302      	movs	r3, #2
 8002216:	e032      	b.n	800227e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2224      	movs	r2, #36	; 0x24
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002246:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6819      	ldr	r1, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	e000      	b.n	800227e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800227c:	2302      	movs	r3, #2
  }
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800228a:	b480      	push	{r7}
 800228c:	b085      	sub	sp, #20
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b20      	cmp	r3, #32
 800229e:	d139      	bne.n	8002314 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e033      	b.n	8002316 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2224      	movs	r2, #36	; 0x24
 80022ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0201 	bic.w	r2, r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	021b      	lsls	r3, r3, #8
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	e000      	b.n	8002316 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002314:	2302      	movs	r3, #2
  }
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800232a:	af00      	add	r7, sp, #0
 800232c:	1d3b      	adds	r3, r7, #4
 800232e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	f000 bf01 	b.w	8003140 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 8160 	beq.w	800260e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800234e:	4bae      	ldr	r3, [pc, #696]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b04      	cmp	r3, #4
 8002358:	d00c      	beq.n	8002374 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800235a:	4bab      	ldr	r3, [pc, #684]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b08      	cmp	r3, #8
 8002364:	d159      	bne.n	800241a <HAL_RCC_OscConfig+0xf6>
 8002366:	4ba8      	ldr	r3, [pc, #672]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800236e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002372:	d152      	bne.n	800241a <HAL_RCC_OscConfig+0xf6>
 8002374:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002378:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002388:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d102      	bne.n	80023a6 <HAL_RCC_OscConfig+0x82>
 80023a0:	4b99      	ldr	r3, [pc, #612]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	e015      	b.n	80023d2 <HAL_RCC_OscConfig+0xae>
 80023a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023aa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80023ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023be:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80023c2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80023ce:	4b8e      	ldr	r3, [pc, #568]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023d6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80023da:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80023de:	fa92 f2a2 	rbit	r2, r2
 80023e2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80023e6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80023ea:	fab2 f282 	clz	r2, r2
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	f042 0220 	orr.w	r2, r2, #32
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	f002 021f 	and.w	r2, r2, #31
 80023fa:	2101      	movs	r1, #1
 80023fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002400:	4013      	ands	r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 8102 	beq.w	800260c <HAL_RCC_OscConfig+0x2e8>
 8002408:	1d3b      	adds	r3, r7, #4
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f040 80fc 	bne.w	800260c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	f000 be93 	b.w	8003140 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002424:	d106      	bne.n	8002434 <HAL_RCC_OscConfig+0x110>
 8002426:	4b78      	ldr	r3, [pc, #480]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a77      	ldr	r2, [pc, #476]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 800242c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e030      	b.n	8002496 <HAL_RCC_OscConfig+0x172>
 8002434:	1d3b      	adds	r3, r7, #4
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10c      	bne.n	8002458 <HAL_RCC_OscConfig+0x134>
 800243e:	4b72      	ldr	r3, [pc, #456]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a71      	ldr	r2, [pc, #452]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 8002444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	4b6f      	ldr	r3, [pc, #444]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a6e      	ldr	r2, [pc, #440]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 8002450:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e01e      	b.n	8002496 <HAL_RCC_OscConfig+0x172>
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002462:	d10c      	bne.n	800247e <HAL_RCC_OscConfig+0x15a>
 8002464:	4b68      	ldr	r3, [pc, #416]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a67      	ldr	r2, [pc, #412]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 800246a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	4b65      	ldr	r3, [pc, #404]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a64      	ldr	r2, [pc, #400]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 8002476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	e00b      	b.n	8002496 <HAL_RCC_OscConfig+0x172>
 800247e:	4b62      	ldr	r3, [pc, #392]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a61      	ldr	r2, [pc, #388]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 8002484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b5f      	ldr	r3, [pc, #380]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a5e      	ldr	r2, [pc, #376]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 8002490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002494:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d059      	beq.n	8002554 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7ff f870 	bl	8001584 <HAL_GetTick>
 80024a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a8:	e00a      	b.n	80024c0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024aa:	f7ff f86b 	bl	8001584 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	; 0x64
 80024b8:	d902      	bls.n	80024c0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	f000 be40 	b.w	8003140 <HAL_RCC_OscConfig+0xe1c>
 80024c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024c4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80024cc:	fa93 f3a3 	rbit	r3, r3
 80024d0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80024d4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d102      	bne.n	80024f2 <HAL_RCC_OscConfig+0x1ce>
 80024ec:	4b46      	ldr	r3, [pc, #280]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	e015      	b.n	800251e <HAL_RCC_OscConfig+0x1fa>
 80024f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002506:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800250a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800250e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800251a:	4b3b      	ldr	r3, [pc, #236]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002522:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002526:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800252a:	fa92 f2a2 	rbit	r2, r2
 800252e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002532:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002536:	fab2 f282 	clz	r2, r2
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	f042 0220 	orr.w	r2, r2, #32
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	f002 021f 	and.w	r2, r2, #31
 8002546:	2101      	movs	r1, #1
 8002548:	fa01 f202 	lsl.w	r2, r1, r2
 800254c:	4013      	ands	r3, r2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0ab      	beq.n	80024aa <HAL_RCC_OscConfig+0x186>
 8002552:	e05c      	b.n	800260e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7ff f816 	bl	8001584 <HAL_GetTick>
 8002558:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255c:	e00a      	b.n	8002574 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800255e:	f7ff f811 	bl	8001584 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	; 0x64
 800256c:	d902      	bls.n	8002574 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	f000 bde6 	b.w	8003140 <HAL_RCC_OscConfig+0xe1c>
 8002574:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002578:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002588:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258c:	fab3 f383 	clz	r3, r3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	b2db      	uxtb	r3, r3
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b01      	cmp	r3, #1
 800259e:	d102      	bne.n	80025a6 <HAL_RCC_OscConfig+0x282>
 80025a0:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	e015      	b.n	80025d2 <HAL_RCC_OscConfig+0x2ae>
 80025a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80025ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025be:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80025c2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <HAL_RCC_OscConfig+0x2e4>)
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025d6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80025da:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80025de:	fa92 f2a2 	rbit	r2, r2
 80025e2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80025e6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80025ea:	fab2 f282 	clz	r2, r2
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	f042 0220 	orr.w	r2, r2, #32
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	f002 021f 	and.w	r2, r2, #31
 80025fa:	2101      	movs	r1, #1
 80025fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002600:	4013      	ands	r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1ab      	bne.n	800255e <HAL_RCC_OscConfig+0x23a>
 8002606:	e002      	b.n	800260e <HAL_RCC_OscConfig+0x2ea>
 8002608:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260e:	1d3b      	adds	r3, r7, #4
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 8170 	beq.w	80028fe <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800261e:	4bd0      	ldr	r3, [pc, #832]	; (8002960 <HAL_RCC_OscConfig+0x63c>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00c      	beq.n	8002644 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800262a:	4bcd      	ldr	r3, [pc, #820]	; (8002960 <HAL_RCC_OscConfig+0x63c>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b08      	cmp	r3, #8
 8002634:	d16d      	bne.n	8002712 <HAL_RCC_OscConfig+0x3ee>
 8002636:	4bca      	ldr	r3, [pc, #808]	; (8002960 <HAL_RCC_OscConfig+0x63c>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800263e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002642:	d166      	bne.n	8002712 <HAL_RCC_OscConfig+0x3ee>
 8002644:	2302      	movs	r3, #2
 8002646:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800264e:	fa93 f3a3 	rbit	r3, r3
 8002652:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002656:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b01      	cmp	r3, #1
 800266c:	d102      	bne.n	8002674 <HAL_RCC_OscConfig+0x350>
 800266e:	4bbc      	ldr	r3, [pc, #752]	; (8002960 <HAL_RCC_OscConfig+0x63c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	e013      	b.n	800269c <HAL_RCC_OscConfig+0x378>
 8002674:	2302      	movs	r3, #2
 8002676:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002686:	2302      	movs	r3, #2
 8002688:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800268c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002698:	4bb1      	ldr	r3, [pc, #708]	; (8002960 <HAL_RCC_OscConfig+0x63c>)
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	2202      	movs	r2, #2
 800269e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80026a2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80026a6:	fa92 f2a2 	rbit	r2, r2
 80026aa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80026ae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80026b2:	fab2 f282 	clz	r2, r2
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	f042 0220 	orr.w	r2, r2, #32
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	f002 021f 	and.w	r2, r2, #31
 80026c2:	2101      	movs	r1, #1
 80026c4:	fa01 f202 	lsl.w	r2, r1, r2
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d007      	beq.n	80026de <HAL_RCC_OscConfig+0x3ba>
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d002      	beq.n	80026de <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	f000 bd31 	b.w	8003140 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026de:	4ba0      	ldr	r3, [pc, #640]	; (8002960 <HAL_RCC_OscConfig+0x63c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e6:	1d3b      	adds	r3, r7, #4
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	21f8      	movs	r1, #248	; 0xf8
 80026ee:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80026f6:	fa91 f1a1 	rbit	r1, r1
 80026fa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80026fe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002702:	fab1 f181 	clz	r1, r1
 8002706:	b2c9      	uxtb	r1, r1
 8002708:	408b      	lsls	r3, r1
 800270a:	4995      	ldr	r1, [pc, #596]	; (8002960 <HAL_RCC_OscConfig+0x63c>)
 800270c:	4313      	orrs	r3, r2
 800270e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002710:	e0f5      	b.n	80028fe <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002712:	1d3b      	adds	r3, r7, #4
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 8085 	beq.w	8002828 <HAL_RCC_OscConfig+0x504>
 800271e:	2301      	movs	r3, #1
 8002720:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002730:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002734:	fab3 f383 	clz	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800273e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	461a      	mov	r2, r3
 8002746:	2301      	movs	r3, #1
 8002748:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe ff1b 	bl	8001584 <HAL_GetTick>
 800274e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002752:	e00a      	b.n	800276a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002754:	f7fe ff16 	bl	8001584 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d902      	bls.n	800276a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	f000 bceb 	b.w	8003140 <HAL_RCC_OscConfig+0xe1c>
 800276a:	2302      	movs	r3, #2
 800276c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800277c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002780:	fab3 f383 	clz	r3, r3
 8002784:	b2db      	uxtb	r3, r3
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b01      	cmp	r3, #1
 8002792:	d102      	bne.n	800279a <HAL_RCC_OscConfig+0x476>
 8002794:	4b72      	ldr	r3, [pc, #456]	; (8002960 <HAL_RCC_OscConfig+0x63c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	e013      	b.n	80027c2 <HAL_RCC_OscConfig+0x49e>
 800279a:	2302      	movs	r3, #2
 800279c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80027a4:	fa93 f3a3 	rbit	r3, r3
 80027a8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80027ac:	2302      	movs	r3, #2
 80027ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80027b2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80027be:	4b68      	ldr	r3, [pc, #416]	; (8002960 <HAL_RCC_OscConfig+0x63c>)
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	2202      	movs	r2, #2
 80027c4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80027c8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80027cc:	fa92 f2a2 	rbit	r2, r2
 80027d0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80027d4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80027d8:	fab2 f282 	clz	r2, r2
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	f042 0220 	orr.w	r2, r2, #32
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	f002 021f 	and.w	r2, r2, #31
 80027e8:	2101      	movs	r1, #1
 80027ea:	fa01 f202 	lsl.w	r2, r1, r2
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0af      	beq.n	8002754 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f4:	4b5a      	ldr	r3, [pc, #360]	; (8002960 <HAL_RCC_OscConfig+0x63c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027fc:	1d3b      	adds	r3, r7, #4
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	21f8      	movs	r1, #248	; 0xf8
 8002804:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800280c:	fa91 f1a1 	rbit	r1, r1
 8002810:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002814:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002818:	fab1 f181 	clz	r1, r1
 800281c:	b2c9      	uxtb	r1, r1
 800281e:	408b      	lsls	r3, r1
 8002820:	494f      	ldr	r1, [pc, #316]	; (8002960 <HAL_RCC_OscConfig+0x63c>)
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]
 8002826:	e06a      	b.n	80028fe <HAL_RCC_OscConfig+0x5da>
 8002828:	2301      	movs	r3, #1
 800282a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800283a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002848:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	461a      	mov	r2, r3
 8002850:	2300      	movs	r3, #0
 8002852:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe fe96 	bl	8001584 <HAL_GetTick>
 8002858:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285c:	e00a      	b.n	8002874 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800285e:	f7fe fe91 	bl	8001584 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d902      	bls.n	8002874 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	f000 bc66 	b.w	8003140 <HAL_RCC_OscConfig+0xe1c>
 8002874:	2302      	movs	r3, #2
 8002876:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002886:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	095b      	lsrs	r3, r3, #5
 8002892:	b2db      	uxtb	r3, r3
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b01      	cmp	r3, #1
 800289c:	d102      	bne.n	80028a4 <HAL_RCC_OscConfig+0x580>
 800289e:	4b30      	ldr	r3, [pc, #192]	; (8002960 <HAL_RCC_OscConfig+0x63c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	e013      	b.n	80028cc <HAL_RCC_OscConfig+0x5a8>
 80028a4:	2302      	movs	r3, #2
 80028a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80028ae:	fa93 f3a3 	rbit	r3, r3
 80028b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80028b6:	2302      	movs	r3, #2
 80028b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80028bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80028c8:	4b25      	ldr	r3, [pc, #148]	; (8002960 <HAL_RCC_OscConfig+0x63c>)
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	2202      	movs	r2, #2
 80028ce:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80028d2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80028d6:	fa92 f2a2 	rbit	r2, r2
 80028da:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80028de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80028e2:	fab2 f282 	clz	r2, r2
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	f042 0220 	orr.w	r2, r2, #32
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	f002 021f 	and.w	r2, r2, #31
 80028f2:	2101      	movs	r1, #1
 80028f4:	fa01 f202 	lsl.w	r2, r1, r2
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1af      	bne.n	800285e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80da 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d069      	beq.n	80029ec <HAL_RCC_OscConfig+0x6c8>
 8002918:	2301      	movs	r3, #1
 800291a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002922:	fa93 f3a3 	rbit	r3, r3
 8002926:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800292a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_RCC_OscConfig+0x640>)
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	461a      	mov	r2, r3
 800293e:	2301      	movs	r3, #1
 8002940:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002942:	f7fe fe1f 	bl	8001584 <HAL_GetTick>
 8002946:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800294a:	e00d      	b.n	8002968 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800294c:	f7fe fe1a 	bl	8001584 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d905      	bls.n	8002968 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e3ef      	b.n	8003140 <HAL_RCC_OscConfig+0xe1c>
 8002960:	40021000 	.word	0x40021000
 8002964:	10908120 	.word	0x10908120
 8002968:	2302      	movs	r3, #2
 800296a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002972:	fa93 f2a3 	rbit	r2, r3
 8002976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002980:	2202      	movs	r2, #2
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	fa93 f2a3 	rbit	r2, r3
 800298e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002998:	2202      	movs	r2, #2
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	fa93 f2a3 	rbit	r2, r3
 80029a6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80029aa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ac:	4ba4      	ldr	r3, [pc, #656]	; (8002c40 <HAL_RCC_OscConfig+0x91c>)
 80029ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029b0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80029b4:	2102      	movs	r1, #2
 80029b6:	6019      	str	r1, [r3, #0]
 80029b8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	fa93 f1a3 	rbit	r1, r3
 80029c2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80029c6:	6019      	str	r1, [r3, #0]
  return result;
 80029c8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	2101      	movs	r1, #1
 80029e0:	fa01 f303 	lsl.w	r3, r1, r3
 80029e4:	4013      	ands	r3, r2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0b0      	beq.n	800294c <HAL_RCC_OscConfig+0x628>
 80029ea:	e06a      	b.n	8002ac2 <HAL_RCC_OscConfig+0x79e>
 80029ec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80029f0:	2201      	movs	r2, #1
 80029f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	fa93 f2a3 	rbit	r2, r3
 80029fe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a02:	601a      	str	r2, [r3, #0]
  return result;
 8002a04:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a08:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b8c      	ldr	r3, [pc, #560]	; (8002c44 <HAL_RCC_OscConfig+0x920>)
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1e:	f7fe fdb1 	bl	8001584 <HAL_GetTick>
 8002a22:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a26:	e009      	b.n	8002a3c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a28:	f7fe fdac 	bl	8001584 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e381      	b.n	8003140 <HAL_RCC_OscConfig+0xe1c>
 8002a3c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a40:	2202      	movs	r2, #2
 8002a42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	fa93 f2a3 	rbit	r2, r3
 8002a4e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a58:	2202      	movs	r2, #2
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	fa93 f2a3 	rbit	r2, r3
 8002a66:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a70:	2202      	movs	r2, #2
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	fa93 f2a3 	rbit	r2, r3
 8002a7e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002a82:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a84:	4b6e      	ldr	r3, [pc, #440]	; (8002c40 <HAL_RCC_OscConfig+0x91c>)
 8002a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a8c:	2102      	movs	r1, #2
 8002a8e:	6019      	str	r1, [r3, #0]
 8002a90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	fa93 f1a3 	rbit	r1, r3
 8002a9a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a9e:	6019      	str	r1, [r3, #0]
  return result;
 8002aa0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1b2      	bne.n	8002a28 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac2:	1d3b      	adds	r3, r7, #4
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 8157 	beq.w	8002d80 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad8:	4b59      	ldr	r3, [pc, #356]	; (8002c40 <HAL_RCC_OscConfig+0x91c>)
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d112      	bne.n	8002b0a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae4:	4b56      	ldr	r3, [pc, #344]	; (8002c40 <HAL_RCC_OscConfig+0x91c>)
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	4a55      	ldr	r2, [pc, #340]	; (8002c40 <HAL_RCC_OscConfig+0x91c>)
 8002aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aee:	61d3      	str	r3, [r2, #28]
 8002af0:	4b53      	ldr	r3, [pc, #332]	; (8002c40 <HAL_RCC_OscConfig+0x91c>)
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002af8:	f107 030c 	add.w	r3, r7, #12
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	f107 030c 	add.w	r3, r7, #12
 8002b02:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b04:	2301      	movs	r3, #1
 8002b06:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0a:	4b4f      	ldr	r3, [pc, #316]	; (8002c48 <HAL_RCC_OscConfig+0x924>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d11a      	bne.n	8002b4c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b16:	4b4c      	ldr	r3, [pc, #304]	; (8002c48 <HAL_RCC_OscConfig+0x924>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a4b      	ldr	r2, [pc, #300]	; (8002c48 <HAL_RCC_OscConfig+0x924>)
 8002b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b22:	f7fe fd2f 	bl	8001584 <HAL_GetTick>
 8002b26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2a:	e009      	b.n	8002b40 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2c:	f7fe fd2a 	bl	8001584 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b64      	cmp	r3, #100	; 0x64
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e2ff      	b.n	8003140 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b40:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <HAL_RCC_OscConfig+0x924>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0ef      	beq.n	8002b2c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b4c:	1d3b      	adds	r3, r7, #4
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d106      	bne.n	8002b64 <HAL_RCC_OscConfig+0x840>
 8002b56:	4b3a      	ldr	r3, [pc, #232]	; (8002c40 <HAL_RCC_OscConfig+0x91c>)
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	4a39      	ldr	r2, [pc, #228]	; (8002c40 <HAL_RCC_OscConfig+0x91c>)
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	6213      	str	r3, [r2, #32]
 8002b62:	e02f      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a0>
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RCC_OscConfig+0x864>
 8002b6e:	4b34      	ldr	r3, [pc, #208]	; (8002c40 <HAL_RCC_OscConfig+0x91c>)
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	4a33      	ldr	r2, [pc, #204]	; (8002c40 <HAL_RCC_OscConfig+0x91c>)
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	6213      	str	r3, [r2, #32]
 8002b7a:	4b31      	ldr	r3, [pc, #196]	; (8002c40 <HAL_RCC_OscConfig+0x91c>)
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	4a30      	ldr	r2, [pc, #192]	; (8002c40 <HAL_RCC_OscConfig+0x91c>)
 8002b80:	f023 0304 	bic.w	r3, r3, #4
 8002b84:	6213      	str	r3, [r2, #32]
 8002b86:	e01d      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a0>
 8002b88:	1d3b      	adds	r3, r7, #4
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b05      	cmp	r3, #5
 8002b90:	d10c      	bne.n	8002bac <HAL_RCC_OscConfig+0x888>
 8002b92:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <HAL_RCC_OscConfig+0x91c>)
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	4a2a      	ldr	r2, [pc, #168]	; (8002c40 <HAL_RCC_OscConfig+0x91c>)
 8002b98:	f043 0304 	orr.w	r3, r3, #4
 8002b9c:	6213      	str	r3, [r2, #32]
 8002b9e:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <HAL_RCC_OscConfig+0x91c>)
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	4a27      	ldr	r2, [pc, #156]	; (8002c40 <HAL_RCC_OscConfig+0x91c>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	6213      	str	r3, [r2, #32]
 8002baa:	e00b      	b.n	8002bc4 <HAL_RCC_OscConfig+0x8a0>
 8002bac:	4b24      	ldr	r3, [pc, #144]	; (8002c40 <HAL_RCC_OscConfig+0x91c>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	4a23      	ldr	r2, [pc, #140]	; (8002c40 <HAL_RCC_OscConfig+0x91c>)
 8002bb2:	f023 0301 	bic.w	r3, r3, #1
 8002bb6:	6213      	str	r3, [r2, #32]
 8002bb8:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <HAL_RCC_OscConfig+0x91c>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	4a20      	ldr	r2, [pc, #128]	; (8002c40 <HAL_RCC_OscConfig+0x91c>)
 8002bbe:	f023 0304 	bic.w	r3, r3, #4
 8002bc2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bc4:	1d3b      	adds	r3, r7, #4
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d06a      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bce:	f7fe fcd9 	bl	8001584 <HAL_GetTick>
 8002bd2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd6:	e00b      	b.n	8002bf0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd8:	f7fe fcd4 	bl	8001584 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e2a7      	b.n	8003140 <HAL_RCC_OscConfig+0xe1c>
 8002bf0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	fa93 f2a3 	rbit	r2, r3
 8002c02:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	fa93 f2a3 	rbit	r2, r3
 8002c1a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c1e:	601a      	str	r2, [r3, #0]
  return result;
 8002c20:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c24:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	095b      	lsrs	r3, r3, #5
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	f043 0302 	orr.w	r3, r3, #2
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d108      	bne.n	8002c4c <HAL_RCC_OscConfig+0x928>
 8002c3a:	4b01      	ldr	r3, [pc, #4]	; (8002c40 <HAL_RCC_OscConfig+0x91c>)
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	e013      	b.n	8002c68 <HAL_RCC_OscConfig+0x944>
 8002c40:	40021000 	.word	0x40021000
 8002c44:	10908120 	.word	0x10908120
 8002c48:	40007000 	.word	0x40007000
 8002c4c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c50:	2202      	movs	r2, #2
 8002c52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	fa93 f2a3 	rbit	r2, r3
 8002c5e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	4bc0      	ldr	r3, [pc, #768]	; (8002f68 <HAL_RCC_OscConfig+0xc44>)
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	6011      	str	r1, [r2, #0]
 8002c70:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	fa92 f1a2 	rbit	r1, r2
 8002c7a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c7e:	6011      	str	r1, [r2, #0]
  return result;
 8002c80:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	fab2 f282 	clz	r2, r2
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	f002 021f 	and.w	r2, r2, #31
 8002c96:	2101      	movs	r1, #1
 8002c98:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d09a      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x8b4>
 8002ca2:	e063      	b.n	8002d6c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca4:	f7fe fc6e 	bl	8001584 <HAL_GetTick>
 8002ca8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cac:	e00b      	b.n	8002cc6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cae:	f7fe fc69 	bl	8001584 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e23c      	b.n	8003140 <HAL_RCC_OscConfig+0xe1c>
 8002cc6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cca:	2202      	movs	r2, #2
 8002ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	fa93 f2a3 	rbit	r2, r3
 8002cd8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	fa93 f2a3 	rbit	r2, r3
 8002cf0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002cf4:	601a      	str	r2, [r3, #0]
  return result;
 8002cf6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002cfa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cfc:	fab3 f383 	clz	r3, r3
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	f043 0302 	orr.w	r3, r3, #2
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d102      	bne.n	8002d16 <HAL_RCC_OscConfig+0x9f2>
 8002d10:	4b95      	ldr	r3, [pc, #596]	; (8002f68 <HAL_RCC_OscConfig+0xc44>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	e00d      	b.n	8002d32 <HAL_RCC_OscConfig+0xa0e>
 8002d16:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	fa93 f2a3 	rbit	r2, r3
 8002d28:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	4b8e      	ldr	r3, [pc, #568]	; (8002f68 <HAL_RCC_OscConfig+0xc44>)
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002d36:	2102      	movs	r1, #2
 8002d38:	6011      	str	r1, [r2, #0]
 8002d3a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	fa92 f1a2 	rbit	r1, r2
 8002d44:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d48:	6011      	str	r1, [r2, #0]
  return result;
 8002d4a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d4e:	6812      	ldr	r2, [r2, #0]
 8002d50:	fab2 f282 	clz	r2, r2
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	f002 021f 	and.w	r2, r2, #31
 8002d60:	2101      	movs	r1, #1
 8002d62:	fa01 f202 	lsl.w	r2, r1, r2
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1a0      	bne.n	8002cae <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d6c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d105      	bne.n	8002d80 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d74:	4b7c      	ldr	r3, [pc, #496]	; (8002f68 <HAL_RCC_OscConfig+0xc44>)
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	4a7b      	ldr	r2, [pc, #492]	; (8002f68 <HAL_RCC_OscConfig+0xc44>)
 8002d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d80:	1d3b      	adds	r3, r7, #4
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 81d9 	beq.w	800313e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d8c:	4b76      	ldr	r3, [pc, #472]	; (8002f68 <HAL_RCC_OscConfig+0xc44>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	f000 81a6 	beq.w	80030e6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d9a:	1d3b      	adds	r3, r7, #4
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	f040 811e 	bne.w	8002fe2 <HAL_RCC_OscConfig+0xcbe>
 8002da6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002daa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	fa93 f2a3 	rbit	r2, r3
 8002dba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002dbe:	601a      	str	r2, [r3, #0]
  return result;
 8002dc0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002dc4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	2300      	movs	r3, #0
 8002dda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fbd2 	bl	8001584 <HAL_GetTick>
 8002de0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de4:	e009      	b.n	8002dfa <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de6:	f7fe fbcd 	bl	8001584 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e1a2      	b.n	8003140 <HAL_RCC_OscConfig+0xe1c>
 8002dfa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002dfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	fa93 f2a3 	rbit	r2, r3
 8002e0e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e12:	601a      	str	r2, [r3, #0]
  return result;
 8002e14:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e18:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e1a:	fab3 f383 	clz	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	095b      	lsrs	r3, r3, #5
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d102      	bne.n	8002e34 <HAL_RCC_OscConfig+0xb10>
 8002e2e:	4b4e      	ldr	r3, [pc, #312]	; (8002f68 <HAL_RCC_OscConfig+0xc44>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	e01b      	b.n	8002e6c <HAL_RCC_OscConfig+0xb48>
 8002e34:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	fa93 f2a3 	rbit	r2, r3
 8002e48:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	fa93 f2a3 	rbit	r2, r3
 8002e62:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	4b3f      	ldr	r3, [pc, #252]	; (8002f68 <HAL_RCC_OscConfig+0xc44>)
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002e70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e74:	6011      	str	r1, [r2, #0]
 8002e76:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	fa92 f1a2 	rbit	r1, r2
 8002e80:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e84:	6011      	str	r1, [r2, #0]
  return result;
 8002e86:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	fab2 f282 	clz	r2, r2
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	f042 0220 	orr.w	r2, r2, #32
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	f002 021f 	and.w	r2, r2, #31
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d19e      	bne.n	8002de6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea8:	4b2f      	ldr	r3, [pc, #188]	; (8002f68 <HAL_RCC_OscConfig+0xc44>)
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	f023 020f 	bic.w	r2, r3, #15
 8002eb0:	1d3b      	adds	r3, r7, #4
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	492c      	ldr	r1, [pc, #176]	; (8002f68 <HAL_RCC_OscConfig+0xc44>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002ebc:	4b2a      	ldr	r3, [pc, #168]	; (8002f68 <HAL_RCC_OscConfig+0xc44>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6a19      	ldr	r1, [r3, #32]
 8002eca:	1d3b      	adds	r3, r7, #4
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	4925      	ldr	r1, [pc, #148]	; (8002f68 <HAL_RCC_OscConfig+0xc44>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
 8002ed8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002edc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ee0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	fa93 f2a3 	rbit	r2, r3
 8002eec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ef0:	601a      	str	r2, [r3, #0]
  return result;
 8002ef2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ef6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef8:	fab3 f383 	clz	r3, r3
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0e:	f7fe fb39 	bl	8001584 <HAL_GetTick>
 8002f12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f16:	e009      	b.n	8002f2c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f18:	f7fe fb34 	bl	8001584 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e109      	b.n	8003140 <HAL_RCC_OscConfig+0xe1c>
 8002f2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	fa93 f2a3 	rbit	r2, r3
 8002f40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f44:	601a      	str	r2, [r3, #0]
  return result;
 8002f46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f4c:	fab3 f383 	clz	r3, r3
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d105      	bne.n	8002f6c <HAL_RCC_OscConfig+0xc48>
 8002f60:	4b01      	ldr	r3, [pc, #4]	; (8002f68 <HAL_RCC_OscConfig+0xc44>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	e01e      	b.n	8002fa4 <HAL_RCC_OscConfig+0xc80>
 8002f66:	bf00      	nop
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	fa93 f2a3 	rbit	r2, r3
 8002f80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	fa93 f2a3 	rbit	r2, r3
 8002f9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	4b6a      	ldr	r3, [pc, #424]	; (800314c <HAL_RCC_OscConfig+0xe28>)
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002fa8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fac:	6011      	str	r1, [r2, #0]
 8002fae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	fa92 f1a2 	rbit	r1, r2
 8002fb8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002fbc:	6011      	str	r1, [r2, #0]
  return result;
 8002fbe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	fab2 f282 	clz	r2, r2
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	f042 0220 	orr.w	r2, r2, #32
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	f002 021f 	and.w	r2, r2, #31
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d09b      	beq.n	8002f18 <HAL_RCC_OscConfig+0xbf4>
 8002fe0:	e0ad      	b.n	800313e <HAL_RCC_OscConfig+0xe1a>
 8002fe2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fe6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	fa93 f2a3 	rbit	r2, r3
 8002ff6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ffa:	601a      	str	r2, [r3, #0]
  return result;
 8002ffc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003000:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003002:	fab3 f383 	clz	r3, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800300c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	461a      	mov	r2, r3
 8003014:	2300      	movs	r3, #0
 8003016:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7fe fab4 	bl	8001584 <HAL_GetTick>
 800301c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003020:	e009      	b.n	8003036 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003022:	f7fe faaf 	bl	8001584 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e084      	b.n	8003140 <HAL_RCC_OscConfig+0xe1c>
 8003036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800303a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800303e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	fa93 f2a3 	rbit	r2, r3
 800304a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800304e:	601a      	str	r2, [r3, #0]
  return result;
 8003050:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003054:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003056:	fab3 f383 	clz	r3, r3
 800305a:	b2db      	uxtb	r3, r3
 800305c:	095b      	lsrs	r3, r3, #5
 800305e:	b2db      	uxtb	r3, r3
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b01      	cmp	r3, #1
 8003068:	d102      	bne.n	8003070 <HAL_RCC_OscConfig+0xd4c>
 800306a:	4b38      	ldr	r3, [pc, #224]	; (800314c <HAL_RCC_OscConfig+0xe28>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	e01b      	b.n	80030a8 <HAL_RCC_OscConfig+0xd84>
 8003070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003074:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003078:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	fa93 f2a3 	rbit	r2, r3
 8003084:	f107 0320 	add.w	r3, r7, #32
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	f107 031c 	add.w	r3, r7, #28
 800308e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	f107 031c 	add.w	r3, r7, #28
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	fa93 f2a3 	rbit	r2, r3
 800309e:	f107 0318 	add.w	r3, r7, #24
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	4b29      	ldr	r3, [pc, #164]	; (800314c <HAL_RCC_OscConfig+0xe28>)
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	f107 0214 	add.w	r2, r7, #20
 80030ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030b0:	6011      	str	r1, [r2, #0]
 80030b2:	f107 0214 	add.w	r2, r7, #20
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	fa92 f1a2 	rbit	r1, r2
 80030bc:	f107 0210 	add.w	r2, r7, #16
 80030c0:	6011      	str	r1, [r2, #0]
  return result;
 80030c2:	f107 0210 	add.w	r2, r7, #16
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	fab2 f282 	clz	r2, r2
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	f042 0220 	orr.w	r2, r2, #32
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	f002 021f 	and.w	r2, r2, #31
 80030d8:	2101      	movs	r1, #1
 80030da:	fa01 f202 	lsl.w	r2, r1, r2
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d19e      	bne.n	8003022 <HAL_RCC_OscConfig+0xcfe>
 80030e4:	e02b      	b.n	800313e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030e6:	1d3b      	adds	r3, r7, #4
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e025      	b.n	8003140 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030f4:	4b15      	ldr	r3, [pc, #84]	; (800314c <HAL_RCC_OscConfig+0xe28>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80030fc:	4b13      	ldr	r3, [pc, #76]	; (800314c <HAL_RCC_OscConfig+0xe28>)
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003104:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003108:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800310c:	1d3b      	adds	r3, r7, #4
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	429a      	cmp	r2, r3
 8003114:	d111      	bne.n	800313a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003116:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800311a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800311e:	1d3b      	adds	r3, r7, #4
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003124:	429a      	cmp	r2, r3
 8003126:	d108      	bne.n	800313a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003128:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800312c:	f003 020f 	and.w	r2, r3, #15
 8003130:	1d3b      	adds	r3, r7, #4
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003136:	429a      	cmp	r2, r3
 8003138:	d001      	beq.n	800313e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000

08003150 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b09e      	sub	sp, #120	; 0x78
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e162      	b.n	800342e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003168:	4b90      	ldr	r3, [pc, #576]	; (80033ac <HAL_RCC_ClockConfig+0x25c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d910      	bls.n	8003198 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003176:	4b8d      	ldr	r3, [pc, #564]	; (80033ac <HAL_RCC_ClockConfig+0x25c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 0207 	bic.w	r2, r3, #7
 800317e:	498b      	ldr	r1, [pc, #556]	; (80033ac <HAL_RCC_ClockConfig+0x25c>)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003186:	4b89      	ldr	r3, [pc, #548]	; (80033ac <HAL_RCC_ClockConfig+0x25c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d001      	beq.n	8003198 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e14a      	b.n	800342e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d008      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a4:	4b82      	ldr	r3, [pc, #520]	; (80033b0 <HAL_RCC_ClockConfig+0x260>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	497f      	ldr	r1, [pc, #508]	; (80033b0 <HAL_RCC_ClockConfig+0x260>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 80dc 	beq.w	800337c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d13c      	bne.n	8003246 <HAL_RCC_ClockConfig+0xf6>
 80031cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031d4:	fa93 f3a3 	rbit	r3, r3
 80031d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80031da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031dc:	fab3 f383 	clz	r3, r3
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d102      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xa6>
 80031f0:	4b6f      	ldr	r3, [pc, #444]	; (80033b0 <HAL_RCC_ClockConfig+0x260>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	e00f      	b.n	8003216 <HAL_RCC_ClockConfig+0xc6>
 80031f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	667b      	str	r3, [r7, #100]	; 0x64
 8003204:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003208:	663b      	str	r3, [r7, #96]	; 0x60
 800320a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800320c:	fa93 f3a3 	rbit	r3, r3
 8003210:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003212:	4b67      	ldr	r3, [pc, #412]	; (80033b0 <HAL_RCC_ClockConfig+0x260>)
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800321a:	65ba      	str	r2, [r7, #88]	; 0x58
 800321c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800321e:	fa92 f2a2 	rbit	r2, r2
 8003222:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003224:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003226:	fab2 f282 	clz	r2, r2
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	f042 0220 	orr.w	r2, r2, #32
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	f002 021f 	and.w	r2, r2, #31
 8003236:	2101      	movs	r1, #1
 8003238:	fa01 f202 	lsl.w	r2, r1, r2
 800323c:	4013      	ands	r3, r2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d17b      	bne.n	800333a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e0f3      	b.n	800342e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d13c      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x178>
 800324e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003252:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003256:	fa93 f3a3 	rbit	r3, r3
 800325a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800325c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325e:	fab3 f383 	clz	r3, r3
 8003262:	b2db      	uxtb	r3, r3
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	b2db      	uxtb	r3, r3
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b01      	cmp	r3, #1
 8003270:	d102      	bne.n	8003278 <HAL_RCC_ClockConfig+0x128>
 8003272:	4b4f      	ldr	r3, [pc, #316]	; (80033b0 <HAL_RCC_ClockConfig+0x260>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	e00f      	b.n	8003298 <HAL_RCC_ClockConfig+0x148>
 8003278:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800327c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	647b      	str	r3, [r7, #68]	; 0x44
 8003286:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800328a:	643b      	str	r3, [r7, #64]	; 0x40
 800328c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003294:	4b46      	ldr	r3, [pc, #280]	; (80033b0 <HAL_RCC_ClockConfig+0x260>)
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800329c:	63ba      	str	r2, [r7, #56]	; 0x38
 800329e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032a0:	fa92 f2a2 	rbit	r2, r2
 80032a4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80032a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032a8:	fab2 f282 	clz	r2, r2
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	f042 0220 	orr.w	r2, r2, #32
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	f002 021f 	and.w	r2, r2, #31
 80032b8:	2101      	movs	r1, #1
 80032ba:	fa01 f202 	lsl.w	r2, r1, r2
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d13a      	bne.n	800333a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0b2      	b.n	800342e <HAL_RCC_ClockConfig+0x2de>
 80032c8:	2302      	movs	r3, #2
 80032ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ce:	fa93 f3a3 	rbit	r3, r3
 80032d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d102      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x1a0>
 80032ea:	4b31      	ldr	r3, [pc, #196]	; (80033b0 <HAL_RCC_ClockConfig+0x260>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	e00d      	b.n	800330c <HAL_RCC_ClockConfig+0x1bc>
 80032f0:	2302      	movs	r3, #2
 80032f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f6:	fa93 f3a3 	rbit	r3, r3
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
 80032fc:	2302      	movs	r3, #2
 80032fe:	623b      	str	r3, [r7, #32]
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	fa93 f3a3 	rbit	r3, r3
 8003306:	61fb      	str	r3, [r7, #28]
 8003308:	4b29      	ldr	r3, [pc, #164]	; (80033b0 <HAL_RCC_ClockConfig+0x260>)
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	2202      	movs	r2, #2
 800330e:	61ba      	str	r2, [r7, #24]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	fa92 f2a2 	rbit	r2, r2
 8003316:	617a      	str	r2, [r7, #20]
  return result;
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	fab2 f282 	clz	r2, r2
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	f042 0220 	orr.w	r2, r2, #32
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	f002 021f 	and.w	r2, r2, #31
 800332a:	2101      	movs	r1, #1
 800332c:	fa01 f202 	lsl.w	r2, r1, r2
 8003330:	4013      	ands	r3, r2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e079      	b.n	800342e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800333a:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <HAL_RCC_ClockConfig+0x260>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f023 0203 	bic.w	r2, r3, #3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	491a      	ldr	r1, [pc, #104]	; (80033b0 <HAL_RCC_ClockConfig+0x260>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800334c:	f7fe f91a 	bl	8001584 <HAL_GetTick>
 8003350:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	e00a      	b.n	800336a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003354:	f7fe f916 	bl	8001584 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e061      	b.n	800342e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336a:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <HAL_RCC_ClockConfig+0x260>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 020c 	and.w	r2, r3, #12
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	429a      	cmp	r2, r3
 800337a:	d1eb      	bne.n	8003354 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <HAL_RCC_ClockConfig+0x25c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d214      	bcs.n	80033b4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338a:	4b08      	ldr	r3, [pc, #32]	; (80033ac <HAL_RCC_ClockConfig+0x25c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f023 0207 	bic.w	r2, r3, #7
 8003392:	4906      	ldr	r1, [pc, #24]	; (80033ac <HAL_RCC_ClockConfig+0x25c>)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	4313      	orrs	r3, r2
 8003398:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339a:	4b04      	ldr	r3, [pc, #16]	; (80033ac <HAL_RCC_ClockConfig+0x25c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d005      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e040      	b.n	800342e <HAL_RCC_ClockConfig+0x2de>
 80033ac:	40022000 	.word	0x40022000
 80033b0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d008      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c0:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <HAL_RCC_ClockConfig+0x2e8>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	491a      	ldr	r1, [pc, #104]	; (8003438 <HAL_RCC_ClockConfig+0x2e8>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033de:	4b16      	ldr	r3, [pc, #88]	; (8003438 <HAL_RCC_ClockConfig+0x2e8>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4912      	ldr	r1, [pc, #72]	; (8003438 <HAL_RCC_ClockConfig+0x2e8>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033f2:	f000 f829 	bl	8003448 <HAL_RCC_GetSysClockFreq>
 80033f6:	4601      	mov	r1, r0
 80033f8:	4b0f      	ldr	r3, [pc, #60]	; (8003438 <HAL_RCC_ClockConfig+0x2e8>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003400:	22f0      	movs	r2, #240	; 0xf0
 8003402:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	fa92 f2a2 	rbit	r2, r2
 800340a:	60fa      	str	r2, [r7, #12]
  return result;
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	fab2 f282 	clz	r2, r2
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	40d3      	lsrs	r3, r2
 8003416:	4a09      	ldr	r2, [pc, #36]	; (800343c <HAL_RCC_ClockConfig+0x2ec>)
 8003418:	5cd3      	ldrb	r3, [r2, r3]
 800341a:	fa21 f303 	lsr.w	r3, r1, r3
 800341e:	4a08      	ldr	r2, [pc, #32]	; (8003440 <HAL_RCC_ClockConfig+0x2f0>)
 8003420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003422:	4b08      	ldr	r3, [pc, #32]	; (8003444 <HAL_RCC_ClockConfig+0x2f4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe f868 	bl	80014fc <HAL_InitTick>
  
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3778      	adds	r7, #120	; 0x78
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000
 800343c:	08006410 	.word	0x08006410
 8003440:	20000000 	.word	0x20000000
 8003444:	20000004 	.word	0x20000004

08003448 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003448:	b480      	push	{r7}
 800344a:	b08b      	sub	sp, #44	; 0x2c
 800344c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	61fb      	str	r3, [r7, #28]
 8003452:	2300      	movs	r3, #0
 8003454:	61bb      	str	r3, [r7, #24]
 8003456:	2300      	movs	r3, #0
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003462:	4b2a      	ldr	r3, [pc, #168]	; (800350c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b04      	cmp	r3, #4
 8003470:	d002      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0x30>
 8003472:	2b08      	cmp	r3, #8
 8003474:	d003      	beq.n	800347e <HAL_RCC_GetSysClockFreq+0x36>
 8003476:	e03f      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003478:	4b25      	ldr	r3, [pc, #148]	; (8003510 <HAL_RCC_GetSysClockFreq+0xc8>)
 800347a:	623b      	str	r3, [r7, #32]
      break;
 800347c:	e03f      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003484:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003488:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	fa92 f2a2 	rbit	r2, r2
 8003490:	607a      	str	r2, [r7, #4]
  return result;
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	fab2 f282 	clz	r2, r2
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	40d3      	lsrs	r3, r2
 800349c:	4a1d      	ldr	r2, [pc, #116]	; (8003514 <HAL_RCC_GetSysClockFreq+0xcc>)
 800349e:	5cd3      	ldrb	r3, [r2, r3]
 80034a0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80034a2:	4b1a      	ldr	r3, [pc, #104]	; (800350c <HAL_RCC_GetSysClockFreq+0xc4>)
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	220f      	movs	r2, #15
 80034ac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	fa92 f2a2 	rbit	r2, r2
 80034b4:	60fa      	str	r2, [r7, #12]
  return result;
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	fab2 f282 	clz	r2, r2
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	40d3      	lsrs	r3, r2
 80034c0:	4a15      	ldr	r2, [pc, #84]	; (8003518 <HAL_RCC_GetSysClockFreq+0xd0>)
 80034c2:	5cd3      	ldrb	r3, [r2, r3]
 80034c4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034d0:	4a0f      	ldr	r2, [pc, #60]	; (8003510 <HAL_RCC_GetSysClockFreq+0xc8>)
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	fb02 f303 	mul.w	r3, r2, r3
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
 80034e0:	e007      	b.n	80034f2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034e2:	4a0e      	ldr	r2, [pc, #56]	; (800351c <HAL_RCC_GetSysClockFreq+0xd4>)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	fb02 f303 	mul.w	r3, r2, r3
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	623b      	str	r3, [r7, #32]
      break;
 80034f6:	e002      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034f8:	4b08      	ldr	r3, [pc, #32]	; (800351c <HAL_RCC_GetSysClockFreq+0xd4>)
 80034fa:	623b      	str	r3, [r7, #32]
      break;
 80034fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034fe:	6a3b      	ldr	r3, [r7, #32]
}
 8003500:	4618      	mov	r0, r3
 8003502:	372c      	adds	r7, #44	; 0x2c
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	40021000 	.word	0x40021000
 8003510:	00f42400 	.word	0x00f42400
 8003514:	08006428 	.word	0x08006428
 8003518:	08006438 	.word	0x08006438
 800351c:	007a1200 	.word	0x007a1200

08003520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003524:	4b03      	ldr	r3, [pc, #12]	; (8003534 <HAL_RCC_GetHCLKFreq+0x14>)
 8003526:	681b      	ldr	r3, [r3, #0]
}
 8003528:	4618      	mov	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000000 	.word	0x20000000

08003538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800353e:	f7ff ffef 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 8003542:	4601      	mov	r1, r0
 8003544:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800354c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003550:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	fa92 f2a2 	rbit	r2, r2
 8003558:	603a      	str	r2, [r7, #0]
  return result;
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	fab2 f282 	clz	r2, r2
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	40d3      	lsrs	r3, r2
 8003564:	4a04      	ldr	r2, [pc, #16]	; (8003578 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003566:	5cd3      	ldrb	r3, [r2, r3]
 8003568:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40021000 	.word	0x40021000
 8003578:	08006420 	.word	0x08006420

0800357c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003582:	f7ff ffcd 	bl	8003520 <HAL_RCC_GetHCLKFreq>
 8003586:	4601      	mov	r1, r0
 8003588:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003590:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003594:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	fa92 f2a2 	rbit	r2, r2
 800359c:	603a      	str	r2, [r7, #0]
  return result;
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	fab2 f282 	clz	r2, r2
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	40d3      	lsrs	r3, r2
 80035a8:	4a04      	ldr	r2, [pc, #16]	; (80035bc <HAL_RCC_GetPCLK2Freq+0x40>)
 80035aa:	5cd3      	ldrb	r3, [r2, r3]
 80035ac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40021000 	.word	0x40021000
 80035bc:	08006420 	.word	0x08006420

080035c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b092      	sub	sp, #72	; 0x48
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80035d0:	2300      	movs	r3, #0
 80035d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 80d4 	beq.w	800378c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e4:	4b4e      	ldr	r3, [pc, #312]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10e      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f0:	4b4b      	ldr	r3, [pc, #300]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	4a4a      	ldr	r2, [pc, #296]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fa:	61d3      	str	r3, [r2, #28]
 80035fc:	4b48      	ldr	r3, [pc, #288]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003608:	2301      	movs	r3, #1
 800360a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360e:	4b45      	ldr	r3, [pc, #276]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003616:	2b00      	cmp	r3, #0
 8003618:	d118      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361a:	4b42      	ldr	r3, [pc, #264]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a41      	ldr	r2, [pc, #260]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003624:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003626:	f7fd ffad 	bl	8001584 <HAL_GetTick>
 800362a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362c:	e008      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362e:	f7fd ffa9 	bl	8001584 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b64      	cmp	r3, #100	; 0x64
 800363a:	d901      	bls.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e1d6      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	4b38      	ldr	r3, [pc, #224]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800364c:	4b34      	ldr	r3, [pc, #208]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003654:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 8084 	beq.w	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003666:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003668:	429a      	cmp	r2, r3
 800366a:	d07c      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800366c:	4b2c      	ldr	r3, [pc, #176]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800367a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	fa93 f3a3 	rbit	r3, r3
 8003682:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003686:	fab3 f383 	clz	r3, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	4b26      	ldr	r3, [pc, #152]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	461a      	mov	r2, r3
 8003696:	2301      	movs	r3, #1
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800369e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a2:	fa93 f3a3 	rbit	r3, r3
 80036a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036aa:	fab3 f383 	clz	r3, r3
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	4b1d      	ldr	r3, [pc, #116]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	461a      	mov	r2, r3
 80036ba:	2300      	movs	r3, #0
 80036bc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036be:	4a18      	ldr	r2, [pc, #96]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d04b      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ce:	f7fd ff59 	bl	8001584 <HAL_GetTick>
 80036d2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d4:	e00a      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d6:	f7fd ff55 	bl	8001584 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d901      	bls.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e180      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80036ec:	2302      	movs	r3, #2
 80036ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24
 80036f8:	2302      	movs	r3, #2
 80036fa:	623b      	str	r3, [r7, #32]
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	fa93 f3a3 	rbit	r3, r3
 8003702:	61fb      	str	r3, [r7, #28]
  return result;
 8003704:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003706:	fab3 f383 	clz	r3, r3
 800370a:	b2db      	uxtb	r3, r3
 800370c:	095b      	lsrs	r3, r3, #5
 800370e:	b2db      	uxtb	r3, r3
 8003710:	f043 0302 	orr.w	r3, r3, #2
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d108      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800371a:	4b01      	ldr	r3, [pc, #4]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	e00d      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003720:	40021000 	.word	0x40021000
 8003724:	40007000 	.word	0x40007000
 8003728:	10908100 	.word	0x10908100
 800372c:	2302      	movs	r3, #2
 800372e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	fa93 f3a3 	rbit	r3, r3
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	4ba0      	ldr	r3, [pc, #640]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	2202      	movs	r2, #2
 800373e:	613a      	str	r2, [r7, #16]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	fa92 f2a2 	rbit	r2, r2
 8003746:	60fa      	str	r2, [r7, #12]
  return result;
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	fab2 f282 	clz	r2, r2
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	f002 021f 	and.w	r2, r2, #31
 800375a:	2101      	movs	r1, #1
 800375c:	fa01 f202 	lsl.w	r2, r1, r2
 8003760:	4013      	ands	r3, r2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0b7      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003766:	4b95      	ldr	r3, [pc, #596]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	4992      	ldr	r1, [pc, #584]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003774:	4313      	orrs	r3, r2
 8003776:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003778:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800377c:	2b01      	cmp	r3, #1
 800377e:	d105      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003780:	4b8e      	ldr	r3, [pc, #568]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	4a8d      	ldr	r2, [pc, #564]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800378a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003798:	4b88      	ldr	r3, [pc, #544]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	f023 0203 	bic.w	r2, r3, #3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	4985      	ldr	r1, [pc, #532]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d008      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037b6:	4b81      	ldr	r3, [pc, #516]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	497e      	ldr	r1, [pc, #504]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037d4:	4b79      	ldr	r3, [pc, #484]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	4976      	ldr	r1, [pc, #472]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d008      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037f2:	4b72      	ldr	r3, [pc, #456]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	f023 0210 	bic.w	r2, r3, #16
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	496f      	ldr	r1, [pc, #444]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003800:	4313      	orrs	r3, r2
 8003802:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d008      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003810:	4b6a      	ldr	r3, [pc, #424]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381c:	4967      	ldr	r1, [pc, #412]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800381e:	4313      	orrs	r3, r2
 8003820:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	d008      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800382e:	4b63      	ldr	r3, [pc, #396]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	f023 0220 	bic.w	r2, r3, #32
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	4960      	ldr	r1, [pc, #384]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800383c:	4313      	orrs	r3, r2
 800383e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800384c:	4b5b      	ldr	r3, [pc, #364]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	4958      	ldr	r1, [pc, #352]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800385a:	4313      	orrs	r3, r2
 800385c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d008      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800386a:	4b54      	ldr	r3, [pc, #336]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	4951      	ldr	r1, [pc, #324]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003878:	4313      	orrs	r3, r2
 800387a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003888:	4b4c      	ldr	r3, [pc, #304]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	4949      	ldr	r1, [pc, #292]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003896:	4313      	orrs	r3, r2
 8003898:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d008      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038a6:	4b45      	ldr	r3, [pc, #276]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	4942      	ldr	r1, [pc, #264]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d008      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038c4:	4b3d      	ldr	r3, [pc, #244]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	493a      	ldr	r1, [pc, #232]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d008      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80038e2:	4b36      	ldr	r3, [pc, #216]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	4933      	ldr	r1, [pc, #204]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003900:	4b2e      	ldr	r3, [pc, #184]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003904:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390c:	492b      	ldr	r1, [pc, #172]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d008      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800391e:	4b27      	ldr	r3, [pc, #156]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	4924      	ldr	r1, [pc, #144]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800392c:	4313      	orrs	r3, r2
 800392e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800393c:	4b1f      	ldr	r3, [pc, #124]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800393e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003940:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	491c      	ldr	r1, [pc, #112]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800394a:	4313      	orrs	r3, r2
 800394c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d008      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800395a:	4b18      	ldr	r3, [pc, #96]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003966:	4915      	ldr	r1, [pc, #84]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003968:	4313      	orrs	r3, r2
 800396a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003978:	4b10      	ldr	r3, [pc, #64]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003984:	490d      	ldr	r1, [pc, #52]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003986:	4313      	orrs	r3, r2
 8003988:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d008      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003996:	4b09      	ldr	r3, [pc, #36]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a2:	4906      	ldr	r1, [pc, #24]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00c      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80039b4:	4b01      	ldr	r3, [pc, #4]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	e002      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000
 80039c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c8:	490b      	ldr	r1, [pc, #44]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d008      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80039da:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e6:	4904      	ldr	r1, [pc, #16]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3748      	adds	r7, #72	; 0x48
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000

080039fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e040      	b.n	8003a90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fd fcea 	bl	80013f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2224      	movs	r2, #36	; 0x24
 8003a28:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0201 	bic.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f8c0 	bl	8003bc0 <UART_SetConfig>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e022      	b.n	8003a90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fa88 	bl	8003f68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fb0f 	bl	80040ac <UART_CheckIdleState>
 8003a8e:	4603      	mov	r3, r0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08a      	sub	sp, #40	; 0x28
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	f040 8082 	bne.w	8003bb6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <HAL_UART_Transmit+0x26>
 8003ab8:	88fb      	ldrh	r3, [r7, #6]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e07a      	b.n	8003bb8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_UART_Transmit+0x38>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e073      	b.n	8003bb8 <HAL_UART_Transmit+0x120>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2221      	movs	r2, #33	; 0x21
 8003ae4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ae6:	f7fd fd4d 	bl	8001584 <HAL_GetTick>
 8003aea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	88fa      	ldrh	r2, [r7, #6]
 8003af0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	88fa      	ldrh	r2, [r7, #6]
 8003af8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b04:	d108      	bne.n	8003b18 <HAL_UART_Transmit+0x80>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d104      	bne.n	8003b18 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	e003      	b.n	8003b20 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003b28:	e02d      	b.n	8003b86 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2200      	movs	r2, #0
 8003b32:	2180      	movs	r1, #128	; 0x80
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 fb02 	bl	800413e <UART_WaitOnFlagUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e039      	b.n	8003bb8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10b      	bne.n	8003b62 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	881a      	ldrh	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b56:	b292      	uxth	r2, r2
 8003b58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	3302      	adds	r3, #2
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	e008      	b.n	8003b74 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	781a      	ldrb	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	b292      	uxth	r2, r2
 8003b6c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	3301      	adds	r3, #1
 8003b72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1cb      	bne.n	8003b2a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2140      	movs	r1, #64	; 0x40
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 face 	bl	800413e <UART_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e005      	b.n	8003bb8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e000      	b.n	8003bb8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
  }
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3720      	adds	r7, #32
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	4baa      	ldr	r3, [pc, #680]	; (8003e94 <UART_SetConfig+0x2d4>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6812      	ldr	r2, [r2, #0]
 8003bf2:	6979      	ldr	r1, [r7, #20]
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a98      	ldr	r2, [pc, #608]	; (8003e98 <UART_SetConfig+0x2d8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d121      	bne.n	8003c80 <UART_SetConfig+0xc0>
 8003c3c:	4b97      	ldr	r3, [pc, #604]	; (8003e9c <UART_SetConfig+0x2dc>)
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	f003 0303 	and.w	r3, r3, #3
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d817      	bhi.n	8003c78 <UART_SetConfig+0xb8>
 8003c48:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <UART_SetConfig+0x90>)
 8003c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4e:	bf00      	nop
 8003c50:	08003c61 	.word	0x08003c61
 8003c54:	08003c6d 	.word	0x08003c6d
 8003c58:	08003c73 	.word	0x08003c73
 8003c5c:	08003c67 	.word	0x08003c67
 8003c60:	2301      	movs	r3, #1
 8003c62:	77fb      	strb	r3, [r7, #31]
 8003c64:	e0b2      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003c66:	2302      	movs	r3, #2
 8003c68:	77fb      	strb	r3, [r7, #31]
 8003c6a:	e0af      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003c6c:	2304      	movs	r3, #4
 8003c6e:	77fb      	strb	r3, [r7, #31]
 8003c70:	e0ac      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003c72:	2308      	movs	r3, #8
 8003c74:	77fb      	strb	r3, [r7, #31]
 8003c76:	e0a9      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003c78:	2310      	movs	r3, #16
 8003c7a:	77fb      	strb	r3, [r7, #31]
 8003c7c:	bf00      	nop
 8003c7e:	e0a5      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a86      	ldr	r2, [pc, #536]	; (8003ea0 <UART_SetConfig+0x2e0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d123      	bne.n	8003cd2 <UART_SetConfig+0x112>
 8003c8a:	4b84      	ldr	r3, [pc, #528]	; (8003e9c <UART_SetConfig+0x2dc>)
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c96:	d012      	beq.n	8003cbe <UART_SetConfig+0xfe>
 8003c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9c:	d802      	bhi.n	8003ca4 <UART_SetConfig+0xe4>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <UART_SetConfig+0xf2>
 8003ca2:	e012      	b.n	8003cca <UART_SetConfig+0x10a>
 8003ca4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ca8:	d00c      	beq.n	8003cc4 <UART_SetConfig+0x104>
 8003caa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cae:	d003      	beq.n	8003cb8 <UART_SetConfig+0xf8>
 8003cb0:	e00b      	b.n	8003cca <UART_SetConfig+0x10a>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	77fb      	strb	r3, [r7, #31]
 8003cb6:	e089      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	77fb      	strb	r3, [r7, #31]
 8003cbc:	e086      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003cbe:	2304      	movs	r3, #4
 8003cc0:	77fb      	strb	r3, [r7, #31]
 8003cc2:	e083      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003cc4:	2308      	movs	r3, #8
 8003cc6:	77fb      	strb	r3, [r7, #31]
 8003cc8:	e080      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003cca:	2310      	movs	r3, #16
 8003ccc:	77fb      	strb	r3, [r7, #31]
 8003cce:	bf00      	nop
 8003cd0:	e07c      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a73      	ldr	r2, [pc, #460]	; (8003ea4 <UART_SetConfig+0x2e4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d123      	bne.n	8003d24 <UART_SetConfig+0x164>
 8003cdc:	4b6f      	ldr	r3, [pc, #444]	; (8003e9c <UART_SetConfig+0x2dc>)
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003ce4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ce8:	d012      	beq.n	8003d10 <UART_SetConfig+0x150>
 8003cea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cee:	d802      	bhi.n	8003cf6 <UART_SetConfig+0x136>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d007      	beq.n	8003d04 <UART_SetConfig+0x144>
 8003cf4:	e012      	b.n	8003d1c <UART_SetConfig+0x15c>
 8003cf6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003cfa:	d00c      	beq.n	8003d16 <UART_SetConfig+0x156>
 8003cfc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d00:	d003      	beq.n	8003d0a <UART_SetConfig+0x14a>
 8003d02:	e00b      	b.n	8003d1c <UART_SetConfig+0x15c>
 8003d04:	2300      	movs	r3, #0
 8003d06:	77fb      	strb	r3, [r7, #31]
 8003d08:	e060      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	77fb      	strb	r3, [r7, #31]
 8003d0e:	e05d      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003d10:	2304      	movs	r3, #4
 8003d12:	77fb      	strb	r3, [r7, #31]
 8003d14:	e05a      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003d16:	2308      	movs	r3, #8
 8003d18:	77fb      	strb	r3, [r7, #31]
 8003d1a:	e057      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003d1c:	2310      	movs	r3, #16
 8003d1e:	77fb      	strb	r3, [r7, #31]
 8003d20:	bf00      	nop
 8003d22:	e053      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a5f      	ldr	r2, [pc, #380]	; (8003ea8 <UART_SetConfig+0x2e8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d123      	bne.n	8003d76 <UART_SetConfig+0x1b6>
 8003d2e:	4b5b      	ldr	r3, [pc, #364]	; (8003e9c <UART_SetConfig+0x2dc>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d3a:	d012      	beq.n	8003d62 <UART_SetConfig+0x1a2>
 8003d3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d40:	d802      	bhi.n	8003d48 <UART_SetConfig+0x188>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d007      	beq.n	8003d56 <UART_SetConfig+0x196>
 8003d46:	e012      	b.n	8003d6e <UART_SetConfig+0x1ae>
 8003d48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d4c:	d00c      	beq.n	8003d68 <UART_SetConfig+0x1a8>
 8003d4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d52:	d003      	beq.n	8003d5c <UART_SetConfig+0x19c>
 8003d54:	e00b      	b.n	8003d6e <UART_SetConfig+0x1ae>
 8003d56:	2300      	movs	r3, #0
 8003d58:	77fb      	strb	r3, [r7, #31]
 8003d5a:	e037      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	77fb      	strb	r3, [r7, #31]
 8003d60:	e034      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003d62:	2304      	movs	r3, #4
 8003d64:	77fb      	strb	r3, [r7, #31]
 8003d66:	e031      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003d68:	2308      	movs	r3, #8
 8003d6a:	77fb      	strb	r3, [r7, #31]
 8003d6c:	e02e      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003d6e:	2310      	movs	r3, #16
 8003d70:	77fb      	strb	r3, [r7, #31]
 8003d72:	bf00      	nop
 8003d74:	e02a      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a4c      	ldr	r2, [pc, #304]	; (8003eac <UART_SetConfig+0x2ec>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d123      	bne.n	8003dc8 <UART_SetConfig+0x208>
 8003d80:	4b46      	ldr	r3, [pc, #280]	; (8003e9c <UART_SetConfig+0x2dc>)
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003d88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d8c:	d012      	beq.n	8003db4 <UART_SetConfig+0x1f4>
 8003d8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d92:	d802      	bhi.n	8003d9a <UART_SetConfig+0x1da>
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d007      	beq.n	8003da8 <UART_SetConfig+0x1e8>
 8003d98:	e012      	b.n	8003dc0 <UART_SetConfig+0x200>
 8003d9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d9e:	d00c      	beq.n	8003dba <UART_SetConfig+0x1fa>
 8003da0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003da4:	d003      	beq.n	8003dae <UART_SetConfig+0x1ee>
 8003da6:	e00b      	b.n	8003dc0 <UART_SetConfig+0x200>
 8003da8:	2300      	movs	r3, #0
 8003daa:	77fb      	strb	r3, [r7, #31]
 8003dac:	e00e      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003dae:	2302      	movs	r3, #2
 8003db0:	77fb      	strb	r3, [r7, #31]
 8003db2:	e00b      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003db4:	2304      	movs	r3, #4
 8003db6:	77fb      	strb	r3, [r7, #31]
 8003db8:	e008      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003dba:	2308      	movs	r3, #8
 8003dbc:	77fb      	strb	r3, [r7, #31]
 8003dbe:	e005      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003dc0:	2310      	movs	r3, #16
 8003dc2:	77fb      	strb	r3, [r7, #31]
 8003dc4:	bf00      	nop
 8003dc6:	e001      	b.n	8003dcc <UART_SetConfig+0x20c>
 8003dc8:	2310      	movs	r3, #16
 8003dca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd4:	d16e      	bne.n	8003eb4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003dd6:	7ffb      	ldrb	r3, [r7, #31]
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d828      	bhi.n	8003e2e <UART_SetConfig+0x26e>
 8003ddc:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <UART_SetConfig+0x224>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003e09 	.word	0x08003e09
 8003de8:	08003e11 	.word	0x08003e11
 8003dec:	08003e19 	.word	0x08003e19
 8003df0:	08003e2f 	.word	0x08003e2f
 8003df4:	08003e1f 	.word	0x08003e1f
 8003df8:	08003e2f 	.word	0x08003e2f
 8003dfc:	08003e2f 	.word	0x08003e2f
 8003e00:	08003e2f 	.word	0x08003e2f
 8003e04:	08003e27 	.word	0x08003e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e08:	f7ff fb96 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8003e0c:	61b8      	str	r0, [r7, #24]
        break;
 8003e0e:	e013      	b.n	8003e38 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e10:	f7ff fbb4 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 8003e14:	61b8      	str	r0, [r7, #24]
        break;
 8003e16:	e00f      	b.n	8003e38 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e18:	4b25      	ldr	r3, [pc, #148]	; (8003eb0 <UART_SetConfig+0x2f0>)
 8003e1a:	61bb      	str	r3, [r7, #24]
        break;
 8003e1c:	e00c      	b.n	8003e38 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e1e:	f7ff fb13 	bl	8003448 <HAL_RCC_GetSysClockFreq>
 8003e22:	61b8      	str	r0, [r7, #24]
        break;
 8003e24:	e008      	b.n	8003e38 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e2a:	61bb      	str	r3, [r7, #24]
        break;
 8003e2c:	e004      	b.n	8003e38 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	77bb      	strb	r3, [r7, #30]
        break;
 8003e36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 8086 	beq.w	8003f4c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	005a      	lsls	r2, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	441a      	add	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	2b0f      	cmp	r3, #15
 8003e5c:	d916      	bls.n	8003e8c <UART_SetConfig+0x2cc>
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e64:	d212      	bcs.n	8003e8c <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	f023 030f 	bic.w	r3, r3, #15
 8003e6e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	085b      	lsrs	r3, r3, #1
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	89fb      	ldrh	r3, [r7, #14]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	89fa      	ldrh	r2, [r7, #14]
 8003e88:	60da      	str	r2, [r3, #12]
 8003e8a:	e05f      	b.n	8003f4c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	77bb      	strb	r3, [r7, #30]
 8003e90:	e05c      	b.n	8003f4c <UART_SetConfig+0x38c>
 8003e92:	bf00      	nop
 8003e94:	efff69f3 	.word	0xefff69f3
 8003e98:	40013800 	.word	0x40013800
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	40004400 	.word	0x40004400
 8003ea4:	40004800 	.word	0x40004800
 8003ea8:	40004c00 	.word	0x40004c00
 8003eac:	40005000 	.word	0x40005000
 8003eb0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003eb4:	7ffb      	ldrb	r3, [r7, #31]
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d827      	bhi.n	8003f0a <UART_SetConfig+0x34a>
 8003eba:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <UART_SetConfig+0x300>)
 8003ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec0:	08003ee5 	.word	0x08003ee5
 8003ec4:	08003eed 	.word	0x08003eed
 8003ec8:	08003ef5 	.word	0x08003ef5
 8003ecc:	08003f0b 	.word	0x08003f0b
 8003ed0:	08003efb 	.word	0x08003efb
 8003ed4:	08003f0b 	.word	0x08003f0b
 8003ed8:	08003f0b 	.word	0x08003f0b
 8003edc:	08003f0b 	.word	0x08003f0b
 8003ee0:	08003f03 	.word	0x08003f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ee4:	f7ff fb28 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8003ee8:	61b8      	str	r0, [r7, #24]
        break;
 8003eea:	e013      	b.n	8003f14 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003eec:	f7ff fb46 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 8003ef0:	61b8      	str	r0, [r7, #24]
        break;
 8003ef2:	e00f      	b.n	8003f14 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ef4:	4b1b      	ldr	r3, [pc, #108]	; (8003f64 <UART_SetConfig+0x3a4>)
 8003ef6:	61bb      	str	r3, [r7, #24]
        break;
 8003ef8:	e00c      	b.n	8003f14 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003efa:	f7ff faa5 	bl	8003448 <HAL_RCC_GetSysClockFreq>
 8003efe:	61b8      	str	r0, [r7, #24]
        break;
 8003f00:	e008      	b.n	8003f14 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f06:	61bb      	str	r3, [r7, #24]
        break;
 8003f08:	e004      	b.n	8003f14 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	77bb      	strb	r3, [r7, #30]
        break;
 8003f12:	bf00      	nop
    }

    if (pclk != 0U)
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d018      	beq.n	8003f4c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	085a      	lsrs	r2, r3, #1
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	441a      	add	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	2b0f      	cmp	r3, #15
 8003f34:	d908      	bls.n	8003f48 <UART_SetConfig+0x388>
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3c:	d204      	bcs.n	8003f48 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	60da      	str	r2, [r3, #12]
 8003f46:	e001      	b.n	8003f4c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f58:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3720      	adds	r7, #32
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	007a1200 	.word	0x007a1200

08003f68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00a      	beq.n	800401a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01a      	beq.n	800407e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004066:	d10a      	bne.n	800407e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	605a      	str	r2, [r3, #4]
  }
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040bc:	f7fd fa62 	bl	8001584 <HAL_GetTick>
 80040c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	d10e      	bne.n	80040ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f82d 	bl	800413e <UART_WaitOnFlagUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e023      	b.n	8004136 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d10e      	bne.n	800411a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f817 	bl	800413e <UART_WaitOnFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e00d      	b.n	8004136 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b09c      	sub	sp, #112	; 0x70
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	603b      	str	r3, [r7, #0]
 800414a:	4613      	mov	r3, r2
 800414c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800414e:	e0a5      	b.n	800429c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004156:	f000 80a1 	beq.w	800429c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415a:	f7fd fa13 	bl	8001584 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004166:	429a      	cmp	r2, r3
 8004168:	d302      	bcc.n	8004170 <UART_WaitOnFlagUntilTimeout+0x32>
 800416a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800416c:	2b00      	cmp	r3, #0
 800416e:	d13e      	bne.n	80041ee <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800417e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004180:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004184:	667b      	str	r3, [r7, #100]	; 0x64
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800418e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004190:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004194:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800419c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e6      	bne.n	8004170 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3308      	adds	r3, #8
 80041a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	663b      	str	r3, [r7, #96]	; 0x60
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3308      	adds	r3, #8
 80041c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80041c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e5      	bne.n	80041a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2220      	movs	r2, #32
 80041da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e067      	b.n	80042be <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d04f      	beq.n	800429c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800420a:	d147      	bne.n	800429c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004214:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421e:	e853 3f00 	ldrex	r3, [r3]
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800422a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	461a      	mov	r2, r3
 8004232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004234:	637b      	str	r3, [r7, #52]	; 0x34
 8004236:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800423a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800423c:	e841 2300 	strex	r3, r2, [r1]
 8004240:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e6      	bne.n	8004216 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3308      	adds	r3, #8
 800424e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	e853 3f00 	ldrex	r3, [r3]
 8004256:	613b      	str	r3, [r7, #16]
   return(result);
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	f023 0301 	bic.w	r3, r3, #1
 800425e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3308      	adds	r3, #8
 8004266:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004268:	623a      	str	r2, [r7, #32]
 800426a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426c:	69f9      	ldr	r1, [r7, #28]
 800426e:	6a3a      	ldr	r2, [r7, #32]
 8004270:	e841 2300 	strex	r3, r2, [r1]
 8004274:	61bb      	str	r3, [r7, #24]
   return(result);
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1e5      	bne.n	8004248 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2220      	movs	r2, #32
 8004280:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e010      	b.n	80042be <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69da      	ldr	r2, [r3, #28]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	4013      	ands	r3, r2
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	bf0c      	ite	eq
 80042ac:	2301      	moveq	r3, #1
 80042ae:	2300      	movne	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	461a      	mov	r2, r3
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	f43f af4a 	beq.w	8004150 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3770      	adds	r7, #112	; 0x70
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <__errno>:
 80042c8:	4b01      	ldr	r3, [pc, #4]	; (80042d0 <__errno+0x8>)
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	2000000c 	.word	0x2000000c

080042d4 <__libc_init_array>:
 80042d4:	b570      	push	{r4, r5, r6, lr}
 80042d6:	4e0d      	ldr	r6, [pc, #52]	; (800430c <__libc_init_array+0x38>)
 80042d8:	4c0d      	ldr	r4, [pc, #52]	; (8004310 <__libc_init_array+0x3c>)
 80042da:	1ba4      	subs	r4, r4, r6
 80042dc:	10a4      	asrs	r4, r4, #2
 80042de:	2500      	movs	r5, #0
 80042e0:	42a5      	cmp	r5, r4
 80042e2:	d109      	bne.n	80042f8 <__libc_init_array+0x24>
 80042e4:	4e0b      	ldr	r6, [pc, #44]	; (8004314 <__libc_init_array+0x40>)
 80042e6:	4c0c      	ldr	r4, [pc, #48]	; (8004318 <__libc_init_array+0x44>)
 80042e8:	f002 f878 	bl	80063dc <_init>
 80042ec:	1ba4      	subs	r4, r4, r6
 80042ee:	10a4      	asrs	r4, r4, #2
 80042f0:	2500      	movs	r5, #0
 80042f2:	42a5      	cmp	r5, r4
 80042f4:	d105      	bne.n	8004302 <__libc_init_array+0x2e>
 80042f6:	bd70      	pop	{r4, r5, r6, pc}
 80042f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042fc:	4798      	blx	r3
 80042fe:	3501      	adds	r5, #1
 8004300:	e7ee      	b.n	80042e0 <__libc_init_array+0xc>
 8004302:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004306:	4798      	blx	r3
 8004308:	3501      	adds	r5, #1
 800430a:	e7f2      	b.n	80042f2 <__libc_init_array+0x1e>
 800430c:	080066a8 	.word	0x080066a8
 8004310:	080066a8 	.word	0x080066a8
 8004314:	080066a8 	.word	0x080066a8
 8004318:	080066ac 	.word	0x080066ac

0800431c <memcpy>:
 800431c:	b510      	push	{r4, lr}
 800431e:	1e43      	subs	r3, r0, #1
 8004320:	440a      	add	r2, r1
 8004322:	4291      	cmp	r1, r2
 8004324:	d100      	bne.n	8004328 <memcpy+0xc>
 8004326:	bd10      	pop	{r4, pc}
 8004328:	f811 4b01 	ldrb.w	r4, [r1], #1
 800432c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004330:	e7f7      	b.n	8004322 <memcpy+0x6>

08004332 <memset>:
 8004332:	4402      	add	r2, r0
 8004334:	4603      	mov	r3, r0
 8004336:	4293      	cmp	r3, r2
 8004338:	d100      	bne.n	800433c <memset+0xa>
 800433a:	4770      	bx	lr
 800433c:	f803 1b01 	strb.w	r1, [r3], #1
 8004340:	e7f9      	b.n	8004336 <memset+0x4>

08004342 <__cvt>:
 8004342:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004346:	ec55 4b10 	vmov	r4, r5, d0
 800434a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800434c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004350:	2d00      	cmp	r5, #0
 8004352:	460e      	mov	r6, r1
 8004354:	4691      	mov	r9, r2
 8004356:	4619      	mov	r1, r3
 8004358:	bfb8      	it	lt
 800435a:	4622      	movlt	r2, r4
 800435c:	462b      	mov	r3, r5
 800435e:	f027 0720 	bic.w	r7, r7, #32
 8004362:	bfbb      	ittet	lt
 8004364:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004368:	461d      	movlt	r5, r3
 800436a:	2300      	movge	r3, #0
 800436c:	232d      	movlt	r3, #45	; 0x2d
 800436e:	bfb8      	it	lt
 8004370:	4614      	movlt	r4, r2
 8004372:	2f46      	cmp	r7, #70	; 0x46
 8004374:	700b      	strb	r3, [r1, #0]
 8004376:	d004      	beq.n	8004382 <__cvt+0x40>
 8004378:	2f45      	cmp	r7, #69	; 0x45
 800437a:	d100      	bne.n	800437e <__cvt+0x3c>
 800437c:	3601      	adds	r6, #1
 800437e:	2102      	movs	r1, #2
 8004380:	e000      	b.n	8004384 <__cvt+0x42>
 8004382:	2103      	movs	r1, #3
 8004384:	ab03      	add	r3, sp, #12
 8004386:	9301      	str	r3, [sp, #4]
 8004388:	ab02      	add	r3, sp, #8
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	4632      	mov	r2, r6
 800438e:	4653      	mov	r3, sl
 8004390:	ec45 4b10 	vmov	d0, r4, r5
 8004394:	f000 fcf8 	bl	8004d88 <_dtoa_r>
 8004398:	2f47      	cmp	r7, #71	; 0x47
 800439a:	4680      	mov	r8, r0
 800439c:	d102      	bne.n	80043a4 <__cvt+0x62>
 800439e:	f019 0f01 	tst.w	r9, #1
 80043a2:	d026      	beq.n	80043f2 <__cvt+0xb0>
 80043a4:	2f46      	cmp	r7, #70	; 0x46
 80043a6:	eb08 0906 	add.w	r9, r8, r6
 80043aa:	d111      	bne.n	80043d0 <__cvt+0x8e>
 80043ac:	f898 3000 	ldrb.w	r3, [r8]
 80043b0:	2b30      	cmp	r3, #48	; 0x30
 80043b2:	d10a      	bne.n	80043ca <__cvt+0x88>
 80043b4:	2200      	movs	r2, #0
 80043b6:	2300      	movs	r3, #0
 80043b8:	4620      	mov	r0, r4
 80043ba:	4629      	mov	r1, r5
 80043bc:	f7fc fb8c 	bl	8000ad8 <__aeabi_dcmpeq>
 80043c0:	b918      	cbnz	r0, 80043ca <__cvt+0x88>
 80043c2:	f1c6 0601 	rsb	r6, r6, #1
 80043c6:	f8ca 6000 	str.w	r6, [sl]
 80043ca:	f8da 3000 	ldr.w	r3, [sl]
 80043ce:	4499      	add	r9, r3
 80043d0:	2200      	movs	r2, #0
 80043d2:	2300      	movs	r3, #0
 80043d4:	4620      	mov	r0, r4
 80043d6:	4629      	mov	r1, r5
 80043d8:	f7fc fb7e 	bl	8000ad8 <__aeabi_dcmpeq>
 80043dc:	b938      	cbnz	r0, 80043ee <__cvt+0xac>
 80043de:	2230      	movs	r2, #48	; 0x30
 80043e0:	9b03      	ldr	r3, [sp, #12]
 80043e2:	454b      	cmp	r3, r9
 80043e4:	d205      	bcs.n	80043f2 <__cvt+0xb0>
 80043e6:	1c59      	adds	r1, r3, #1
 80043e8:	9103      	str	r1, [sp, #12]
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	e7f8      	b.n	80043e0 <__cvt+0x9e>
 80043ee:	f8cd 900c 	str.w	r9, [sp, #12]
 80043f2:	9b03      	ldr	r3, [sp, #12]
 80043f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043f6:	eba3 0308 	sub.w	r3, r3, r8
 80043fa:	4640      	mov	r0, r8
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	b004      	add	sp, #16
 8004400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004404 <__exponent>:
 8004404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004406:	2900      	cmp	r1, #0
 8004408:	4604      	mov	r4, r0
 800440a:	bfba      	itte	lt
 800440c:	4249      	neglt	r1, r1
 800440e:	232d      	movlt	r3, #45	; 0x2d
 8004410:	232b      	movge	r3, #43	; 0x2b
 8004412:	2909      	cmp	r1, #9
 8004414:	f804 2b02 	strb.w	r2, [r4], #2
 8004418:	7043      	strb	r3, [r0, #1]
 800441a:	dd20      	ble.n	800445e <__exponent+0x5a>
 800441c:	f10d 0307 	add.w	r3, sp, #7
 8004420:	461f      	mov	r7, r3
 8004422:	260a      	movs	r6, #10
 8004424:	fb91 f5f6 	sdiv	r5, r1, r6
 8004428:	fb06 1115 	mls	r1, r6, r5, r1
 800442c:	3130      	adds	r1, #48	; 0x30
 800442e:	2d09      	cmp	r5, #9
 8004430:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004434:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004438:	4629      	mov	r1, r5
 800443a:	dc09      	bgt.n	8004450 <__exponent+0x4c>
 800443c:	3130      	adds	r1, #48	; 0x30
 800443e:	3b02      	subs	r3, #2
 8004440:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004444:	42bb      	cmp	r3, r7
 8004446:	4622      	mov	r2, r4
 8004448:	d304      	bcc.n	8004454 <__exponent+0x50>
 800444a:	1a10      	subs	r0, r2, r0
 800444c:	b003      	add	sp, #12
 800444e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004450:	4613      	mov	r3, r2
 8004452:	e7e7      	b.n	8004424 <__exponent+0x20>
 8004454:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004458:	f804 2b01 	strb.w	r2, [r4], #1
 800445c:	e7f2      	b.n	8004444 <__exponent+0x40>
 800445e:	2330      	movs	r3, #48	; 0x30
 8004460:	4419      	add	r1, r3
 8004462:	7083      	strb	r3, [r0, #2]
 8004464:	1d02      	adds	r2, r0, #4
 8004466:	70c1      	strb	r1, [r0, #3]
 8004468:	e7ef      	b.n	800444a <__exponent+0x46>
	...

0800446c <_printf_float>:
 800446c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004470:	b08d      	sub	sp, #52	; 0x34
 8004472:	460c      	mov	r4, r1
 8004474:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004478:	4616      	mov	r6, r2
 800447a:	461f      	mov	r7, r3
 800447c:	4605      	mov	r5, r0
 800447e:	f001 fa3b 	bl	80058f8 <_localeconv_r>
 8004482:	6803      	ldr	r3, [r0, #0]
 8004484:	9304      	str	r3, [sp, #16]
 8004486:	4618      	mov	r0, r3
 8004488:	f7fb feaa 	bl	80001e0 <strlen>
 800448c:	2300      	movs	r3, #0
 800448e:	930a      	str	r3, [sp, #40]	; 0x28
 8004490:	f8d8 3000 	ldr.w	r3, [r8]
 8004494:	9005      	str	r0, [sp, #20]
 8004496:	3307      	adds	r3, #7
 8004498:	f023 0307 	bic.w	r3, r3, #7
 800449c:	f103 0208 	add.w	r2, r3, #8
 80044a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80044a4:	f8d4 b000 	ldr.w	fp, [r4]
 80044a8:	f8c8 2000 	str.w	r2, [r8]
 80044ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80044b4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80044b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80044bc:	9307      	str	r3, [sp, #28]
 80044be:	f8cd 8018 	str.w	r8, [sp, #24]
 80044c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044c6:	4ba7      	ldr	r3, [pc, #668]	; (8004764 <_printf_float+0x2f8>)
 80044c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044cc:	f7fc fb36 	bl	8000b3c <__aeabi_dcmpun>
 80044d0:	bb70      	cbnz	r0, 8004530 <_printf_float+0xc4>
 80044d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044d6:	4ba3      	ldr	r3, [pc, #652]	; (8004764 <_printf_float+0x2f8>)
 80044d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044dc:	f7fc fb10 	bl	8000b00 <__aeabi_dcmple>
 80044e0:	bb30      	cbnz	r0, 8004530 <_printf_float+0xc4>
 80044e2:	2200      	movs	r2, #0
 80044e4:	2300      	movs	r3, #0
 80044e6:	4640      	mov	r0, r8
 80044e8:	4649      	mov	r1, r9
 80044ea:	f7fc faff 	bl	8000aec <__aeabi_dcmplt>
 80044ee:	b110      	cbz	r0, 80044f6 <_printf_float+0x8a>
 80044f0:	232d      	movs	r3, #45	; 0x2d
 80044f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044f6:	4a9c      	ldr	r2, [pc, #624]	; (8004768 <_printf_float+0x2fc>)
 80044f8:	4b9c      	ldr	r3, [pc, #624]	; (800476c <_printf_float+0x300>)
 80044fa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80044fe:	bf8c      	ite	hi
 8004500:	4690      	movhi	r8, r2
 8004502:	4698      	movls	r8, r3
 8004504:	2303      	movs	r3, #3
 8004506:	f02b 0204 	bic.w	r2, fp, #4
 800450a:	6123      	str	r3, [r4, #16]
 800450c:	6022      	str	r2, [r4, #0]
 800450e:	f04f 0900 	mov.w	r9, #0
 8004512:	9700      	str	r7, [sp, #0]
 8004514:	4633      	mov	r3, r6
 8004516:	aa0b      	add	r2, sp, #44	; 0x2c
 8004518:	4621      	mov	r1, r4
 800451a:	4628      	mov	r0, r5
 800451c:	f000 f9e6 	bl	80048ec <_printf_common>
 8004520:	3001      	adds	r0, #1
 8004522:	f040 808d 	bne.w	8004640 <_printf_float+0x1d4>
 8004526:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800452a:	b00d      	add	sp, #52	; 0x34
 800452c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004530:	4642      	mov	r2, r8
 8004532:	464b      	mov	r3, r9
 8004534:	4640      	mov	r0, r8
 8004536:	4649      	mov	r1, r9
 8004538:	f7fc fb00 	bl	8000b3c <__aeabi_dcmpun>
 800453c:	b110      	cbz	r0, 8004544 <_printf_float+0xd8>
 800453e:	4a8c      	ldr	r2, [pc, #560]	; (8004770 <_printf_float+0x304>)
 8004540:	4b8c      	ldr	r3, [pc, #560]	; (8004774 <_printf_float+0x308>)
 8004542:	e7da      	b.n	80044fa <_printf_float+0x8e>
 8004544:	6861      	ldr	r1, [r4, #4]
 8004546:	1c4b      	adds	r3, r1, #1
 8004548:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800454c:	a80a      	add	r0, sp, #40	; 0x28
 800454e:	d13e      	bne.n	80045ce <_printf_float+0x162>
 8004550:	2306      	movs	r3, #6
 8004552:	6063      	str	r3, [r4, #4]
 8004554:	2300      	movs	r3, #0
 8004556:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800455a:	ab09      	add	r3, sp, #36	; 0x24
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	ec49 8b10 	vmov	d0, r8, r9
 8004562:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004566:	6022      	str	r2, [r4, #0]
 8004568:	f8cd a004 	str.w	sl, [sp, #4]
 800456c:	6861      	ldr	r1, [r4, #4]
 800456e:	4628      	mov	r0, r5
 8004570:	f7ff fee7 	bl	8004342 <__cvt>
 8004574:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004578:	2b47      	cmp	r3, #71	; 0x47
 800457a:	4680      	mov	r8, r0
 800457c:	d109      	bne.n	8004592 <_printf_float+0x126>
 800457e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004580:	1cd8      	adds	r0, r3, #3
 8004582:	db02      	blt.n	800458a <_printf_float+0x11e>
 8004584:	6862      	ldr	r2, [r4, #4]
 8004586:	4293      	cmp	r3, r2
 8004588:	dd47      	ble.n	800461a <_printf_float+0x1ae>
 800458a:	f1aa 0a02 	sub.w	sl, sl, #2
 800458e:	fa5f fa8a 	uxtb.w	sl, sl
 8004592:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004596:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004598:	d824      	bhi.n	80045e4 <_printf_float+0x178>
 800459a:	3901      	subs	r1, #1
 800459c:	4652      	mov	r2, sl
 800459e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80045a2:	9109      	str	r1, [sp, #36]	; 0x24
 80045a4:	f7ff ff2e 	bl	8004404 <__exponent>
 80045a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045aa:	1813      	adds	r3, r2, r0
 80045ac:	2a01      	cmp	r2, #1
 80045ae:	4681      	mov	r9, r0
 80045b0:	6123      	str	r3, [r4, #16]
 80045b2:	dc02      	bgt.n	80045ba <_printf_float+0x14e>
 80045b4:	6822      	ldr	r2, [r4, #0]
 80045b6:	07d1      	lsls	r1, r2, #31
 80045b8:	d501      	bpl.n	80045be <_printf_float+0x152>
 80045ba:	3301      	adds	r3, #1
 80045bc:	6123      	str	r3, [r4, #16]
 80045be:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0a5      	beq.n	8004512 <_printf_float+0xa6>
 80045c6:	232d      	movs	r3, #45	; 0x2d
 80045c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045cc:	e7a1      	b.n	8004512 <_printf_float+0xa6>
 80045ce:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80045d2:	f000 8177 	beq.w	80048c4 <_printf_float+0x458>
 80045d6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80045da:	d1bb      	bne.n	8004554 <_printf_float+0xe8>
 80045dc:	2900      	cmp	r1, #0
 80045de:	d1b9      	bne.n	8004554 <_printf_float+0xe8>
 80045e0:	2301      	movs	r3, #1
 80045e2:	e7b6      	b.n	8004552 <_printf_float+0xe6>
 80045e4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80045e8:	d119      	bne.n	800461e <_printf_float+0x1b2>
 80045ea:	2900      	cmp	r1, #0
 80045ec:	6863      	ldr	r3, [r4, #4]
 80045ee:	dd0c      	ble.n	800460a <_printf_float+0x19e>
 80045f0:	6121      	str	r1, [r4, #16]
 80045f2:	b913      	cbnz	r3, 80045fa <_printf_float+0x18e>
 80045f4:	6822      	ldr	r2, [r4, #0]
 80045f6:	07d2      	lsls	r2, r2, #31
 80045f8:	d502      	bpl.n	8004600 <_printf_float+0x194>
 80045fa:	3301      	adds	r3, #1
 80045fc:	440b      	add	r3, r1
 80045fe:	6123      	str	r3, [r4, #16]
 8004600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004602:	65a3      	str	r3, [r4, #88]	; 0x58
 8004604:	f04f 0900 	mov.w	r9, #0
 8004608:	e7d9      	b.n	80045be <_printf_float+0x152>
 800460a:	b913      	cbnz	r3, 8004612 <_printf_float+0x1a6>
 800460c:	6822      	ldr	r2, [r4, #0]
 800460e:	07d0      	lsls	r0, r2, #31
 8004610:	d501      	bpl.n	8004616 <_printf_float+0x1aa>
 8004612:	3302      	adds	r3, #2
 8004614:	e7f3      	b.n	80045fe <_printf_float+0x192>
 8004616:	2301      	movs	r3, #1
 8004618:	e7f1      	b.n	80045fe <_printf_float+0x192>
 800461a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800461e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004622:	4293      	cmp	r3, r2
 8004624:	db05      	blt.n	8004632 <_printf_float+0x1c6>
 8004626:	6822      	ldr	r2, [r4, #0]
 8004628:	6123      	str	r3, [r4, #16]
 800462a:	07d1      	lsls	r1, r2, #31
 800462c:	d5e8      	bpl.n	8004600 <_printf_float+0x194>
 800462e:	3301      	adds	r3, #1
 8004630:	e7e5      	b.n	80045fe <_printf_float+0x192>
 8004632:	2b00      	cmp	r3, #0
 8004634:	bfd4      	ite	le
 8004636:	f1c3 0302 	rsble	r3, r3, #2
 800463a:	2301      	movgt	r3, #1
 800463c:	4413      	add	r3, r2
 800463e:	e7de      	b.n	80045fe <_printf_float+0x192>
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	055a      	lsls	r2, r3, #21
 8004644:	d407      	bmi.n	8004656 <_printf_float+0x1ea>
 8004646:	6923      	ldr	r3, [r4, #16]
 8004648:	4642      	mov	r2, r8
 800464a:	4631      	mov	r1, r6
 800464c:	4628      	mov	r0, r5
 800464e:	47b8      	blx	r7
 8004650:	3001      	adds	r0, #1
 8004652:	d12b      	bne.n	80046ac <_printf_float+0x240>
 8004654:	e767      	b.n	8004526 <_printf_float+0xba>
 8004656:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800465a:	f240 80dc 	bls.w	8004816 <_printf_float+0x3aa>
 800465e:	2200      	movs	r2, #0
 8004660:	2300      	movs	r3, #0
 8004662:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004666:	f7fc fa37 	bl	8000ad8 <__aeabi_dcmpeq>
 800466a:	2800      	cmp	r0, #0
 800466c:	d033      	beq.n	80046d6 <_printf_float+0x26a>
 800466e:	2301      	movs	r3, #1
 8004670:	4a41      	ldr	r2, [pc, #260]	; (8004778 <_printf_float+0x30c>)
 8004672:	4631      	mov	r1, r6
 8004674:	4628      	mov	r0, r5
 8004676:	47b8      	blx	r7
 8004678:	3001      	adds	r0, #1
 800467a:	f43f af54 	beq.w	8004526 <_printf_float+0xba>
 800467e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004682:	429a      	cmp	r2, r3
 8004684:	db02      	blt.n	800468c <_printf_float+0x220>
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	07d8      	lsls	r0, r3, #31
 800468a:	d50f      	bpl.n	80046ac <_printf_float+0x240>
 800468c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004690:	4631      	mov	r1, r6
 8004692:	4628      	mov	r0, r5
 8004694:	47b8      	blx	r7
 8004696:	3001      	adds	r0, #1
 8004698:	f43f af45 	beq.w	8004526 <_printf_float+0xba>
 800469c:	f04f 0800 	mov.w	r8, #0
 80046a0:	f104 091a 	add.w	r9, r4, #26
 80046a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046a6:	3b01      	subs	r3, #1
 80046a8:	4543      	cmp	r3, r8
 80046aa:	dc09      	bgt.n	80046c0 <_printf_float+0x254>
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	079b      	lsls	r3, r3, #30
 80046b0:	f100 8103 	bmi.w	80048ba <_printf_float+0x44e>
 80046b4:	68e0      	ldr	r0, [r4, #12]
 80046b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046b8:	4298      	cmp	r0, r3
 80046ba:	bfb8      	it	lt
 80046bc:	4618      	movlt	r0, r3
 80046be:	e734      	b.n	800452a <_printf_float+0xbe>
 80046c0:	2301      	movs	r3, #1
 80046c2:	464a      	mov	r2, r9
 80046c4:	4631      	mov	r1, r6
 80046c6:	4628      	mov	r0, r5
 80046c8:	47b8      	blx	r7
 80046ca:	3001      	adds	r0, #1
 80046cc:	f43f af2b 	beq.w	8004526 <_printf_float+0xba>
 80046d0:	f108 0801 	add.w	r8, r8, #1
 80046d4:	e7e6      	b.n	80046a4 <_printf_float+0x238>
 80046d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046d8:	2b00      	cmp	r3, #0
 80046da:	dc2b      	bgt.n	8004734 <_printf_float+0x2c8>
 80046dc:	2301      	movs	r3, #1
 80046de:	4a26      	ldr	r2, [pc, #152]	; (8004778 <_printf_float+0x30c>)
 80046e0:	4631      	mov	r1, r6
 80046e2:	4628      	mov	r0, r5
 80046e4:	47b8      	blx	r7
 80046e6:	3001      	adds	r0, #1
 80046e8:	f43f af1d 	beq.w	8004526 <_printf_float+0xba>
 80046ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ee:	b923      	cbnz	r3, 80046fa <_printf_float+0x28e>
 80046f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046f2:	b913      	cbnz	r3, 80046fa <_printf_float+0x28e>
 80046f4:	6823      	ldr	r3, [r4, #0]
 80046f6:	07d9      	lsls	r1, r3, #31
 80046f8:	d5d8      	bpl.n	80046ac <_printf_float+0x240>
 80046fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046fe:	4631      	mov	r1, r6
 8004700:	4628      	mov	r0, r5
 8004702:	47b8      	blx	r7
 8004704:	3001      	adds	r0, #1
 8004706:	f43f af0e 	beq.w	8004526 <_printf_float+0xba>
 800470a:	f04f 0900 	mov.w	r9, #0
 800470e:	f104 0a1a 	add.w	sl, r4, #26
 8004712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004714:	425b      	negs	r3, r3
 8004716:	454b      	cmp	r3, r9
 8004718:	dc01      	bgt.n	800471e <_printf_float+0x2b2>
 800471a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800471c:	e794      	b.n	8004648 <_printf_float+0x1dc>
 800471e:	2301      	movs	r3, #1
 8004720:	4652      	mov	r2, sl
 8004722:	4631      	mov	r1, r6
 8004724:	4628      	mov	r0, r5
 8004726:	47b8      	blx	r7
 8004728:	3001      	adds	r0, #1
 800472a:	f43f aefc 	beq.w	8004526 <_printf_float+0xba>
 800472e:	f109 0901 	add.w	r9, r9, #1
 8004732:	e7ee      	b.n	8004712 <_printf_float+0x2a6>
 8004734:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004736:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004738:	429a      	cmp	r2, r3
 800473a:	bfa8      	it	ge
 800473c:	461a      	movge	r2, r3
 800473e:	2a00      	cmp	r2, #0
 8004740:	4691      	mov	r9, r2
 8004742:	dd07      	ble.n	8004754 <_printf_float+0x2e8>
 8004744:	4613      	mov	r3, r2
 8004746:	4631      	mov	r1, r6
 8004748:	4642      	mov	r2, r8
 800474a:	4628      	mov	r0, r5
 800474c:	47b8      	blx	r7
 800474e:	3001      	adds	r0, #1
 8004750:	f43f aee9 	beq.w	8004526 <_printf_float+0xba>
 8004754:	f104 031a 	add.w	r3, r4, #26
 8004758:	f04f 0b00 	mov.w	fp, #0
 800475c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004760:	9306      	str	r3, [sp, #24]
 8004762:	e015      	b.n	8004790 <_printf_float+0x324>
 8004764:	7fefffff 	.word	0x7fefffff
 8004768:	0800644c 	.word	0x0800644c
 800476c:	08006448 	.word	0x08006448
 8004770:	08006454 	.word	0x08006454
 8004774:	08006450 	.word	0x08006450
 8004778:	08006458 	.word	0x08006458
 800477c:	2301      	movs	r3, #1
 800477e:	9a06      	ldr	r2, [sp, #24]
 8004780:	4631      	mov	r1, r6
 8004782:	4628      	mov	r0, r5
 8004784:	47b8      	blx	r7
 8004786:	3001      	adds	r0, #1
 8004788:	f43f aecd 	beq.w	8004526 <_printf_float+0xba>
 800478c:	f10b 0b01 	add.w	fp, fp, #1
 8004790:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004794:	ebaa 0309 	sub.w	r3, sl, r9
 8004798:	455b      	cmp	r3, fp
 800479a:	dcef      	bgt.n	800477c <_printf_float+0x310>
 800479c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047a0:	429a      	cmp	r2, r3
 80047a2:	44d0      	add	r8, sl
 80047a4:	db15      	blt.n	80047d2 <_printf_float+0x366>
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	07da      	lsls	r2, r3, #31
 80047aa:	d412      	bmi.n	80047d2 <_printf_float+0x366>
 80047ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047b0:	eba3 020a 	sub.w	r2, r3, sl
 80047b4:	eba3 0a01 	sub.w	sl, r3, r1
 80047b8:	4592      	cmp	sl, r2
 80047ba:	bfa8      	it	ge
 80047bc:	4692      	movge	sl, r2
 80047be:	f1ba 0f00 	cmp.w	sl, #0
 80047c2:	dc0e      	bgt.n	80047e2 <_printf_float+0x376>
 80047c4:	f04f 0800 	mov.w	r8, #0
 80047c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80047cc:	f104 091a 	add.w	r9, r4, #26
 80047d0:	e019      	b.n	8004806 <_printf_float+0x39a>
 80047d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047d6:	4631      	mov	r1, r6
 80047d8:	4628      	mov	r0, r5
 80047da:	47b8      	blx	r7
 80047dc:	3001      	adds	r0, #1
 80047de:	d1e5      	bne.n	80047ac <_printf_float+0x340>
 80047e0:	e6a1      	b.n	8004526 <_printf_float+0xba>
 80047e2:	4653      	mov	r3, sl
 80047e4:	4642      	mov	r2, r8
 80047e6:	4631      	mov	r1, r6
 80047e8:	4628      	mov	r0, r5
 80047ea:	47b8      	blx	r7
 80047ec:	3001      	adds	r0, #1
 80047ee:	d1e9      	bne.n	80047c4 <_printf_float+0x358>
 80047f0:	e699      	b.n	8004526 <_printf_float+0xba>
 80047f2:	2301      	movs	r3, #1
 80047f4:	464a      	mov	r2, r9
 80047f6:	4631      	mov	r1, r6
 80047f8:	4628      	mov	r0, r5
 80047fa:	47b8      	blx	r7
 80047fc:	3001      	adds	r0, #1
 80047fe:	f43f ae92 	beq.w	8004526 <_printf_float+0xba>
 8004802:	f108 0801 	add.w	r8, r8, #1
 8004806:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800480a:	1a9b      	subs	r3, r3, r2
 800480c:	eba3 030a 	sub.w	r3, r3, sl
 8004810:	4543      	cmp	r3, r8
 8004812:	dcee      	bgt.n	80047f2 <_printf_float+0x386>
 8004814:	e74a      	b.n	80046ac <_printf_float+0x240>
 8004816:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004818:	2a01      	cmp	r2, #1
 800481a:	dc01      	bgt.n	8004820 <_printf_float+0x3b4>
 800481c:	07db      	lsls	r3, r3, #31
 800481e:	d53a      	bpl.n	8004896 <_printf_float+0x42a>
 8004820:	2301      	movs	r3, #1
 8004822:	4642      	mov	r2, r8
 8004824:	4631      	mov	r1, r6
 8004826:	4628      	mov	r0, r5
 8004828:	47b8      	blx	r7
 800482a:	3001      	adds	r0, #1
 800482c:	f43f ae7b 	beq.w	8004526 <_printf_float+0xba>
 8004830:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004834:	4631      	mov	r1, r6
 8004836:	4628      	mov	r0, r5
 8004838:	47b8      	blx	r7
 800483a:	3001      	adds	r0, #1
 800483c:	f108 0801 	add.w	r8, r8, #1
 8004840:	f43f ae71 	beq.w	8004526 <_printf_float+0xba>
 8004844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004846:	2200      	movs	r2, #0
 8004848:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800484c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004850:	2300      	movs	r3, #0
 8004852:	f7fc f941 	bl	8000ad8 <__aeabi_dcmpeq>
 8004856:	b9c8      	cbnz	r0, 800488c <_printf_float+0x420>
 8004858:	4653      	mov	r3, sl
 800485a:	4642      	mov	r2, r8
 800485c:	4631      	mov	r1, r6
 800485e:	4628      	mov	r0, r5
 8004860:	47b8      	blx	r7
 8004862:	3001      	adds	r0, #1
 8004864:	d10e      	bne.n	8004884 <_printf_float+0x418>
 8004866:	e65e      	b.n	8004526 <_printf_float+0xba>
 8004868:	2301      	movs	r3, #1
 800486a:	4652      	mov	r2, sl
 800486c:	4631      	mov	r1, r6
 800486e:	4628      	mov	r0, r5
 8004870:	47b8      	blx	r7
 8004872:	3001      	adds	r0, #1
 8004874:	f43f ae57 	beq.w	8004526 <_printf_float+0xba>
 8004878:	f108 0801 	add.w	r8, r8, #1
 800487c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800487e:	3b01      	subs	r3, #1
 8004880:	4543      	cmp	r3, r8
 8004882:	dcf1      	bgt.n	8004868 <_printf_float+0x3fc>
 8004884:	464b      	mov	r3, r9
 8004886:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800488a:	e6de      	b.n	800464a <_printf_float+0x1de>
 800488c:	f04f 0800 	mov.w	r8, #0
 8004890:	f104 0a1a 	add.w	sl, r4, #26
 8004894:	e7f2      	b.n	800487c <_printf_float+0x410>
 8004896:	2301      	movs	r3, #1
 8004898:	e7df      	b.n	800485a <_printf_float+0x3ee>
 800489a:	2301      	movs	r3, #1
 800489c:	464a      	mov	r2, r9
 800489e:	4631      	mov	r1, r6
 80048a0:	4628      	mov	r0, r5
 80048a2:	47b8      	blx	r7
 80048a4:	3001      	adds	r0, #1
 80048a6:	f43f ae3e 	beq.w	8004526 <_printf_float+0xba>
 80048aa:	f108 0801 	add.w	r8, r8, #1
 80048ae:	68e3      	ldr	r3, [r4, #12]
 80048b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80048b2:	1a9b      	subs	r3, r3, r2
 80048b4:	4543      	cmp	r3, r8
 80048b6:	dcf0      	bgt.n	800489a <_printf_float+0x42e>
 80048b8:	e6fc      	b.n	80046b4 <_printf_float+0x248>
 80048ba:	f04f 0800 	mov.w	r8, #0
 80048be:	f104 0919 	add.w	r9, r4, #25
 80048c2:	e7f4      	b.n	80048ae <_printf_float+0x442>
 80048c4:	2900      	cmp	r1, #0
 80048c6:	f43f ae8b 	beq.w	80045e0 <_printf_float+0x174>
 80048ca:	2300      	movs	r3, #0
 80048cc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80048d0:	ab09      	add	r3, sp, #36	; 0x24
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	ec49 8b10 	vmov	d0, r8, r9
 80048d8:	6022      	str	r2, [r4, #0]
 80048da:	f8cd a004 	str.w	sl, [sp, #4]
 80048de:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80048e2:	4628      	mov	r0, r5
 80048e4:	f7ff fd2d 	bl	8004342 <__cvt>
 80048e8:	4680      	mov	r8, r0
 80048ea:	e648      	b.n	800457e <_printf_float+0x112>

080048ec <_printf_common>:
 80048ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048f0:	4691      	mov	r9, r2
 80048f2:	461f      	mov	r7, r3
 80048f4:	688a      	ldr	r2, [r1, #8]
 80048f6:	690b      	ldr	r3, [r1, #16]
 80048f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048fc:	4293      	cmp	r3, r2
 80048fe:	bfb8      	it	lt
 8004900:	4613      	movlt	r3, r2
 8004902:	f8c9 3000 	str.w	r3, [r9]
 8004906:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800490a:	4606      	mov	r6, r0
 800490c:	460c      	mov	r4, r1
 800490e:	b112      	cbz	r2, 8004916 <_printf_common+0x2a>
 8004910:	3301      	adds	r3, #1
 8004912:	f8c9 3000 	str.w	r3, [r9]
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	0699      	lsls	r1, r3, #26
 800491a:	bf42      	ittt	mi
 800491c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004920:	3302      	addmi	r3, #2
 8004922:	f8c9 3000 	strmi.w	r3, [r9]
 8004926:	6825      	ldr	r5, [r4, #0]
 8004928:	f015 0506 	ands.w	r5, r5, #6
 800492c:	d107      	bne.n	800493e <_printf_common+0x52>
 800492e:	f104 0a19 	add.w	sl, r4, #25
 8004932:	68e3      	ldr	r3, [r4, #12]
 8004934:	f8d9 2000 	ldr.w	r2, [r9]
 8004938:	1a9b      	subs	r3, r3, r2
 800493a:	42ab      	cmp	r3, r5
 800493c:	dc28      	bgt.n	8004990 <_printf_common+0xa4>
 800493e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004942:	6822      	ldr	r2, [r4, #0]
 8004944:	3300      	adds	r3, #0
 8004946:	bf18      	it	ne
 8004948:	2301      	movne	r3, #1
 800494a:	0692      	lsls	r2, r2, #26
 800494c:	d42d      	bmi.n	80049aa <_printf_common+0xbe>
 800494e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004952:	4639      	mov	r1, r7
 8004954:	4630      	mov	r0, r6
 8004956:	47c0      	blx	r8
 8004958:	3001      	adds	r0, #1
 800495a:	d020      	beq.n	800499e <_printf_common+0xb2>
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	68e5      	ldr	r5, [r4, #12]
 8004960:	f8d9 2000 	ldr.w	r2, [r9]
 8004964:	f003 0306 	and.w	r3, r3, #6
 8004968:	2b04      	cmp	r3, #4
 800496a:	bf08      	it	eq
 800496c:	1aad      	subeq	r5, r5, r2
 800496e:	68a3      	ldr	r3, [r4, #8]
 8004970:	6922      	ldr	r2, [r4, #16]
 8004972:	bf0c      	ite	eq
 8004974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004978:	2500      	movne	r5, #0
 800497a:	4293      	cmp	r3, r2
 800497c:	bfc4      	itt	gt
 800497e:	1a9b      	subgt	r3, r3, r2
 8004980:	18ed      	addgt	r5, r5, r3
 8004982:	f04f 0900 	mov.w	r9, #0
 8004986:	341a      	adds	r4, #26
 8004988:	454d      	cmp	r5, r9
 800498a:	d11a      	bne.n	80049c2 <_printf_common+0xd6>
 800498c:	2000      	movs	r0, #0
 800498e:	e008      	b.n	80049a2 <_printf_common+0xb6>
 8004990:	2301      	movs	r3, #1
 8004992:	4652      	mov	r2, sl
 8004994:	4639      	mov	r1, r7
 8004996:	4630      	mov	r0, r6
 8004998:	47c0      	blx	r8
 800499a:	3001      	adds	r0, #1
 800499c:	d103      	bne.n	80049a6 <_printf_common+0xba>
 800499e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a6:	3501      	adds	r5, #1
 80049a8:	e7c3      	b.n	8004932 <_printf_common+0x46>
 80049aa:	18e1      	adds	r1, r4, r3
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	2030      	movs	r0, #48	; 0x30
 80049b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049b4:	4422      	add	r2, r4
 80049b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049be:	3302      	adds	r3, #2
 80049c0:	e7c5      	b.n	800494e <_printf_common+0x62>
 80049c2:	2301      	movs	r3, #1
 80049c4:	4622      	mov	r2, r4
 80049c6:	4639      	mov	r1, r7
 80049c8:	4630      	mov	r0, r6
 80049ca:	47c0      	blx	r8
 80049cc:	3001      	adds	r0, #1
 80049ce:	d0e6      	beq.n	800499e <_printf_common+0xb2>
 80049d0:	f109 0901 	add.w	r9, r9, #1
 80049d4:	e7d8      	b.n	8004988 <_printf_common+0x9c>
	...

080049d8 <_printf_i>:
 80049d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80049e0:	460c      	mov	r4, r1
 80049e2:	7e09      	ldrb	r1, [r1, #24]
 80049e4:	b085      	sub	sp, #20
 80049e6:	296e      	cmp	r1, #110	; 0x6e
 80049e8:	4617      	mov	r7, r2
 80049ea:	4606      	mov	r6, r0
 80049ec:	4698      	mov	r8, r3
 80049ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049f0:	f000 80b3 	beq.w	8004b5a <_printf_i+0x182>
 80049f4:	d822      	bhi.n	8004a3c <_printf_i+0x64>
 80049f6:	2963      	cmp	r1, #99	; 0x63
 80049f8:	d036      	beq.n	8004a68 <_printf_i+0x90>
 80049fa:	d80a      	bhi.n	8004a12 <_printf_i+0x3a>
 80049fc:	2900      	cmp	r1, #0
 80049fe:	f000 80b9 	beq.w	8004b74 <_printf_i+0x19c>
 8004a02:	2958      	cmp	r1, #88	; 0x58
 8004a04:	f000 8083 	beq.w	8004b0e <_printf_i+0x136>
 8004a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004a10:	e032      	b.n	8004a78 <_printf_i+0xa0>
 8004a12:	2964      	cmp	r1, #100	; 0x64
 8004a14:	d001      	beq.n	8004a1a <_printf_i+0x42>
 8004a16:	2969      	cmp	r1, #105	; 0x69
 8004a18:	d1f6      	bne.n	8004a08 <_printf_i+0x30>
 8004a1a:	6820      	ldr	r0, [r4, #0]
 8004a1c:	6813      	ldr	r3, [r2, #0]
 8004a1e:	0605      	lsls	r5, r0, #24
 8004a20:	f103 0104 	add.w	r1, r3, #4
 8004a24:	d52a      	bpl.n	8004a7c <_printf_i+0xa4>
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6011      	str	r1, [r2, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	da03      	bge.n	8004a36 <_printf_i+0x5e>
 8004a2e:	222d      	movs	r2, #45	; 0x2d
 8004a30:	425b      	negs	r3, r3
 8004a32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004a36:	486f      	ldr	r0, [pc, #444]	; (8004bf4 <_printf_i+0x21c>)
 8004a38:	220a      	movs	r2, #10
 8004a3a:	e039      	b.n	8004ab0 <_printf_i+0xd8>
 8004a3c:	2973      	cmp	r1, #115	; 0x73
 8004a3e:	f000 809d 	beq.w	8004b7c <_printf_i+0x1a4>
 8004a42:	d808      	bhi.n	8004a56 <_printf_i+0x7e>
 8004a44:	296f      	cmp	r1, #111	; 0x6f
 8004a46:	d020      	beq.n	8004a8a <_printf_i+0xb2>
 8004a48:	2970      	cmp	r1, #112	; 0x70
 8004a4a:	d1dd      	bne.n	8004a08 <_printf_i+0x30>
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	f043 0320 	orr.w	r3, r3, #32
 8004a52:	6023      	str	r3, [r4, #0]
 8004a54:	e003      	b.n	8004a5e <_printf_i+0x86>
 8004a56:	2975      	cmp	r1, #117	; 0x75
 8004a58:	d017      	beq.n	8004a8a <_printf_i+0xb2>
 8004a5a:	2978      	cmp	r1, #120	; 0x78
 8004a5c:	d1d4      	bne.n	8004a08 <_printf_i+0x30>
 8004a5e:	2378      	movs	r3, #120	; 0x78
 8004a60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a64:	4864      	ldr	r0, [pc, #400]	; (8004bf8 <_printf_i+0x220>)
 8004a66:	e055      	b.n	8004b14 <_printf_i+0x13c>
 8004a68:	6813      	ldr	r3, [r2, #0]
 8004a6a:	1d19      	adds	r1, r3, #4
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6011      	str	r1, [r2, #0]
 8004a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e08c      	b.n	8004b96 <_printf_i+0x1be>
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6011      	str	r1, [r2, #0]
 8004a80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a84:	bf18      	it	ne
 8004a86:	b21b      	sxthne	r3, r3
 8004a88:	e7cf      	b.n	8004a2a <_printf_i+0x52>
 8004a8a:	6813      	ldr	r3, [r2, #0]
 8004a8c:	6825      	ldr	r5, [r4, #0]
 8004a8e:	1d18      	adds	r0, r3, #4
 8004a90:	6010      	str	r0, [r2, #0]
 8004a92:	0628      	lsls	r0, r5, #24
 8004a94:	d501      	bpl.n	8004a9a <_printf_i+0xc2>
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	e002      	b.n	8004aa0 <_printf_i+0xc8>
 8004a9a:	0668      	lsls	r0, r5, #25
 8004a9c:	d5fb      	bpl.n	8004a96 <_printf_i+0xbe>
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	4854      	ldr	r0, [pc, #336]	; (8004bf4 <_printf_i+0x21c>)
 8004aa2:	296f      	cmp	r1, #111	; 0x6f
 8004aa4:	bf14      	ite	ne
 8004aa6:	220a      	movne	r2, #10
 8004aa8:	2208      	moveq	r2, #8
 8004aaa:	2100      	movs	r1, #0
 8004aac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ab0:	6865      	ldr	r5, [r4, #4]
 8004ab2:	60a5      	str	r5, [r4, #8]
 8004ab4:	2d00      	cmp	r5, #0
 8004ab6:	f2c0 8095 	blt.w	8004be4 <_printf_i+0x20c>
 8004aba:	6821      	ldr	r1, [r4, #0]
 8004abc:	f021 0104 	bic.w	r1, r1, #4
 8004ac0:	6021      	str	r1, [r4, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d13d      	bne.n	8004b42 <_printf_i+0x16a>
 8004ac6:	2d00      	cmp	r5, #0
 8004ac8:	f040 808e 	bne.w	8004be8 <_printf_i+0x210>
 8004acc:	4665      	mov	r5, ip
 8004ace:	2a08      	cmp	r2, #8
 8004ad0:	d10b      	bne.n	8004aea <_printf_i+0x112>
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	07db      	lsls	r3, r3, #31
 8004ad6:	d508      	bpl.n	8004aea <_printf_i+0x112>
 8004ad8:	6923      	ldr	r3, [r4, #16]
 8004ada:	6862      	ldr	r2, [r4, #4]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	bfde      	ittt	le
 8004ae0:	2330      	movle	r3, #48	; 0x30
 8004ae2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ae6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004aea:	ebac 0305 	sub.w	r3, ip, r5
 8004aee:	6123      	str	r3, [r4, #16]
 8004af0:	f8cd 8000 	str.w	r8, [sp]
 8004af4:	463b      	mov	r3, r7
 8004af6:	aa03      	add	r2, sp, #12
 8004af8:	4621      	mov	r1, r4
 8004afa:	4630      	mov	r0, r6
 8004afc:	f7ff fef6 	bl	80048ec <_printf_common>
 8004b00:	3001      	adds	r0, #1
 8004b02:	d14d      	bne.n	8004ba0 <_printf_i+0x1c8>
 8004b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b08:	b005      	add	sp, #20
 8004b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b0e:	4839      	ldr	r0, [pc, #228]	; (8004bf4 <_printf_i+0x21c>)
 8004b10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004b14:	6813      	ldr	r3, [r2, #0]
 8004b16:	6821      	ldr	r1, [r4, #0]
 8004b18:	1d1d      	adds	r5, r3, #4
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6015      	str	r5, [r2, #0]
 8004b1e:	060a      	lsls	r2, r1, #24
 8004b20:	d50b      	bpl.n	8004b3a <_printf_i+0x162>
 8004b22:	07ca      	lsls	r2, r1, #31
 8004b24:	bf44      	itt	mi
 8004b26:	f041 0120 	orrmi.w	r1, r1, #32
 8004b2a:	6021      	strmi	r1, [r4, #0]
 8004b2c:	b91b      	cbnz	r3, 8004b36 <_printf_i+0x15e>
 8004b2e:	6822      	ldr	r2, [r4, #0]
 8004b30:	f022 0220 	bic.w	r2, r2, #32
 8004b34:	6022      	str	r2, [r4, #0]
 8004b36:	2210      	movs	r2, #16
 8004b38:	e7b7      	b.n	8004aaa <_printf_i+0xd2>
 8004b3a:	064d      	lsls	r5, r1, #25
 8004b3c:	bf48      	it	mi
 8004b3e:	b29b      	uxthmi	r3, r3
 8004b40:	e7ef      	b.n	8004b22 <_printf_i+0x14a>
 8004b42:	4665      	mov	r5, ip
 8004b44:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b48:	fb02 3311 	mls	r3, r2, r1, r3
 8004b4c:	5cc3      	ldrb	r3, [r0, r3]
 8004b4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004b52:	460b      	mov	r3, r1
 8004b54:	2900      	cmp	r1, #0
 8004b56:	d1f5      	bne.n	8004b44 <_printf_i+0x16c>
 8004b58:	e7b9      	b.n	8004ace <_printf_i+0xf6>
 8004b5a:	6813      	ldr	r3, [r2, #0]
 8004b5c:	6825      	ldr	r5, [r4, #0]
 8004b5e:	6961      	ldr	r1, [r4, #20]
 8004b60:	1d18      	adds	r0, r3, #4
 8004b62:	6010      	str	r0, [r2, #0]
 8004b64:	0628      	lsls	r0, r5, #24
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	d501      	bpl.n	8004b6e <_printf_i+0x196>
 8004b6a:	6019      	str	r1, [r3, #0]
 8004b6c:	e002      	b.n	8004b74 <_printf_i+0x19c>
 8004b6e:	066a      	lsls	r2, r5, #25
 8004b70:	d5fb      	bpl.n	8004b6a <_printf_i+0x192>
 8004b72:	8019      	strh	r1, [r3, #0]
 8004b74:	2300      	movs	r3, #0
 8004b76:	6123      	str	r3, [r4, #16]
 8004b78:	4665      	mov	r5, ip
 8004b7a:	e7b9      	b.n	8004af0 <_printf_i+0x118>
 8004b7c:	6813      	ldr	r3, [r2, #0]
 8004b7e:	1d19      	adds	r1, r3, #4
 8004b80:	6011      	str	r1, [r2, #0]
 8004b82:	681d      	ldr	r5, [r3, #0]
 8004b84:	6862      	ldr	r2, [r4, #4]
 8004b86:	2100      	movs	r1, #0
 8004b88:	4628      	mov	r0, r5
 8004b8a:	f7fb fb31 	bl	80001f0 <memchr>
 8004b8e:	b108      	cbz	r0, 8004b94 <_printf_i+0x1bc>
 8004b90:	1b40      	subs	r0, r0, r5
 8004b92:	6060      	str	r0, [r4, #4]
 8004b94:	6863      	ldr	r3, [r4, #4]
 8004b96:	6123      	str	r3, [r4, #16]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b9e:	e7a7      	b.n	8004af0 <_printf_i+0x118>
 8004ba0:	6923      	ldr	r3, [r4, #16]
 8004ba2:	462a      	mov	r2, r5
 8004ba4:	4639      	mov	r1, r7
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	47c0      	blx	r8
 8004baa:	3001      	adds	r0, #1
 8004bac:	d0aa      	beq.n	8004b04 <_printf_i+0x12c>
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	079b      	lsls	r3, r3, #30
 8004bb2:	d413      	bmi.n	8004bdc <_printf_i+0x204>
 8004bb4:	68e0      	ldr	r0, [r4, #12]
 8004bb6:	9b03      	ldr	r3, [sp, #12]
 8004bb8:	4298      	cmp	r0, r3
 8004bba:	bfb8      	it	lt
 8004bbc:	4618      	movlt	r0, r3
 8004bbe:	e7a3      	b.n	8004b08 <_printf_i+0x130>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	464a      	mov	r2, r9
 8004bc4:	4639      	mov	r1, r7
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	47c0      	blx	r8
 8004bca:	3001      	adds	r0, #1
 8004bcc:	d09a      	beq.n	8004b04 <_printf_i+0x12c>
 8004bce:	3501      	adds	r5, #1
 8004bd0:	68e3      	ldr	r3, [r4, #12]
 8004bd2:	9a03      	ldr	r2, [sp, #12]
 8004bd4:	1a9b      	subs	r3, r3, r2
 8004bd6:	42ab      	cmp	r3, r5
 8004bd8:	dcf2      	bgt.n	8004bc0 <_printf_i+0x1e8>
 8004bda:	e7eb      	b.n	8004bb4 <_printf_i+0x1dc>
 8004bdc:	2500      	movs	r5, #0
 8004bde:	f104 0919 	add.w	r9, r4, #25
 8004be2:	e7f5      	b.n	8004bd0 <_printf_i+0x1f8>
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1ac      	bne.n	8004b42 <_printf_i+0x16a>
 8004be8:	7803      	ldrb	r3, [r0, #0]
 8004bea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bf2:	e76c      	b.n	8004ace <_printf_i+0xf6>
 8004bf4:	0800645a 	.word	0x0800645a
 8004bf8:	0800646b 	.word	0x0800646b

08004bfc <siprintf>:
 8004bfc:	b40e      	push	{r1, r2, r3}
 8004bfe:	b500      	push	{lr}
 8004c00:	b09c      	sub	sp, #112	; 0x70
 8004c02:	ab1d      	add	r3, sp, #116	; 0x74
 8004c04:	9002      	str	r0, [sp, #8]
 8004c06:	9006      	str	r0, [sp, #24]
 8004c08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c0c:	4809      	ldr	r0, [pc, #36]	; (8004c34 <siprintf+0x38>)
 8004c0e:	9107      	str	r1, [sp, #28]
 8004c10:	9104      	str	r1, [sp, #16]
 8004c12:	4909      	ldr	r1, [pc, #36]	; (8004c38 <siprintf+0x3c>)
 8004c14:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c18:	9105      	str	r1, [sp, #20]
 8004c1a:	6800      	ldr	r0, [r0, #0]
 8004c1c:	9301      	str	r3, [sp, #4]
 8004c1e:	a902      	add	r1, sp, #8
 8004c20:	f001 fa6c 	bl	80060fc <_svfiprintf_r>
 8004c24:	9b02      	ldr	r3, [sp, #8]
 8004c26:	2200      	movs	r2, #0
 8004c28:	701a      	strb	r2, [r3, #0]
 8004c2a:	b01c      	add	sp, #112	; 0x70
 8004c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c30:	b003      	add	sp, #12
 8004c32:	4770      	bx	lr
 8004c34:	2000000c 	.word	0x2000000c
 8004c38:	ffff0208 	.word	0xffff0208

08004c3c <strcat>:
 8004c3c:	b510      	push	{r4, lr}
 8004c3e:	4603      	mov	r3, r0
 8004c40:	781a      	ldrb	r2, [r3, #0]
 8004c42:	1c5c      	adds	r4, r3, #1
 8004c44:	b93a      	cbnz	r2, 8004c56 <strcat+0x1a>
 8004c46:	3b01      	subs	r3, #1
 8004c48:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c4c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c50:	2a00      	cmp	r2, #0
 8004c52:	d1f9      	bne.n	8004c48 <strcat+0xc>
 8004c54:	bd10      	pop	{r4, pc}
 8004c56:	4623      	mov	r3, r4
 8004c58:	e7f2      	b.n	8004c40 <strcat+0x4>

08004c5a <strcpy>:
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c60:	f803 2b01 	strb.w	r2, [r3], #1
 8004c64:	2a00      	cmp	r2, #0
 8004c66:	d1f9      	bne.n	8004c5c <strcpy+0x2>
 8004c68:	4770      	bx	lr

08004c6a <quorem>:
 8004c6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6e:	6903      	ldr	r3, [r0, #16]
 8004c70:	690c      	ldr	r4, [r1, #16]
 8004c72:	42a3      	cmp	r3, r4
 8004c74:	4680      	mov	r8, r0
 8004c76:	f2c0 8082 	blt.w	8004d7e <quorem+0x114>
 8004c7a:	3c01      	subs	r4, #1
 8004c7c:	f101 0714 	add.w	r7, r1, #20
 8004c80:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004c84:	f100 0614 	add.w	r6, r0, #20
 8004c88:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004c8c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004c90:	eb06 030c 	add.w	r3, r6, ip
 8004c94:	3501      	adds	r5, #1
 8004c96:	eb07 090c 	add.w	r9, r7, ip
 8004c9a:	9301      	str	r3, [sp, #4]
 8004c9c:	fbb0 f5f5 	udiv	r5, r0, r5
 8004ca0:	b395      	cbz	r5, 8004d08 <quorem+0x9e>
 8004ca2:	f04f 0a00 	mov.w	sl, #0
 8004ca6:	4638      	mov	r0, r7
 8004ca8:	46b6      	mov	lr, r6
 8004caa:	46d3      	mov	fp, sl
 8004cac:	f850 2b04 	ldr.w	r2, [r0], #4
 8004cb0:	b293      	uxth	r3, r2
 8004cb2:	fb05 a303 	mla	r3, r5, r3, sl
 8004cb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	ebab 0303 	sub.w	r3, fp, r3
 8004cc0:	0c12      	lsrs	r2, r2, #16
 8004cc2:	f8de b000 	ldr.w	fp, [lr]
 8004cc6:	fb05 a202 	mla	r2, r5, r2, sl
 8004cca:	fa13 f38b 	uxtah	r3, r3, fp
 8004cce:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004cd2:	fa1f fb82 	uxth.w	fp, r2
 8004cd6:	f8de 2000 	ldr.w	r2, [lr]
 8004cda:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004cde:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ce8:	4581      	cmp	r9, r0
 8004cea:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004cee:	f84e 3b04 	str.w	r3, [lr], #4
 8004cf2:	d2db      	bcs.n	8004cac <quorem+0x42>
 8004cf4:	f856 300c 	ldr.w	r3, [r6, ip]
 8004cf8:	b933      	cbnz	r3, 8004d08 <quorem+0x9e>
 8004cfa:	9b01      	ldr	r3, [sp, #4]
 8004cfc:	3b04      	subs	r3, #4
 8004cfe:	429e      	cmp	r6, r3
 8004d00:	461a      	mov	r2, r3
 8004d02:	d330      	bcc.n	8004d66 <quorem+0xfc>
 8004d04:	f8c8 4010 	str.w	r4, [r8, #16]
 8004d08:	4640      	mov	r0, r8
 8004d0a:	f001 f821 	bl	8005d50 <__mcmp>
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	db25      	blt.n	8004d5e <quorem+0xf4>
 8004d12:	3501      	adds	r5, #1
 8004d14:	4630      	mov	r0, r6
 8004d16:	f04f 0c00 	mov.w	ip, #0
 8004d1a:	f857 2b04 	ldr.w	r2, [r7], #4
 8004d1e:	f8d0 e000 	ldr.w	lr, [r0]
 8004d22:	b293      	uxth	r3, r2
 8004d24:	ebac 0303 	sub.w	r3, ip, r3
 8004d28:	0c12      	lsrs	r2, r2, #16
 8004d2a:	fa13 f38e 	uxtah	r3, r3, lr
 8004d2e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004d32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d3c:	45b9      	cmp	r9, r7
 8004d3e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004d42:	f840 3b04 	str.w	r3, [r0], #4
 8004d46:	d2e8      	bcs.n	8004d1a <quorem+0xb0>
 8004d48:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004d4c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004d50:	b92a      	cbnz	r2, 8004d5e <quorem+0xf4>
 8004d52:	3b04      	subs	r3, #4
 8004d54:	429e      	cmp	r6, r3
 8004d56:	461a      	mov	r2, r3
 8004d58:	d30b      	bcc.n	8004d72 <quorem+0x108>
 8004d5a:	f8c8 4010 	str.w	r4, [r8, #16]
 8004d5e:	4628      	mov	r0, r5
 8004d60:	b003      	add	sp, #12
 8004d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d66:	6812      	ldr	r2, [r2, #0]
 8004d68:	3b04      	subs	r3, #4
 8004d6a:	2a00      	cmp	r2, #0
 8004d6c:	d1ca      	bne.n	8004d04 <quorem+0x9a>
 8004d6e:	3c01      	subs	r4, #1
 8004d70:	e7c5      	b.n	8004cfe <quorem+0x94>
 8004d72:	6812      	ldr	r2, [r2, #0]
 8004d74:	3b04      	subs	r3, #4
 8004d76:	2a00      	cmp	r2, #0
 8004d78:	d1ef      	bne.n	8004d5a <quorem+0xf0>
 8004d7a:	3c01      	subs	r4, #1
 8004d7c:	e7ea      	b.n	8004d54 <quorem+0xea>
 8004d7e:	2000      	movs	r0, #0
 8004d80:	e7ee      	b.n	8004d60 <quorem+0xf6>
 8004d82:	0000      	movs	r0, r0
 8004d84:	0000      	movs	r0, r0
	...

08004d88 <_dtoa_r>:
 8004d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8c:	ec57 6b10 	vmov	r6, r7, d0
 8004d90:	b097      	sub	sp, #92	; 0x5c
 8004d92:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004d94:	9106      	str	r1, [sp, #24]
 8004d96:	4604      	mov	r4, r0
 8004d98:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d9a:	9312      	str	r3, [sp, #72]	; 0x48
 8004d9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004da0:	e9cd 6700 	strd	r6, r7, [sp]
 8004da4:	b93d      	cbnz	r5, 8004db6 <_dtoa_r+0x2e>
 8004da6:	2010      	movs	r0, #16
 8004da8:	f000 fdb4 	bl	8005914 <malloc>
 8004dac:	6260      	str	r0, [r4, #36]	; 0x24
 8004dae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004db2:	6005      	str	r5, [r0, #0]
 8004db4:	60c5      	str	r5, [r0, #12]
 8004db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004db8:	6819      	ldr	r1, [r3, #0]
 8004dba:	b151      	cbz	r1, 8004dd2 <_dtoa_r+0x4a>
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	604a      	str	r2, [r1, #4]
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	4093      	lsls	r3, r2
 8004dc4:	608b      	str	r3, [r1, #8]
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	f000 fde0 	bl	800598c <_Bfree>
 8004dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	1e3b      	subs	r3, r7, #0
 8004dd4:	bfbb      	ittet	lt
 8004dd6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004dda:	9301      	strlt	r3, [sp, #4]
 8004ddc:	2300      	movge	r3, #0
 8004dde:	2201      	movlt	r2, #1
 8004de0:	bfac      	ite	ge
 8004de2:	f8c8 3000 	strge.w	r3, [r8]
 8004de6:	f8c8 2000 	strlt.w	r2, [r8]
 8004dea:	4baf      	ldr	r3, [pc, #700]	; (80050a8 <_dtoa_r+0x320>)
 8004dec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004df0:	ea33 0308 	bics.w	r3, r3, r8
 8004df4:	d114      	bne.n	8004e20 <_dtoa_r+0x98>
 8004df6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004df8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	9b00      	ldr	r3, [sp, #0]
 8004e00:	b923      	cbnz	r3, 8004e0c <_dtoa_r+0x84>
 8004e02:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004e06:	2800      	cmp	r0, #0
 8004e08:	f000 8542 	beq.w	8005890 <_dtoa_r+0xb08>
 8004e0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e0e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80050bc <_dtoa_r+0x334>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 8544 	beq.w	80058a0 <_dtoa_r+0xb18>
 8004e18:	f10b 0303 	add.w	r3, fp, #3
 8004e1c:	f000 bd3e 	b.w	800589c <_dtoa_r+0xb14>
 8004e20:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004e24:	2200      	movs	r2, #0
 8004e26:	2300      	movs	r3, #0
 8004e28:	4630      	mov	r0, r6
 8004e2a:	4639      	mov	r1, r7
 8004e2c:	f7fb fe54 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e30:	4681      	mov	r9, r0
 8004e32:	b168      	cbz	r0, 8004e50 <_dtoa_r+0xc8>
 8004e34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004e36:	2301      	movs	r3, #1
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 8524 	beq.w	800588a <_dtoa_r+0xb02>
 8004e42:	4b9a      	ldr	r3, [pc, #616]	; (80050ac <_dtoa_r+0x324>)
 8004e44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004e46:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	f000 bd28 	b.w	80058a0 <_dtoa_r+0xb18>
 8004e50:	aa14      	add	r2, sp, #80	; 0x50
 8004e52:	a915      	add	r1, sp, #84	; 0x54
 8004e54:	ec47 6b10 	vmov	d0, r6, r7
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f000 fff0 	bl	8005e3e <__d2b>
 8004e5e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004e62:	9004      	str	r0, [sp, #16]
 8004e64:	2d00      	cmp	r5, #0
 8004e66:	d07c      	beq.n	8004f62 <_dtoa_r+0x1da>
 8004e68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004e6c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004e70:	46b2      	mov	sl, r6
 8004e72:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004e76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004e7a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004e7e:	2200      	movs	r2, #0
 8004e80:	4b8b      	ldr	r3, [pc, #556]	; (80050b0 <_dtoa_r+0x328>)
 8004e82:	4650      	mov	r0, sl
 8004e84:	4659      	mov	r1, fp
 8004e86:	f7fb fa07 	bl	8000298 <__aeabi_dsub>
 8004e8a:	a381      	add	r3, pc, #516	; (adr r3, 8005090 <_dtoa_r+0x308>)
 8004e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e90:	f7fb fbba 	bl	8000608 <__aeabi_dmul>
 8004e94:	a380      	add	r3, pc, #512	; (adr r3, 8005098 <_dtoa_r+0x310>)
 8004e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9a:	f7fb f9ff 	bl	800029c <__adddf3>
 8004e9e:	4606      	mov	r6, r0
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	460f      	mov	r7, r1
 8004ea4:	f7fb fb46 	bl	8000534 <__aeabi_i2d>
 8004ea8:	a37d      	add	r3, pc, #500	; (adr r3, 80050a0 <_dtoa_r+0x318>)
 8004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eae:	f7fb fbab 	bl	8000608 <__aeabi_dmul>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	4639      	mov	r1, r7
 8004eba:	f7fb f9ef 	bl	800029c <__adddf3>
 8004ebe:	4606      	mov	r6, r0
 8004ec0:	460f      	mov	r7, r1
 8004ec2:	f7fb fe51 	bl	8000b68 <__aeabi_d2iz>
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	4682      	mov	sl, r0
 8004eca:	2300      	movs	r3, #0
 8004ecc:	4630      	mov	r0, r6
 8004ece:	4639      	mov	r1, r7
 8004ed0:	f7fb fe0c 	bl	8000aec <__aeabi_dcmplt>
 8004ed4:	b148      	cbz	r0, 8004eea <_dtoa_r+0x162>
 8004ed6:	4650      	mov	r0, sl
 8004ed8:	f7fb fb2c 	bl	8000534 <__aeabi_i2d>
 8004edc:	4632      	mov	r2, r6
 8004ede:	463b      	mov	r3, r7
 8004ee0:	f7fb fdfa 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ee4:	b908      	cbnz	r0, 8004eea <_dtoa_r+0x162>
 8004ee6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004eea:	f1ba 0f16 	cmp.w	sl, #22
 8004eee:	d859      	bhi.n	8004fa4 <_dtoa_r+0x21c>
 8004ef0:	4970      	ldr	r1, [pc, #448]	; (80050b4 <_dtoa_r+0x32c>)
 8004ef2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004ef6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004efa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004efe:	f7fb fe13 	bl	8000b28 <__aeabi_dcmpgt>
 8004f02:	2800      	cmp	r0, #0
 8004f04:	d050      	beq.n	8004fa8 <_dtoa_r+0x220>
 8004f06:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004f10:	1b5d      	subs	r5, r3, r5
 8004f12:	f1b5 0801 	subs.w	r8, r5, #1
 8004f16:	bf49      	itett	mi
 8004f18:	f1c5 0301 	rsbmi	r3, r5, #1
 8004f1c:	2300      	movpl	r3, #0
 8004f1e:	9305      	strmi	r3, [sp, #20]
 8004f20:	f04f 0800 	movmi.w	r8, #0
 8004f24:	bf58      	it	pl
 8004f26:	9305      	strpl	r3, [sp, #20]
 8004f28:	f1ba 0f00 	cmp.w	sl, #0
 8004f2c:	db3e      	blt.n	8004fac <_dtoa_r+0x224>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	44d0      	add	r8, sl
 8004f32:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004f36:	9307      	str	r3, [sp, #28]
 8004f38:	9b06      	ldr	r3, [sp, #24]
 8004f3a:	2b09      	cmp	r3, #9
 8004f3c:	f200 8090 	bhi.w	8005060 <_dtoa_r+0x2d8>
 8004f40:	2b05      	cmp	r3, #5
 8004f42:	bfc4      	itt	gt
 8004f44:	3b04      	subgt	r3, #4
 8004f46:	9306      	strgt	r3, [sp, #24]
 8004f48:	9b06      	ldr	r3, [sp, #24]
 8004f4a:	f1a3 0302 	sub.w	r3, r3, #2
 8004f4e:	bfcc      	ite	gt
 8004f50:	2500      	movgt	r5, #0
 8004f52:	2501      	movle	r5, #1
 8004f54:	2b03      	cmp	r3, #3
 8004f56:	f200 808f 	bhi.w	8005078 <_dtoa_r+0x2f0>
 8004f5a:	e8df f003 	tbb	[pc, r3]
 8004f5e:	7f7d      	.short	0x7f7d
 8004f60:	7131      	.short	0x7131
 8004f62:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004f66:	441d      	add	r5, r3
 8004f68:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004f6c:	2820      	cmp	r0, #32
 8004f6e:	dd13      	ble.n	8004f98 <_dtoa_r+0x210>
 8004f70:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004f74:	9b00      	ldr	r3, [sp, #0]
 8004f76:	fa08 f800 	lsl.w	r8, r8, r0
 8004f7a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004f7e:	fa23 f000 	lsr.w	r0, r3, r0
 8004f82:	ea48 0000 	orr.w	r0, r8, r0
 8004f86:	f7fb fac5 	bl	8000514 <__aeabi_ui2d>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	4682      	mov	sl, r0
 8004f8e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004f92:	3d01      	subs	r5, #1
 8004f94:	9313      	str	r3, [sp, #76]	; 0x4c
 8004f96:	e772      	b.n	8004e7e <_dtoa_r+0xf6>
 8004f98:	9b00      	ldr	r3, [sp, #0]
 8004f9a:	f1c0 0020 	rsb	r0, r0, #32
 8004f9e:	fa03 f000 	lsl.w	r0, r3, r0
 8004fa2:	e7f0      	b.n	8004f86 <_dtoa_r+0x1fe>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e7b1      	b.n	8004f0c <_dtoa_r+0x184>
 8004fa8:	900f      	str	r0, [sp, #60]	; 0x3c
 8004faa:	e7b0      	b.n	8004f0e <_dtoa_r+0x186>
 8004fac:	9b05      	ldr	r3, [sp, #20]
 8004fae:	eba3 030a 	sub.w	r3, r3, sl
 8004fb2:	9305      	str	r3, [sp, #20]
 8004fb4:	f1ca 0300 	rsb	r3, sl, #0
 8004fb8:	9307      	str	r3, [sp, #28]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	930e      	str	r3, [sp, #56]	; 0x38
 8004fbe:	e7bb      	b.n	8004f38 <_dtoa_r+0x1b0>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	930a      	str	r3, [sp, #40]	; 0x28
 8004fc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	dd59      	ble.n	800507e <_dtoa_r+0x2f6>
 8004fca:	9302      	str	r3, [sp, #8]
 8004fcc:	4699      	mov	r9, r3
 8004fce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	6072      	str	r2, [r6, #4]
 8004fd4:	2204      	movs	r2, #4
 8004fd6:	f102 0014 	add.w	r0, r2, #20
 8004fda:	4298      	cmp	r0, r3
 8004fdc:	6871      	ldr	r1, [r6, #4]
 8004fde:	d953      	bls.n	8005088 <_dtoa_r+0x300>
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f000 fc9f 	bl	8005924 <_Balloc>
 8004fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fe8:	6030      	str	r0, [r6, #0]
 8004fea:	f1b9 0f0e 	cmp.w	r9, #14
 8004fee:	f8d3 b000 	ldr.w	fp, [r3]
 8004ff2:	f200 80e6 	bhi.w	80051c2 <_dtoa_r+0x43a>
 8004ff6:	2d00      	cmp	r5, #0
 8004ff8:	f000 80e3 	beq.w	80051c2 <_dtoa_r+0x43a>
 8004ffc:	ed9d 7b00 	vldr	d7, [sp]
 8005000:	f1ba 0f00 	cmp.w	sl, #0
 8005004:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005008:	dd74      	ble.n	80050f4 <_dtoa_r+0x36c>
 800500a:	4a2a      	ldr	r2, [pc, #168]	; (80050b4 <_dtoa_r+0x32c>)
 800500c:	f00a 030f 	and.w	r3, sl, #15
 8005010:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005014:	ed93 7b00 	vldr	d7, [r3]
 8005018:	ea4f 162a 	mov.w	r6, sl, asr #4
 800501c:	06f0      	lsls	r0, r6, #27
 800501e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005022:	d565      	bpl.n	80050f0 <_dtoa_r+0x368>
 8005024:	4b24      	ldr	r3, [pc, #144]	; (80050b8 <_dtoa_r+0x330>)
 8005026:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800502a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800502e:	f7fb fc15 	bl	800085c <__aeabi_ddiv>
 8005032:	e9cd 0100 	strd	r0, r1, [sp]
 8005036:	f006 060f 	and.w	r6, r6, #15
 800503a:	2503      	movs	r5, #3
 800503c:	4f1e      	ldr	r7, [pc, #120]	; (80050b8 <_dtoa_r+0x330>)
 800503e:	e04c      	b.n	80050da <_dtoa_r+0x352>
 8005040:	2301      	movs	r3, #1
 8005042:	930a      	str	r3, [sp, #40]	; 0x28
 8005044:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005046:	4453      	add	r3, sl
 8005048:	f103 0901 	add.w	r9, r3, #1
 800504c:	9302      	str	r3, [sp, #8]
 800504e:	464b      	mov	r3, r9
 8005050:	2b01      	cmp	r3, #1
 8005052:	bfb8      	it	lt
 8005054:	2301      	movlt	r3, #1
 8005056:	e7ba      	b.n	8004fce <_dtoa_r+0x246>
 8005058:	2300      	movs	r3, #0
 800505a:	e7b2      	b.n	8004fc2 <_dtoa_r+0x23a>
 800505c:	2300      	movs	r3, #0
 800505e:	e7f0      	b.n	8005042 <_dtoa_r+0x2ba>
 8005060:	2501      	movs	r5, #1
 8005062:	2300      	movs	r3, #0
 8005064:	9306      	str	r3, [sp, #24]
 8005066:	950a      	str	r5, [sp, #40]	; 0x28
 8005068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800506c:	9302      	str	r3, [sp, #8]
 800506e:	4699      	mov	r9, r3
 8005070:	2200      	movs	r2, #0
 8005072:	2312      	movs	r3, #18
 8005074:	920b      	str	r2, [sp, #44]	; 0x2c
 8005076:	e7aa      	b.n	8004fce <_dtoa_r+0x246>
 8005078:	2301      	movs	r3, #1
 800507a:	930a      	str	r3, [sp, #40]	; 0x28
 800507c:	e7f4      	b.n	8005068 <_dtoa_r+0x2e0>
 800507e:	2301      	movs	r3, #1
 8005080:	9302      	str	r3, [sp, #8]
 8005082:	4699      	mov	r9, r3
 8005084:	461a      	mov	r2, r3
 8005086:	e7f5      	b.n	8005074 <_dtoa_r+0x2ec>
 8005088:	3101      	adds	r1, #1
 800508a:	6071      	str	r1, [r6, #4]
 800508c:	0052      	lsls	r2, r2, #1
 800508e:	e7a2      	b.n	8004fd6 <_dtoa_r+0x24e>
 8005090:	636f4361 	.word	0x636f4361
 8005094:	3fd287a7 	.word	0x3fd287a7
 8005098:	8b60c8b3 	.word	0x8b60c8b3
 800509c:	3fc68a28 	.word	0x3fc68a28
 80050a0:	509f79fb 	.word	0x509f79fb
 80050a4:	3fd34413 	.word	0x3fd34413
 80050a8:	7ff00000 	.word	0x7ff00000
 80050ac:	08006459 	.word	0x08006459
 80050b0:	3ff80000 	.word	0x3ff80000
 80050b4:	080064b8 	.word	0x080064b8
 80050b8:	08006490 	.word	0x08006490
 80050bc:	08006485 	.word	0x08006485
 80050c0:	07f1      	lsls	r1, r6, #31
 80050c2:	d508      	bpl.n	80050d6 <_dtoa_r+0x34e>
 80050c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80050c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050cc:	f7fb fa9c 	bl	8000608 <__aeabi_dmul>
 80050d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80050d4:	3501      	adds	r5, #1
 80050d6:	1076      	asrs	r6, r6, #1
 80050d8:	3708      	adds	r7, #8
 80050da:	2e00      	cmp	r6, #0
 80050dc:	d1f0      	bne.n	80050c0 <_dtoa_r+0x338>
 80050de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80050e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050e6:	f7fb fbb9 	bl	800085c <__aeabi_ddiv>
 80050ea:	e9cd 0100 	strd	r0, r1, [sp]
 80050ee:	e01a      	b.n	8005126 <_dtoa_r+0x39e>
 80050f0:	2502      	movs	r5, #2
 80050f2:	e7a3      	b.n	800503c <_dtoa_r+0x2b4>
 80050f4:	f000 80a0 	beq.w	8005238 <_dtoa_r+0x4b0>
 80050f8:	f1ca 0600 	rsb	r6, sl, #0
 80050fc:	4b9f      	ldr	r3, [pc, #636]	; (800537c <_dtoa_r+0x5f4>)
 80050fe:	4fa0      	ldr	r7, [pc, #640]	; (8005380 <_dtoa_r+0x5f8>)
 8005100:	f006 020f 	and.w	r2, r6, #15
 8005104:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005110:	f7fb fa7a 	bl	8000608 <__aeabi_dmul>
 8005114:	e9cd 0100 	strd	r0, r1, [sp]
 8005118:	1136      	asrs	r6, r6, #4
 800511a:	2300      	movs	r3, #0
 800511c:	2502      	movs	r5, #2
 800511e:	2e00      	cmp	r6, #0
 8005120:	d17f      	bne.n	8005222 <_dtoa_r+0x49a>
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1e1      	bne.n	80050ea <_dtoa_r+0x362>
 8005126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 8087 	beq.w	800523c <_dtoa_r+0x4b4>
 800512e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005132:	2200      	movs	r2, #0
 8005134:	4b93      	ldr	r3, [pc, #588]	; (8005384 <_dtoa_r+0x5fc>)
 8005136:	4630      	mov	r0, r6
 8005138:	4639      	mov	r1, r7
 800513a:	f7fb fcd7 	bl	8000aec <__aeabi_dcmplt>
 800513e:	2800      	cmp	r0, #0
 8005140:	d07c      	beq.n	800523c <_dtoa_r+0x4b4>
 8005142:	f1b9 0f00 	cmp.w	r9, #0
 8005146:	d079      	beq.n	800523c <_dtoa_r+0x4b4>
 8005148:	9b02      	ldr	r3, [sp, #8]
 800514a:	2b00      	cmp	r3, #0
 800514c:	dd35      	ble.n	80051ba <_dtoa_r+0x432>
 800514e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005152:	9308      	str	r3, [sp, #32]
 8005154:	4639      	mov	r1, r7
 8005156:	2200      	movs	r2, #0
 8005158:	4b8b      	ldr	r3, [pc, #556]	; (8005388 <_dtoa_r+0x600>)
 800515a:	4630      	mov	r0, r6
 800515c:	f7fb fa54 	bl	8000608 <__aeabi_dmul>
 8005160:	e9cd 0100 	strd	r0, r1, [sp]
 8005164:	9f02      	ldr	r7, [sp, #8]
 8005166:	3501      	adds	r5, #1
 8005168:	4628      	mov	r0, r5
 800516a:	f7fb f9e3 	bl	8000534 <__aeabi_i2d>
 800516e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005172:	f7fb fa49 	bl	8000608 <__aeabi_dmul>
 8005176:	2200      	movs	r2, #0
 8005178:	4b84      	ldr	r3, [pc, #528]	; (800538c <_dtoa_r+0x604>)
 800517a:	f7fb f88f 	bl	800029c <__adddf3>
 800517e:	4605      	mov	r5, r0
 8005180:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005184:	2f00      	cmp	r7, #0
 8005186:	d15d      	bne.n	8005244 <_dtoa_r+0x4bc>
 8005188:	2200      	movs	r2, #0
 800518a:	4b81      	ldr	r3, [pc, #516]	; (8005390 <_dtoa_r+0x608>)
 800518c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005190:	f7fb f882 	bl	8000298 <__aeabi_dsub>
 8005194:	462a      	mov	r2, r5
 8005196:	4633      	mov	r3, r6
 8005198:	e9cd 0100 	strd	r0, r1, [sp]
 800519c:	f7fb fcc4 	bl	8000b28 <__aeabi_dcmpgt>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	f040 8288 	bne.w	80056b6 <_dtoa_r+0x92e>
 80051a6:	462a      	mov	r2, r5
 80051a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80051ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051b0:	f7fb fc9c 	bl	8000aec <__aeabi_dcmplt>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	f040 827c 	bne.w	80056b2 <_dtoa_r+0x92a>
 80051ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051be:	e9cd 2300 	strd	r2, r3, [sp]
 80051c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f2c0 8150 	blt.w	800546a <_dtoa_r+0x6e2>
 80051ca:	f1ba 0f0e 	cmp.w	sl, #14
 80051ce:	f300 814c 	bgt.w	800546a <_dtoa_r+0x6e2>
 80051d2:	4b6a      	ldr	r3, [pc, #424]	; (800537c <_dtoa_r+0x5f4>)
 80051d4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80051d8:	ed93 7b00 	vldr	d7, [r3]
 80051dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051de:	2b00      	cmp	r3, #0
 80051e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80051e4:	f280 80d8 	bge.w	8005398 <_dtoa_r+0x610>
 80051e8:	f1b9 0f00 	cmp.w	r9, #0
 80051ec:	f300 80d4 	bgt.w	8005398 <_dtoa_r+0x610>
 80051f0:	f040 825e 	bne.w	80056b0 <_dtoa_r+0x928>
 80051f4:	2200      	movs	r2, #0
 80051f6:	4b66      	ldr	r3, [pc, #408]	; (8005390 <_dtoa_r+0x608>)
 80051f8:	ec51 0b17 	vmov	r0, r1, d7
 80051fc:	f7fb fa04 	bl	8000608 <__aeabi_dmul>
 8005200:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005204:	f7fb fc86 	bl	8000b14 <__aeabi_dcmpge>
 8005208:	464f      	mov	r7, r9
 800520a:	464e      	mov	r6, r9
 800520c:	2800      	cmp	r0, #0
 800520e:	f040 8234 	bne.w	800567a <_dtoa_r+0x8f2>
 8005212:	2331      	movs	r3, #49	; 0x31
 8005214:	f10b 0501 	add.w	r5, fp, #1
 8005218:	f88b 3000 	strb.w	r3, [fp]
 800521c:	f10a 0a01 	add.w	sl, sl, #1
 8005220:	e22f      	b.n	8005682 <_dtoa_r+0x8fa>
 8005222:	07f2      	lsls	r2, r6, #31
 8005224:	d505      	bpl.n	8005232 <_dtoa_r+0x4aa>
 8005226:	e9d7 2300 	ldrd	r2, r3, [r7]
 800522a:	f7fb f9ed 	bl	8000608 <__aeabi_dmul>
 800522e:	3501      	adds	r5, #1
 8005230:	2301      	movs	r3, #1
 8005232:	1076      	asrs	r6, r6, #1
 8005234:	3708      	adds	r7, #8
 8005236:	e772      	b.n	800511e <_dtoa_r+0x396>
 8005238:	2502      	movs	r5, #2
 800523a:	e774      	b.n	8005126 <_dtoa_r+0x39e>
 800523c:	f8cd a020 	str.w	sl, [sp, #32]
 8005240:	464f      	mov	r7, r9
 8005242:	e791      	b.n	8005168 <_dtoa_r+0x3e0>
 8005244:	4b4d      	ldr	r3, [pc, #308]	; (800537c <_dtoa_r+0x5f4>)
 8005246:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800524a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800524e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005250:	2b00      	cmp	r3, #0
 8005252:	d047      	beq.n	80052e4 <_dtoa_r+0x55c>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	2000      	movs	r0, #0
 800525a:	494e      	ldr	r1, [pc, #312]	; (8005394 <_dtoa_r+0x60c>)
 800525c:	f7fb fafe 	bl	800085c <__aeabi_ddiv>
 8005260:	462a      	mov	r2, r5
 8005262:	4633      	mov	r3, r6
 8005264:	f7fb f818 	bl	8000298 <__aeabi_dsub>
 8005268:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800526c:	465d      	mov	r5, fp
 800526e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005272:	f7fb fc79 	bl	8000b68 <__aeabi_d2iz>
 8005276:	4606      	mov	r6, r0
 8005278:	f7fb f95c 	bl	8000534 <__aeabi_i2d>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005284:	f7fb f808 	bl	8000298 <__aeabi_dsub>
 8005288:	3630      	adds	r6, #48	; 0x30
 800528a:	f805 6b01 	strb.w	r6, [r5], #1
 800528e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005292:	e9cd 0100 	strd	r0, r1, [sp]
 8005296:	f7fb fc29 	bl	8000aec <__aeabi_dcmplt>
 800529a:	2800      	cmp	r0, #0
 800529c:	d163      	bne.n	8005366 <_dtoa_r+0x5de>
 800529e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052a2:	2000      	movs	r0, #0
 80052a4:	4937      	ldr	r1, [pc, #220]	; (8005384 <_dtoa_r+0x5fc>)
 80052a6:	f7fa fff7 	bl	8000298 <__aeabi_dsub>
 80052aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80052ae:	f7fb fc1d 	bl	8000aec <__aeabi_dcmplt>
 80052b2:	2800      	cmp	r0, #0
 80052b4:	f040 80b7 	bne.w	8005426 <_dtoa_r+0x69e>
 80052b8:	eba5 030b 	sub.w	r3, r5, fp
 80052bc:	429f      	cmp	r7, r3
 80052be:	f77f af7c 	ble.w	80051ba <_dtoa_r+0x432>
 80052c2:	2200      	movs	r2, #0
 80052c4:	4b30      	ldr	r3, [pc, #192]	; (8005388 <_dtoa_r+0x600>)
 80052c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052ca:	f7fb f99d 	bl	8000608 <__aeabi_dmul>
 80052ce:	2200      	movs	r2, #0
 80052d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80052d4:	4b2c      	ldr	r3, [pc, #176]	; (8005388 <_dtoa_r+0x600>)
 80052d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052da:	f7fb f995 	bl	8000608 <__aeabi_dmul>
 80052de:	e9cd 0100 	strd	r0, r1, [sp]
 80052e2:	e7c4      	b.n	800526e <_dtoa_r+0x4e6>
 80052e4:	462a      	mov	r2, r5
 80052e6:	4633      	mov	r3, r6
 80052e8:	f7fb f98e 	bl	8000608 <__aeabi_dmul>
 80052ec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80052f0:	eb0b 0507 	add.w	r5, fp, r7
 80052f4:	465e      	mov	r6, fp
 80052f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052fa:	f7fb fc35 	bl	8000b68 <__aeabi_d2iz>
 80052fe:	4607      	mov	r7, r0
 8005300:	f7fb f918 	bl	8000534 <__aeabi_i2d>
 8005304:	3730      	adds	r7, #48	; 0x30
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800530e:	f7fa ffc3 	bl	8000298 <__aeabi_dsub>
 8005312:	f806 7b01 	strb.w	r7, [r6], #1
 8005316:	42ae      	cmp	r6, r5
 8005318:	e9cd 0100 	strd	r0, r1, [sp]
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	d126      	bne.n	8005370 <_dtoa_r+0x5e8>
 8005322:	4b1c      	ldr	r3, [pc, #112]	; (8005394 <_dtoa_r+0x60c>)
 8005324:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005328:	f7fa ffb8 	bl	800029c <__adddf3>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005334:	f7fb fbf8 	bl	8000b28 <__aeabi_dcmpgt>
 8005338:	2800      	cmp	r0, #0
 800533a:	d174      	bne.n	8005426 <_dtoa_r+0x69e>
 800533c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005340:	2000      	movs	r0, #0
 8005342:	4914      	ldr	r1, [pc, #80]	; (8005394 <_dtoa_r+0x60c>)
 8005344:	f7fa ffa8 	bl	8000298 <__aeabi_dsub>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005350:	f7fb fbcc 	bl	8000aec <__aeabi_dcmplt>
 8005354:	2800      	cmp	r0, #0
 8005356:	f43f af30 	beq.w	80051ba <_dtoa_r+0x432>
 800535a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800535e:	2b30      	cmp	r3, #48	; 0x30
 8005360:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005364:	d002      	beq.n	800536c <_dtoa_r+0x5e4>
 8005366:	f8dd a020 	ldr.w	sl, [sp, #32]
 800536a:	e04a      	b.n	8005402 <_dtoa_r+0x67a>
 800536c:	4615      	mov	r5, r2
 800536e:	e7f4      	b.n	800535a <_dtoa_r+0x5d2>
 8005370:	4b05      	ldr	r3, [pc, #20]	; (8005388 <_dtoa_r+0x600>)
 8005372:	f7fb f949 	bl	8000608 <__aeabi_dmul>
 8005376:	e9cd 0100 	strd	r0, r1, [sp]
 800537a:	e7bc      	b.n	80052f6 <_dtoa_r+0x56e>
 800537c:	080064b8 	.word	0x080064b8
 8005380:	08006490 	.word	0x08006490
 8005384:	3ff00000 	.word	0x3ff00000
 8005388:	40240000 	.word	0x40240000
 800538c:	401c0000 	.word	0x401c0000
 8005390:	40140000 	.word	0x40140000
 8005394:	3fe00000 	.word	0x3fe00000
 8005398:	e9dd 6700 	ldrd	r6, r7, [sp]
 800539c:	465d      	mov	r5, fp
 800539e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053a2:	4630      	mov	r0, r6
 80053a4:	4639      	mov	r1, r7
 80053a6:	f7fb fa59 	bl	800085c <__aeabi_ddiv>
 80053aa:	f7fb fbdd 	bl	8000b68 <__aeabi_d2iz>
 80053ae:	4680      	mov	r8, r0
 80053b0:	f7fb f8c0 	bl	8000534 <__aeabi_i2d>
 80053b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053b8:	f7fb f926 	bl	8000608 <__aeabi_dmul>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	4630      	mov	r0, r6
 80053c2:	4639      	mov	r1, r7
 80053c4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80053c8:	f7fa ff66 	bl	8000298 <__aeabi_dsub>
 80053cc:	f805 6b01 	strb.w	r6, [r5], #1
 80053d0:	eba5 060b 	sub.w	r6, r5, fp
 80053d4:	45b1      	cmp	r9, r6
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	d139      	bne.n	8005450 <_dtoa_r+0x6c8>
 80053dc:	f7fa ff5e 	bl	800029c <__adddf3>
 80053e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053e4:	4606      	mov	r6, r0
 80053e6:	460f      	mov	r7, r1
 80053e8:	f7fb fb9e 	bl	8000b28 <__aeabi_dcmpgt>
 80053ec:	b9c8      	cbnz	r0, 8005422 <_dtoa_r+0x69a>
 80053ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053f2:	4630      	mov	r0, r6
 80053f4:	4639      	mov	r1, r7
 80053f6:	f7fb fb6f 	bl	8000ad8 <__aeabi_dcmpeq>
 80053fa:	b110      	cbz	r0, 8005402 <_dtoa_r+0x67a>
 80053fc:	f018 0f01 	tst.w	r8, #1
 8005400:	d10f      	bne.n	8005422 <_dtoa_r+0x69a>
 8005402:	9904      	ldr	r1, [sp, #16]
 8005404:	4620      	mov	r0, r4
 8005406:	f000 fac1 	bl	800598c <_Bfree>
 800540a:	2300      	movs	r3, #0
 800540c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800540e:	702b      	strb	r3, [r5, #0]
 8005410:	f10a 0301 	add.w	r3, sl, #1
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 8241 	beq.w	80058a0 <_dtoa_r+0xb18>
 800541e:	601d      	str	r5, [r3, #0]
 8005420:	e23e      	b.n	80058a0 <_dtoa_r+0xb18>
 8005422:	f8cd a020 	str.w	sl, [sp, #32]
 8005426:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800542a:	2a39      	cmp	r2, #57	; 0x39
 800542c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8005430:	d108      	bne.n	8005444 <_dtoa_r+0x6bc>
 8005432:	459b      	cmp	fp, r3
 8005434:	d10a      	bne.n	800544c <_dtoa_r+0x6c4>
 8005436:	9b08      	ldr	r3, [sp, #32]
 8005438:	3301      	adds	r3, #1
 800543a:	9308      	str	r3, [sp, #32]
 800543c:	2330      	movs	r3, #48	; 0x30
 800543e:	f88b 3000 	strb.w	r3, [fp]
 8005442:	465b      	mov	r3, fp
 8005444:	781a      	ldrb	r2, [r3, #0]
 8005446:	3201      	adds	r2, #1
 8005448:	701a      	strb	r2, [r3, #0]
 800544a:	e78c      	b.n	8005366 <_dtoa_r+0x5de>
 800544c:	461d      	mov	r5, r3
 800544e:	e7ea      	b.n	8005426 <_dtoa_r+0x69e>
 8005450:	2200      	movs	r2, #0
 8005452:	4b9b      	ldr	r3, [pc, #620]	; (80056c0 <_dtoa_r+0x938>)
 8005454:	f7fb f8d8 	bl	8000608 <__aeabi_dmul>
 8005458:	2200      	movs	r2, #0
 800545a:	2300      	movs	r3, #0
 800545c:	4606      	mov	r6, r0
 800545e:	460f      	mov	r7, r1
 8005460:	f7fb fb3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005464:	2800      	cmp	r0, #0
 8005466:	d09a      	beq.n	800539e <_dtoa_r+0x616>
 8005468:	e7cb      	b.n	8005402 <_dtoa_r+0x67a>
 800546a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800546c:	2a00      	cmp	r2, #0
 800546e:	f000 808b 	beq.w	8005588 <_dtoa_r+0x800>
 8005472:	9a06      	ldr	r2, [sp, #24]
 8005474:	2a01      	cmp	r2, #1
 8005476:	dc6e      	bgt.n	8005556 <_dtoa_r+0x7ce>
 8005478:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800547a:	2a00      	cmp	r2, #0
 800547c:	d067      	beq.n	800554e <_dtoa_r+0x7c6>
 800547e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005482:	9f07      	ldr	r7, [sp, #28]
 8005484:	9d05      	ldr	r5, [sp, #20]
 8005486:	9a05      	ldr	r2, [sp, #20]
 8005488:	2101      	movs	r1, #1
 800548a:	441a      	add	r2, r3
 800548c:	4620      	mov	r0, r4
 800548e:	9205      	str	r2, [sp, #20]
 8005490:	4498      	add	r8, r3
 8005492:	f000 fb1b 	bl	8005acc <__i2b>
 8005496:	4606      	mov	r6, r0
 8005498:	2d00      	cmp	r5, #0
 800549a:	dd0c      	ble.n	80054b6 <_dtoa_r+0x72e>
 800549c:	f1b8 0f00 	cmp.w	r8, #0
 80054a0:	dd09      	ble.n	80054b6 <_dtoa_r+0x72e>
 80054a2:	4545      	cmp	r5, r8
 80054a4:	9a05      	ldr	r2, [sp, #20]
 80054a6:	462b      	mov	r3, r5
 80054a8:	bfa8      	it	ge
 80054aa:	4643      	movge	r3, r8
 80054ac:	1ad2      	subs	r2, r2, r3
 80054ae:	9205      	str	r2, [sp, #20]
 80054b0:	1aed      	subs	r5, r5, r3
 80054b2:	eba8 0803 	sub.w	r8, r8, r3
 80054b6:	9b07      	ldr	r3, [sp, #28]
 80054b8:	b1eb      	cbz	r3, 80054f6 <_dtoa_r+0x76e>
 80054ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d067      	beq.n	8005590 <_dtoa_r+0x808>
 80054c0:	b18f      	cbz	r7, 80054e6 <_dtoa_r+0x75e>
 80054c2:	4631      	mov	r1, r6
 80054c4:	463a      	mov	r2, r7
 80054c6:	4620      	mov	r0, r4
 80054c8:	f000 fba0 	bl	8005c0c <__pow5mult>
 80054cc:	9a04      	ldr	r2, [sp, #16]
 80054ce:	4601      	mov	r1, r0
 80054d0:	4606      	mov	r6, r0
 80054d2:	4620      	mov	r0, r4
 80054d4:	f000 fb03 	bl	8005ade <__multiply>
 80054d8:	9904      	ldr	r1, [sp, #16]
 80054da:	9008      	str	r0, [sp, #32]
 80054dc:	4620      	mov	r0, r4
 80054de:	f000 fa55 	bl	800598c <_Bfree>
 80054e2:	9b08      	ldr	r3, [sp, #32]
 80054e4:	9304      	str	r3, [sp, #16]
 80054e6:	9b07      	ldr	r3, [sp, #28]
 80054e8:	1bda      	subs	r2, r3, r7
 80054ea:	d004      	beq.n	80054f6 <_dtoa_r+0x76e>
 80054ec:	9904      	ldr	r1, [sp, #16]
 80054ee:	4620      	mov	r0, r4
 80054f0:	f000 fb8c 	bl	8005c0c <__pow5mult>
 80054f4:	9004      	str	r0, [sp, #16]
 80054f6:	2101      	movs	r1, #1
 80054f8:	4620      	mov	r0, r4
 80054fa:	f000 fae7 	bl	8005acc <__i2b>
 80054fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005500:	4607      	mov	r7, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 81d0 	beq.w	80058a8 <_dtoa_r+0xb20>
 8005508:	461a      	mov	r2, r3
 800550a:	4601      	mov	r1, r0
 800550c:	4620      	mov	r0, r4
 800550e:	f000 fb7d 	bl	8005c0c <__pow5mult>
 8005512:	9b06      	ldr	r3, [sp, #24]
 8005514:	2b01      	cmp	r3, #1
 8005516:	4607      	mov	r7, r0
 8005518:	dc40      	bgt.n	800559c <_dtoa_r+0x814>
 800551a:	9b00      	ldr	r3, [sp, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d139      	bne.n	8005594 <_dtoa_r+0x80c>
 8005520:	9b01      	ldr	r3, [sp, #4]
 8005522:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005526:	2b00      	cmp	r3, #0
 8005528:	d136      	bne.n	8005598 <_dtoa_r+0x810>
 800552a:	9b01      	ldr	r3, [sp, #4]
 800552c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005530:	0d1b      	lsrs	r3, r3, #20
 8005532:	051b      	lsls	r3, r3, #20
 8005534:	b12b      	cbz	r3, 8005542 <_dtoa_r+0x7ba>
 8005536:	9b05      	ldr	r3, [sp, #20]
 8005538:	3301      	adds	r3, #1
 800553a:	9305      	str	r3, [sp, #20]
 800553c:	f108 0801 	add.w	r8, r8, #1
 8005540:	2301      	movs	r3, #1
 8005542:	9307      	str	r3, [sp, #28]
 8005544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005546:	2b00      	cmp	r3, #0
 8005548:	d12a      	bne.n	80055a0 <_dtoa_r+0x818>
 800554a:	2001      	movs	r0, #1
 800554c:	e030      	b.n	80055b0 <_dtoa_r+0x828>
 800554e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005550:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005554:	e795      	b.n	8005482 <_dtoa_r+0x6fa>
 8005556:	9b07      	ldr	r3, [sp, #28]
 8005558:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800555c:	42bb      	cmp	r3, r7
 800555e:	bfbf      	itttt	lt
 8005560:	9b07      	ldrlt	r3, [sp, #28]
 8005562:	9707      	strlt	r7, [sp, #28]
 8005564:	1afa      	sublt	r2, r7, r3
 8005566:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005568:	bfbb      	ittet	lt
 800556a:	189b      	addlt	r3, r3, r2
 800556c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800556e:	1bdf      	subge	r7, r3, r7
 8005570:	2700      	movlt	r7, #0
 8005572:	f1b9 0f00 	cmp.w	r9, #0
 8005576:	bfb5      	itete	lt
 8005578:	9b05      	ldrlt	r3, [sp, #20]
 800557a:	9d05      	ldrge	r5, [sp, #20]
 800557c:	eba3 0509 	sublt.w	r5, r3, r9
 8005580:	464b      	movge	r3, r9
 8005582:	bfb8      	it	lt
 8005584:	2300      	movlt	r3, #0
 8005586:	e77e      	b.n	8005486 <_dtoa_r+0x6fe>
 8005588:	9f07      	ldr	r7, [sp, #28]
 800558a:	9d05      	ldr	r5, [sp, #20]
 800558c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800558e:	e783      	b.n	8005498 <_dtoa_r+0x710>
 8005590:	9a07      	ldr	r2, [sp, #28]
 8005592:	e7ab      	b.n	80054ec <_dtoa_r+0x764>
 8005594:	2300      	movs	r3, #0
 8005596:	e7d4      	b.n	8005542 <_dtoa_r+0x7ba>
 8005598:	9b00      	ldr	r3, [sp, #0]
 800559a:	e7d2      	b.n	8005542 <_dtoa_r+0x7ba>
 800559c:	2300      	movs	r3, #0
 800559e:	9307      	str	r3, [sp, #28]
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80055a6:	6918      	ldr	r0, [r3, #16]
 80055a8:	f000 fa42 	bl	8005a30 <__hi0bits>
 80055ac:	f1c0 0020 	rsb	r0, r0, #32
 80055b0:	4440      	add	r0, r8
 80055b2:	f010 001f 	ands.w	r0, r0, #31
 80055b6:	d047      	beq.n	8005648 <_dtoa_r+0x8c0>
 80055b8:	f1c0 0320 	rsb	r3, r0, #32
 80055bc:	2b04      	cmp	r3, #4
 80055be:	dd3b      	ble.n	8005638 <_dtoa_r+0x8b0>
 80055c0:	9b05      	ldr	r3, [sp, #20]
 80055c2:	f1c0 001c 	rsb	r0, r0, #28
 80055c6:	4403      	add	r3, r0
 80055c8:	9305      	str	r3, [sp, #20]
 80055ca:	4405      	add	r5, r0
 80055cc:	4480      	add	r8, r0
 80055ce:	9b05      	ldr	r3, [sp, #20]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	dd05      	ble.n	80055e0 <_dtoa_r+0x858>
 80055d4:	461a      	mov	r2, r3
 80055d6:	9904      	ldr	r1, [sp, #16]
 80055d8:	4620      	mov	r0, r4
 80055da:	f000 fb65 	bl	8005ca8 <__lshift>
 80055de:	9004      	str	r0, [sp, #16]
 80055e0:	f1b8 0f00 	cmp.w	r8, #0
 80055e4:	dd05      	ble.n	80055f2 <_dtoa_r+0x86a>
 80055e6:	4639      	mov	r1, r7
 80055e8:	4642      	mov	r2, r8
 80055ea:	4620      	mov	r0, r4
 80055ec:	f000 fb5c 	bl	8005ca8 <__lshift>
 80055f0:	4607      	mov	r7, r0
 80055f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055f4:	b353      	cbz	r3, 800564c <_dtoa_r+0x8c4>
 80055f6:	4639      	mov	r1, r7
 80055f8:	9804      	ldr	r0, [sp, #16]
 80055fa:	f000 fba9 	bl	8005d50 <__mcmp>
 80055fe:	2800      	cmp	r0, #0
 8005600:	da24      	bge.n	800564c <_dtoa_r+0x8c4>
 8005602:	2300      	movs	r3, #0
 8005604:	220a      	movs	r2, #10
 8005606:	9904      	ldr	r1, [sp, #16]
 8005608:	4620      	mov	r0, r4
 800560a:	f000 f9d6 	bl	80059ba <__multadd>
 800560e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005610:	9004      	str	r0, [sp, #16]
 8005612:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 814d 	beq.w	80058b6 <_dtoa_r+0xb2e>
 800561c:	2300      	movs	r3, #0
 800561e:	4631      	mov	r1, r6
 8005620:	220a      	movs	r2, #10
 8005622:	4620      	mov	r0, r4
 8005624:	f000 f9c9 	bl	80059ba <__multadd>
 8005628:	9b02      	ldr	r3, [sp, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	4606      	mov	r6, r0
 800562e:	dc4f      	bgt.n	80056d0 <_dtoa_r+0x948>
 8005630:	9b06      	ldr	r3, [sp, #24]
 8005632:	2b02      	cmp	r3, #2
 8005634:	dd4c      	ble.n	80056d0 <_dtoa_r+0x948>
 8005636:	e011      	b.n	800565c <_dtoa_r+0x8d4>
 8005638:	d0c9      	beq.n	80055ce <_dtoa_r+0x846>
 800563a:	9a05      	ldr	r2, [sp, #20]
 800563c:	331c      	adds	r3, #28
 800563e:	441a      	add	r2, r3
 8005640:	9205      	str	r2, [sp, #20]
 8005642:	441d      	add	r5, r3
 8005644:	4498      	add	r8, r3
 8005646:	e7c2      	b.n	80055ce <_dtoa_r+0x846>
 8005648:	4603      	mov	r3, r0
 800564a:	e7f6      	b.n	800563a <_dtoa_r+0x8b2>
 800564c:	f1b9 0f00 	cmp.w	r9, #0
 8005650:	dc38      	bgt.n	80056c4 <_dtoa_r+0x93c>
 8005652:	9b06      	ldr	r3, [sp, #24]
 8005654:	2b02      	cmp	r3, #2
 8005656:	dd35      	ble.n	80056c4 <_dtoa_r+0x93c>
 8005658:	f8cd 9008 	str.w	r9, [sp, #8]
 800565c:	9b02      	ldr	r3, [sp, #8]
 800565e:	b963      	cbnz	r3, 800567a <_dtoa_r+0x8f2>
 8005660:	4639      	mov	r1, r7
 8005662:	2205      	movs	r2, #5
 8005664:	4620      	mov	r0, r4
 8005666:	f000 f9a8 	bl	80059ba <__multadd>
 800566a:	4601      	mov	r1, r0
 800566c:	4607      	mov	r7, r0
 800566e:	9804      	ldr	r0, [sp, #16]
 8005670:	f000 fb6e 	bl	8005d50 <__mcmp>
 8005674:	2800      	cmp	r0, #0
 8005676:	f73f adcc 	bgt.w	8005212 <_dtoa_r+0x48a>
 800567a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800567c:	465d      	mov	r5, fp
 800567e:	ea6f 0a03 	mvn.w	sl, r3
 8005682:	f04f 0900 	mov.w	r9, #0
 8005686:	4639      	mov	r1, r7
 8005688:	4620      	mov	r0, r4
 800568a:	f000 f97f 	bl	800598c <_Bfree>
 800568e:	2e00      	cmp	r6, #0
 8005690:	f43f aeb7 	beq.w	8005402 <_dtoa_r+0x67a>
 8005694:	f1b9 0f00 	cmp.w	r9, #0
 8005698:	d005      	beq.n	80056a6 <_dtoa_r+0x91e>
 800569a:	45b1      	cmp	r9, r6
 800569c:	d003      	beq.n	80056a6 <_dtoa_r+0x91e>
 800569e:	4649      	mov	r1, r9
 80056a0:	4620      	mov	r0, r4
 80056a2:	f000 f973 	bl	800598c <_Bfree>
 80056a6:	4631      	mov	r1, r6
 80056a8:	4620      	mov	r0, r4
 80056aa:	f000 f96f 	bl	800598c <_Bfree>
 80056ae:	e6a8      	b.n	8005402 <_dtoa_r+0x67a>
 80056b0:	2700      	movs	r7, #0
 80056b2:	463e      	mov	r6, r7
 80056b4:	e7e1      	b.n	800567a <_dtoa_r+0x8f2>
 80056b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80056ba:	463e      	mov	r6, r7
 80056bc:	e5a9      	b.n	8005212 <_dtoa_r+0x48a>
 80056be:	bf00      	nop
 80056c0:	40240000 	.word	0x40240000
 80056c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056c6:	f8cd 9008 	str.w	r9, [sp, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 80fa 	beq.w	80058c4 <_dtoa_r+0xb3c>
 80056d0:	2d00      	cmp	r5, #0
 80056d2:	dd05      	ble.n	80056e0 <_dtoa_r+0x958>
 80056d4:	4631      	mov	r1, r6
 80056d6:	462a      	mov	r2, r5
 80056d8:	4620      	mov	r0, r4
 80056da:	f000 fae5 	bl	8005ca8 <__lshift>
 80056de:	4606      	mov	r6, r0
 80056e0:	9b07      	ldr	r3, [sp, #28]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d04c      	beq.n	8005780 <_dtoa_r+0x9f8>
 80056e6:	6871      	ldr	r1, [r6, #4]
 80056e8:	4620      	mov	r0, r4
 80056ea:	f000 f91b 	bl	8005924 <_Balloc>
 80056ee:	6932      	ldr	r2, [r6, #16]
 80056f0:	3202      	adds	r2, #2
 80056f2:	4605      	mov	r5, r0
 80056f4:	0092      	lsls	r2, r2, #2
 80056f6:	f106 010c 	add.w	r1, r6, #12
 80056fa:	300c      	adds	r0, #12
 80056fc:	f7fe fe0e 	bl	800431c <memcpy>
 8005700:	2201      	movs	r2, #1
 8005702:	4629      	mov	r1, r5
 8005704:	4620      	mov	r0, r4
 8005706:	f000 facf 	bl	8005ca8 <__lshift>
 800570a:	9b00      	ldr	r3, [sp, #0]
 800570c:	f8cd b014 	str.w	fp, [sp, #20]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	46b1      	mov	r9, r6
 8005716:	9307      	str	r3, [sp, #28]
 8005718:	4606      	mov	r6, r0
 800571a:	4639      	mov	r1, r7
 800571c:	9804      	ldr	r0, [sp, #16]
 800571e:	f7ff faa4 	bl	8004c6a <quorem>
 8005722:	4649      	mov	r1, r9
 8005724:	4605      	mov	r5, r0
 8005726:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800572a:	9804      	ldr	r0, [sp, #16]
 800572c:	f000 fb10 	bl	8005d50 <__mcmp>
 8005730:	4632      	mov	r2, r6
 8005732:	9000      	str	r0, [sp, #0]
 8005734:	4639      	mov	r1, r7
 8005736:	4620      	mov	r0, r4
 8005738:	f000 fb24 	bl	8005d84 <__mdiff>
 800573c:	68c3      	ldr	r3, [r0, #12]
 800573e:	4602      	mov	r2, r0
 8005740:	bb03      	cbnz	r3, 8005784 <_dtoa_r+0x9fc>
 8005742:	4601      	mov	r1, r0
 8005744:	9008      	str	r0, [sp, #32]
 8005746:	9804      	ldr	r0, [sp, #16]
 8005748:	f000 fb02 	bl	8005d50 <__mcmp>
 800574c:	9a08      	ldr	r2, [sp, #32]
 800574e:	4603      	mov	r3, r0
 8005750:	4611      	mov	r1, r2
 8005752:	4620      	mov	r0, r4
 8005754:	9308      	str	r3, [sp, #32]
 8005756:	f000 f919 	bl	800598c <_Bfree>
 800575a:	9b08      	ldr	r3, [sp, #32]
 800575c:	b9a3      	cbnz	r3, 8005788 <_dtoa_r+0xa00>
 800575e:	9a06      	ldr	r2, [sp, #24]
 8005760:	b992      	cbnz	r2, 8005788 <_dtoa_r+0xa00>
 8005762:	9a07      	ldr	r2, [sp, #28]
 8005764:	b982      	cbnz	r2, 8005788 <_dtoa_r+0xa00>
 8005766:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800576a:	d029      	beq.n	80057c0 <_dtoa_r+0xa38>
 800576c:	9b00      	ldr	r3, [sp, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	dd01      	ble.n	8005776 <_dtoa_r+0x9ee>
 8005772:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005776:	9b05      	ldr	r3, [sp, #20]
 8005778:	1c5d      	adds	r5, r3, #1
 800577a:	f883 8000 	strb.w	r8, [r3]
 800577e:	e782      	b.n	8005686 <_dtoa_r+0x8fe>
 8005780:	4630      	mov	r0, r6
 8005782:	e7c2      	b.n	800570a <_dtoa_r+0x982>
 8005784:	2301      	movs	r3, #1
 8005786:	e7e3      	b.n	8005750 <_dtoa_r+0x9c8>
 8005788:	9a00      	ldr	r2, [sp, #0]
 800578a:	2a00      	cmp	r2, #0
 800578c:	db04      	blt.n	8005798 <_dtoa_r+0xa10>
 800578e:	d125      	bne.n	80057dc <_dtoa_r+0xa54>
 8005790:	9a06      	ldr	r2, [sp, #24]
 8005792:	bb1a      	cbnz	r2, 80057dc <_dtoa_r+0xa54>
 8005794:	9a07      	ldr	r2, [sp, #28]
 8005796:	bb0a      	cbnz	r2, 80057dc <_dtoa_r+0xa54>
 8005798:	2b00      	cmp	r3, #0
 800579a:	ddec      	ble.n	8005776 <_dtoa_r+0x9ee>
 800579c:	2201      	movs	r2, #1
 800579e:	9904      	ldr	r1, [sp, #16]
 80057a0:	4620      	mov	r0, r4
 80057a2:	f000 fa81 	bl	8005ca8 <__lshift>
 80057a6:	4639      	mov	r1, r7
 80057a8:	9004      	str	r0, [sp, #16]
 80057aa:	f000 fad1 	bl	8005d50 <__mcmp>
 80057ae:	2800      	cmp	r0, #0
 80057b0:	dc03      	bgt.n	80057ba <_dtoa_r+0xa32>
 80057b2:	d1e0      	bne.n	8005776 <_dtoa_r+0x9ee>
 80057b4:	f018 0f01 	tst.w	r8, #1
 80057b8:	d0dd      	beq.n	8005776 <_dtoa_r+0x9ee>
 80057ba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80057be:	d1d8      	bne.n	8005772 <_dtoa_r+0x9ea>
 80057c0:	9b05      	ldr	r3, [sp, #20]
 80057c2:	9a05      	ldr	r2, [sp, #20]
 80057c4:	1c5d      	adds	r5, r3, #1
 80057c6:	2339      	movs	r3, #57	; 0x39
 80057c8:	7013      	strb	r3, [r2, #0]
 80057ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80057ce:	2b39      	cmp	r3, #57	; 0x39
 80057d0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80057d4:	d04f      	beq.n	8005876 <_dtoa_r+0xaee>
 80057d6:	3301      	adds	r3, #1
 80057d8:	7013      	strb	r3, [r2, #0]
 80057da:	e754      	b.n	8005686 <_dtoa_r+0x8fe>
 80057dc:	9a05      	ldr	r2, [sp, #20]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f102 0501 	add.w	r5, r2, #1
 80057e4:	dd06      	ble.n	80057f4 <_dtoa_r+0xa6c>
 80057e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80057ea:	d0e9      	beq.n	80057c0 <_dtoa_r+0xa38>
 80057ec:	f108 0801 	add.w	r8, r8, #1
 80057f0:	9b05      	ldr	r3, [sp, #20]
 80057f2:	e7c2      	b.n	800577a <_dtoa_r+0x9f2>
 80057f4:	9a02      	ldr	r2, [sp, #8]
 80057f6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80057fa:	eba5 030b 	sub.w	r3, r5, fp
 80057fe:	4293      	cmp	r3, r2
 8005800:	d021      	beq.n	8005846 <_dtoa_r+0xabe>
 8005802:	2300      	movs	r3, #0
 8005804:	220a      	movs	r2, #10
 8005806:	9904      	ldr	r1, [sp, #16]
 8005808:	4620      	mov	r0, r4
 800580a:	f000 f8d6 	bl	80059ba <__multadd>
 800580e:	45b1      	cmp	r9, r6
 8005810:	9004      	str	r0, [sp, #16]
 8005812:	f04f 0300 	mov.w	r3, #0
 8005816:	f04f 020a 	mov.w	r2, #10
 800581a:	4649      	mov	r1, r9
 800581c:	4620      	mov	r0, r4
 800581e:	d105      	bne.n	800582c <_dtoa_r+0xaa4>
 8005820:	f000 f8cb 	bl	80059ba <__multadd>
 8005824:	4681      	mov	r9, r0
 8005826:	4606      	mov	r6, r0
 8005828:	9505      	str	r5, [sp, #20]
 800582a:	e776      	b.n	800571a <_dtoa_r+0x992>
 800582c:	f000 f8c5 	bl	80059ba <__multadd>
 8005830:	4631      	mov	r1, r6
 8005832:	4681      	mov	r9, r0
 8005834:	2300      	movs	r3, #0
 8005836:	220a      	movs	r2, #10
 8005838:	4620      	mov	r0, r4
 800583a:	f000 f8be 	bl	80059ba <__multadd>
 800583e:	4606      	mov	r6, r0
 8005840:	e7f2      	b.n	8005828 <_dtoa_r+0xaa0>
 8005842:	f04f 0900 	mov.w	r9, #0
 8005846:	2201      	movs	r2, #1
 8005848:	9904      	ldr	r1, [sp, #16]
 800584a:	4620      	mov	r0, r4
 800584c:	f000 fa2c 	bl	8005ca8 <__lshift>
 8005850:	4639      	mov	r1, r7
 8005852:	9004      	str	r0, [sp, #16]
 8005854:	f000 fa7c 	bl	8005d50 <__mcmp>
 8005858:	2800      	cmp	r0, #0
 800585a:	dcb6      	bgt.n	80057ca <_dtoa_r+0xa42>
 800585c:	d102      	bne.n	8005864 <_dtoa_r+0xadc>
 800585e:	f018 0f01 	tst.w	r8, #1
 8005862:	d1b2      	bne.n	80057ca <_dtoa_r+0xa42>
 8005864:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005868:	2b30      	cmp	r3, #48	; 0x30
 800586a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800586e:	f47f af0a 	bne.w	8005686 <_dtoa_r+0x8fe>
 8005872:	4615      	mov	r5, r2
 8005874:	e7f6      	b.n	8005864 <_dtoa_r+0xadc>
 8005876:	4593      	cmp	fp, r2
 8005878:	d105      	bne.n	8005886 <_dtoa_r+0xafe>
 800587a:	2331      	movs	r3, #49	; 0x31
 800587c:	f10a 0a01 	add.w	sl, sl, #1
 8005880:	f88b 3000 	strb.w	r3, [fp]
 8005884:	e6ff      	b.n	8005686 <_dtoa_r+0x8fe>
 8005886:	4615      	mov	r5, r2
 8005888:	e79f      	b.n	80057ca <_dtoa_r+0xa42>
 800588a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80058f0 <_dtoa_r+0xb68>
 800588e:	e007      	b.n	80058a0 <_dtoa_r+0xb18>
 8005890:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005892:	f8df b060 	ldr.w	fp, [pc, #96]	; 80058f4 <_dtoa_r+0xb6c>
 8005896:	b11b      	cbz	r3, 80058a0 <_dtoa_r+0xb18>
 8005898:	f10b 0308 	add.w	r3, fp, #8
 800589c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800589e:	6013      	str	r3, [r2, #0]
 80058a0:	4658      	mov	r0, fp
 80058a2:	b017      	add	sp, #92	; 0x5c
 80058a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058a8:	9b06      	ldr	r3, [sp, #24]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	f77f ae35 	ble.w	800551a <_dtoa_r+0x792>
 80058b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058b2:	9307      	str	r3, [sp, #28]
 80058b4:	e649      	b.n	800554a <_dtoa_r+0x7c2>
 80058b6:	9b02      	ldr	r3, [sp, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	dc03      	bgt.n	80058c4 <_dtoa_r+0xb3c>
 80058bc:	9b06      	ldr	r3, [sp, #24]
 80058be:	2b02      	cmp	r3, #2
 80058c0:	f73f aecc 	bgt.w	800565c <_dtoa_r+0x8d4>
 80058c4:	465d      	mov	r5, fp
 80058c6:	4639      	mov	r1, r7
 80058c8:	9804      	ldr	r0, [sp, #16]
 80058ca:	f7ff f9ce 	bl	8004c6a <quorem>
 80058ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80058d2:	f805 8b01 	strb.w	r8, [r5], #1
 80058d6:	9a02      	ldr	r2, [sp, #8]
 80058d8:	eba5 030b 	sub.w	r3, r5, fp
 80058dc:	429a      	cmp	r2, r3
 80058de:	ddb0      	ble.n	8005842 <_dtoa_r+0xaba>
 80058e0:	2300      	movs	r3, #0
 80058e2:	220a      	movs	r2, #10
 80058e4:	9904      	ldr	r1, [sp, #16]
 80058e6:	4620      	mov	r0, r4
 80058e8:	f000 f867 	bl	80059ba <__multadd>
 80058ec:	9004      	str	r0, [sp, #16]
 80058ee:	e7ea      	b.n	80058c6 <_dtoa_r+0xb3e>
 80058f0:	08006458 	.word	0x08006458
 80058f4:	0800647c 	.word	0x0800647c

080058f8 <_localeconv_r>:
 80058f8:	4b04      	ldr	r3, [pc, #16]	; (800590c <_localeconv_r+0x14>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6a18      	ldr	r0, [r3, #32]
 80058fe:	4b04      	ldr	r3, [pc, #16]	; (8005910 <_localeconv_r+0x18>)
 8005900:	2800      	cmp	r0, #0
 8005902:	bf08      	it	eq
 8005904:	4618      	moveq	r0, r3
 8005906:	30f0      	adds	r0, #240	; 0xf0
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	2000000c 	.word	0x2000000c
 8005910:	20000070 	.word	0x20000070

08005914 <malloc>:
 8005914:	4b02      	ldr	r3, [pc, #8]	; (8005920 <malloc+0xc>)
 8005916:	4601      	mov	r1, r0
 8005918:	6818      	ldr	r0, [r3, #0]
 800591a:	f000 bb3b 	b.w	8005f94 <_malloc_r>
 800591e:	bf00      	nop
 8005920:	2000000c 	.word	0x2000000c

08005924 <_Balloc>:
 8005924:	b570      	push	{r4, r5, r6, lr}
 8005926:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005928:	4604      	mov	r4, r0
 800592a:	460e      	mov	r6, r1
 800592c:	b93d      	cbnz	r5, 800593e <_Balloc+0x1a>
 800592e:	2010      	movs	r0, #16
 8005930:	f7ff fff0 	bl	8005914 <malloc>
 8005934:	6260      	str	r0, [r4, #36]	; 0x24
 8005936:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800593a:	6005      	str	r5, [r0, #0]
 800593c:	60c5      	str	r5, [r0, #12]
 800593e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005940:	68eb      	ldr	r3, [r5, #12]
 8005942:	b183      	cbz	r3, 8005966 <_Balloc+0x42>
 8005944:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800594c:	b9b8      	cbnz	r0, 800597e <_Balloc+0x5a>
 800594e:	2101      	movs	r1, #1
 8005950:	fa01 f506 	lsl.w	r5, r1, r6
 8005954:	1d6a      	adds	r2, r5, #5
 8005956:	0092      	lsls	r2, r2, #2
 8005958:	4620      	mov	r0, r4
 800595a:	f000 fabf 	bl	8005edc <_calloc_r>
 800595e:	b160      	cbz	r0, 800597a <_Balloc+0x56>
 8005960:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005964:	e00e      	b.n	8005984 <_Balloc+0x60>
 8005966:	2221      	movs	r2, #33	; 0x21
 8005968:	2104      	movs	r1, #4
 800596a:	4620      	mov	r0, r4
 800596c:	f000 fab6 	bl	8005edc <_calloc_r>
 8005970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005972:	60e8      	str	r0, [r5, #12]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e4      	bne.n	8005944 <_Balloc+0x20>
 800597a:	2000      	movs	r0, #0
 800597c:	bd70      	pop	{r4, r5, r6, pc}
 800597e:	6802      	ldr	r2, [r0, #0]
 8005980:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005984:	2300      	movs	r3, #0
 8005986:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800598a:	e7f7      	b.n	800597c <_Balloc+0x58>

0800598c <_Bfree>:
 800598c:	b570      	push	{r4, r5, r6, lr}
 800598e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005990:	4606      	mov	r6, r0
 8005992:	460d      	mov	r5, r1
 8005994:	b93c      	cbnz	r4, 80059a6 <_Bfree+0x1a>
 8005996:	2010      	movs	r0, #16
 8005998:	f7ff ffbc 	bl	8005914 <malloc>
 800599c:	6270      	str	r0, [r6, #36]	; 0x24
 800599e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80059a2:	6004      	str	r4, [r0, #0]
 80059a4:	60c4      	str	r4, [r0, #12]
 80059a6:	b13d      	cbz	r5, 80059b8 <_Bfree+0x2c>
 80059a8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80059aa:	686a      	ldr	r2, [r5, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059b2:	6029      	str	r1, [r5, #0]
 80059b4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80059b8:	bd70      	pop	{r4, r5, r6, pc}

080059ba <__multadd>:
 80059ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059be:	690d      	ldr	r5, [r1, #16]
 80059c0:	461f      	mov	r7, r3
 80059c2:	4606      	mov	r6, r0
 80059c4:	460c      	mov	r4, r1
 80059c6:	f101 0c14 	add.w	ip, r1, #20
 80059ca:	2300      	movs	r3, #0
 80059cc:	f8dc 0000 	ldr.w	r0, [ip]
 80059d0:	b281      	uxth	r1, r0
 80059d2:	fb02 7101 	mla	r1, r2, r1, r7
 80059d6:	0c0f      	lsrs	r7, r1, #16
 80059d8:	0c00      	lsrs	r0, r0, #16
 80059da:	fb02 7000 	mla	r0, r2, r0, r7
 80059de:	b289      	uxth	r1, r1
 80059e0:	3301      	adds	r3, #1
 80059e2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80059e6:	429d      	cmp	r5, r3
 80059e8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80059ec:	f84c 1b04 	str.w	r1, [ip], #4
 80059f0:	dcec      	bgt.n	80059cc <__multadd+0x12>
 80059f2:	b1d7      	cbz	r7, 8005a2a <__multadd+0x70>
 80059f4:	68a3      	ldr	r3, [r4, #8]
 80059f6:	42ab      	cmp	r3, r5
 80059f8:	dc12      	bgt.n	8005a20 <__multadd+0x66>
 80059fa:	6861      	ldr	r1, [r4, #4]
 80059fc:	4630      	mov	r0, r6
 80059fe:	3101      	adds	r1, #1
 8005a00:	f7ff ff90 	bl	8005924 <_Balloc>
 8005a04:	6922      	ldr	r2, [r4, #16]
 8005a06:	3202      	adds	r2, #2
 8005a08:	f104 010c 	add.w	r1, r4, #12
 8005a0c:	4680      	mov	r8, r0
 8005a0e:	0092      	lsls	r2, r2, #2
 8005a10:	300c      	adds	r0, #12
 8005a12:	f7fe fc83 	bl	800431c <memcpy>
 8005a16:	4621      	mov	r1, r4
 8005a18:	4630      	mov	r0, r6
 8005a1a:	f7ff ffb7 	bl	800598c <_Bfree>
 8005a1e:	4644      	mov	r4, r8
 8005a20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a24:	3501      	adds	r5, #1
 8005a26:	615f      	str	r7, [r3, #20]
 8005a28:	6125      	str	r5, [r4, #16]
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005a30 <__hi0bits>:
 8005a30:	0c02      	lsrs	r2, r0, #16
 8005a32:	0412      	lsls	r2, r2, #16
 8005a34:	4603      	mov	r3, r0
 8005a36:	b9b2      	cbnz	r2, 8005a66 <__hi0bits+0x36>
 8005a38:	0403      	lsls	r3, r0, #16
 8005a3a:	2010      	movs	r0, #16
 8005a3c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005a40:	bf04      	itt	eq
 8005a42:	021b      	lsleq	r3, r3, #8
 8005a44:	3008      	addeq	r0, #8
 8005a46:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005a4a:	bf04      	itt	eq
 8005a4c:	011b      	lsleq	r3, r3, #4
 8005a4e:	3004      	addeq	r0, #4
 8005a50:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005a54:	bf04      	itt	eq
 8005a56:	009b      	lsleq	r3, r3, #2
 8005a58:	3002      	addeq	r0, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	db06      	blt.n	8005a6c <__hi0bits+0x3c>
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	d503      	bpl.n	8005a6a <__hi0bits+0x3a>
 8005a62:	3001      	adds	r0, #1
 8005a64:	4770      	bx	lr
 8005a66:	2000      	movs	r0, #0
 8005a68:	e7e8      	b.n	8005a3c <__hi0bits+0xc>
 8005a6a:	2020      	movs	r0, #32
 8005a6c:	4770      	bx	lr

08005a6e <__lo0bits>:
 8005a6e:	6803      	ldr	r3, [r0, #0]
 8005a70:	f013 0207 	ands.w	r2, r3, #7
 8005a74:	4601      	mov	r1, r0
 8005a76:	d00b      	beq.n	8005a90 <__lo0bits+0x22>
 8005a78:	07da      	lsls	r2, r3, #31
 8005a7a:	d423      	bmi.n	8005ac4 <__lo0bits+0x56>
 8005a7c:	0798      	lsls	r0, r3, #30
 8005a7e:	bf49      	itett	mi
 8005a80:	085b      	lsrmi	r3, r3, #1
 8005a82:	089b      	lsrpl	r3, r3, #2
 8005a84:	2001      	movmi	r0, #1
 8005a86:	600b      	strmi	r3, [r1, #0]
 8005a88:	bf5c      	itt	pl
 8005a8a:	600b      	strpl	r3, [r1, #0]
 8005a8c:	2002      	movpl	r0, #2
 8005a8e:	4770      	bx	lr
 8005a90:	b298      	uxth	r0, r3
 8005a92:	b9a8      	cbnz	r0, 8005ac0 <__lo0bits+0x52>
 8005a94:	0c1b      	lsrs	r3, r3, #16
 8005a96:	2010      	movs	r0, #16
 8005a98:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005a9c:	bf04      	itt	eq
 8005a9e:	0a1b      	lsreq	r3, r3, #8
 8005aa0:	3008      	addeq	r0, #8
 8005aa2:	071a      	lsls	r2, r3, #28
 8005aa4:	bf04      	itt	eq
 8005aa6:	091b      	lsreq	r3, r3, #4
 8005aa8:	3004      	addeq	r0, #4
 8005aaa:	079a      	lsls	r2, r3, #30
 8005aac:	bf04      	itt	eq
 8005aae:	089b      	lsreq	r3, r3, #2
 8005ab0:	3002      	addeq	r0, #2
 8005ab2:	07da      	lsls	r2, r3, #31
 8005ab4:	d402      	bmi.n	8005abc <__lo0bits+0x4e>
 8005ab6:	085b      	lsrs	r3, r3, #1
 8005ab8:	d006      	beq.n	8005ac8 <__lo0bits+0x5a>
 8005aba:	3001      	adds	r0, #1
 8005abc:	600b      	str	r3, [r1, #0]
 8005abe:	4770      	bx	lr
 8005ac0:	4610      	mov	r0, r2
 8005ac2:	e7e9      	b.n	8005a98 <__lo0bits+0x2a>
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	4770      	bx	lr
 8005ac8:	2020      	movs	r0, #32
 8005aca:	4770      	bx	lr

08005acc <__i2b>:
 8005acc:	b510      	push	{r4, lr}
 8005ace:	460c      	mov	r4, r1
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	f7ff ff27 	bl	8005924 <_Balloc>
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	6144      	str	r4, [r0, #20]
 8005ada:	6102      	str	r2, [r0, #16]
 8005adc:	bd10      	pop	{r4, pc}

08005ade <__multiply>:
 8005ade:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae2:	4614      	mov	r4, r2
 8005ae4:	690a      	ldr	r2, [r1, #16]
 8005ae6:	6923      	ldr	r3, [r4, #16]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	bfb8      	it	lt
 8005aec:	460b      	movlt	r3, r1
 8005aee:	4688      	mov	r8, r1
 8005af0:	bfbc      	itt	lt
 8005af2:	46a0      	movlt	r8, r4
 8005af4:	461c      	movlt	r4, r3
 8005af6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005afa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005afe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005b02:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005b06:	eb07 0609 	add.w	r6, r7, r9
 8005b0a:	42b3      	cmp	r3, r6
 8005b0c:	bfb8      	it	lt
 8005b0e:	3101      	addlt	r1, #1
 8005b10:	f7ff ff08 	bl	8005924 <_Balloc>
 8005b14:	f100 0514 	add.w	r5, r0, #20
 8005b18:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005b1c:	462b      	mov	r3, r5
 8005b1e:	2200      	movs	r2, #0
 8005b20:	4573      	cmp	r3, lr
 8005b22:	d316      	bcc.n	8005b52 <__multiply+0x74>
 8005b24:	f104 0214 	add.w	r2, r4, #20
 8005b28:	f108 0114 	add.w	r1, r8, #20
 8005b2c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005b30:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	9b00      	ldr	r3, [sp, #0]
 8005b38:	9201      	str	r2, [sp, #4]
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d80c      	bhi.n	8005b58 <__multiply+0x7a>
 8005b3e:	2e00      	cmp	r6, #0
 8005b40:	dd03      	ble.n	8005b4a <__multiply+0x6c>
 8005b42:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d05d      	beq.n	8005c06 <__multiply+0x128>
 8005b4a:	6106      	str	r6, [r0, #16]
 8005b4c:	b003      	add	sp, #12
 8005b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b52:	f843 2b04 	str.w	r2, [r3], #4
 8005b56:	e7e3      	b.n	8005b20 <__multiply+0x42>
 8005b58:	f8b2 b000 	ldrh.w	fp, [r2]
 8005b5c:	f1bb 0f00 	cmp.w	fp, #0
 8005b60:	d023      	beq.n	8005baa <__multiply+0xcc>
 8005b62:	4689      	mov	r9, r1
 8005b64:	46ac      	mov	ip, r5
 8005b66:	f04f 0800 	mov.w	r8, #0
 8005b6a:	f859 4b04 	ldr.w	r4, [r9], #4
 8005b6e:	f8dc a000 	ldr.w	sl, [ip]
 8005b72:	b2a3      	uxth	r3, r4
 8005b74:	fa1f fa8a 	uxth.w	sl, sl
 8005b78:	fb0b a303 	mla	r3, fp, r3, sl
 8005b7c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005b80:	f8dc 4000 	ldr.w	r4, [ip]
 8005b84:	4443      	add	r3, r8
 8005b86:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005b8a:	fb0b 840a 	mla	r4, fp, sl, r8
 8005b8e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005b92:	46e2      	mov	sl, ip
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005b9a:	454f      	cmp	r7, r9
 8005b9c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005ba0:	f84a 3b04 	str.w	r3, [sl], #4
 8005ba4:	d82b      	bhi.n	8005bfe <__multiply+0x120>
 8005ba6:	f8cc 8004 	str.w	r8, [ip, #4]
 8005baa:	9b01      	ldr	r3, [sp, #4]
 8005bac:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005bb0:	3204      	adds	r2, #4
 8005bb2:	f1ba 0f00 	cmp.w	sl, #0
 8005bb6:	d020      	beq.n	8005bfa <__multiply+0x11c>
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	4689      	mov	r9, r1
 8005bbc:	46a8      	mov	r8, r5
 8005bbe:	f04f 0b00 	mov.w	fp, #0
 8005bc2:	f8b9 c000 	ldrh.w	ip, [r9]
 8005bc6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005bca:	fb0a 440c 	mla	r4, sl, ip, r4
 8005bce:	445c      	add	r4, fp
 8005bd0:	46c4      	mov	ip, r8
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005bd8:	f84c 3b04 	str.w	r3, [ip], #4
 8005bdc:	f859 3b04 	ldr.w	r3, [r9], #4
 8005be0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005be4:	0c1b      	lsrs	r3, r3, #16
 8005be6:	fb0a b303 	mla	r3, sl, r3, fp
 8005bea:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005bee:	454f      	cmp	r7, r9
 8005bf0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005bf4:	d805      	bhi.n	8005c02 <__multiply+0x124>
 8005bf6:	f8c8 3004 	str.w	r3, [r8, #4]
 8005bfa:	3504      	adds	r5, #4
 8005bfc:	e79b      	b.n	8005b36 <__multiply+0x58>
 8005bfe:	46d4      	mov	ip, sl
 8005c00:	e7b3      	b.n	8005b6a <__multiply+0x8c>
 8005c02:	46e0      	mov	r8, ip
 8005c04:	e7dd      	b.n	8005bc2 <__multiply+0xe4>
 8005c06:	3e01      	subs	r6, #1
 8005c08:	e799      	b.n	8005b3e <__multiply+0x60>
	...

08005c0c <__pow5mult>:
 8005c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c10:	4615      	mov	r5, r2
 8005c12:	f012 0203 	ands.w	r2, r2, #3
 8005c16:	4606      	mov	r6, r0
 8005c18:	460f      	mov	r7, r1
 8005c1a:	d007      	beq.n	8005c2c <__pow5mult+0x20>
 8005c1c:	3a01      	subs	r2, #1
 8005c1e:	4c21      	ldr	r4, [pc, #132]	; (8005ca4 <__pow5mult+0x98>)
 8005c20:	2300      	movs	r3, #0
 8005c22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c26:	f7ff fec8 	bl	80059ba <__multadd>
 8005c2a:	4607      	mov	r7, r0
 8005c2c:	10ad      	asrs	r5, r5, #2
 8005c2e:	d035      	beq.n	8005c9c <__pow5mult+0x90>
 8005c30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005c32:	b93c      	cbnz	r4, 8005c44 <__pow5mult+0x38>
 8005c34:	2010      	movs	r0, #16
 8005c36:	f7ff fe6d 	bl	8005914 <malloc>
 8005c3a:	6270      	str	r0, [r6, #36]	; 0x24
 8005c3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c40:	6004      	str	r4, [r0, #0]
 8005c42:	60c4      	str	r4, [r0, #12]
 8005c44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c4c:	b94c      	cbnz	r4, 8005c62 <__pow5mult+0x56>
 8005c4e:	f240 2171 	movw	r1, #625	; 0x271
 8005c52:	4630      	mov	r0, r6
 8005c54:	f7ff ff3a 	bl	8005acc <__i2b>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c5e:	4604      	mov	r4, r0
 8005c60:	6003      	str	r3, [r0, #0]
 8005c62:	f04f 0800 	mov.w	r8, #0
 8005c66:	07eb      	lsls	r3, r5, #31
 8005c68:	d50a      	bpl.n	8005c80 <__pow5mult+0x74>
 8005c6a:	4639      	mov	r1, r7
 8005c6c:	4622      	mov	r2, r4
 8005c6e:	4630      	mov	r0, r6
 8005c70:	f7ff ff35 	bl	8005ade <__multiply>
 8005c74:	4639      	mov	r1, r7
 8005c76:	4681      	mov	r9, r0
 8005c78:	4630      	mov	r0, r6
 8005c7a:	f7ff fe87 	bl	800598c <_Bfree>
 8005c7e:	464f      	mov	r7, r9
 8005c80:	106d      	asrs	r5, r5, #1
 8005c82:	d00b      	beq.n	8005c9c <__pow5mult+0x90>
 8005c84:	6820      	ldr	r0, [r4, #0]
 8005c86:	b938      	cbnz	r0, 8005c98 <__pow5mult+0x8c>
 8005c88:	4622      	mov	r2, r4
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	f7ff ff26 	bl	8005ade <__multiply>
 8005c92:	6020      	str	r0, [r4, #0]
 8005c94:	f8c0 8000 	str.w	r8, [r0]
 8005c98:	4604      	mov	r4, r0
 8005c9a:	e7e4      	b.n	8005c66 <__pow5mult+0x5a>
 8005c9c:	4638      	mov	r0, r7
 8005c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ca2:	bf00      	nop
 8005ca4:	08006580 	.word	0x08006580

08005ca8 <__lshift>:
 8005ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cac:	460c      	mov	r4, r1
 8005cae:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005cb2:	6923      	ldr	r3, [r4, #16]
 8005cb4:	6849      	ldr	r1, [r1, #4]
 8005cb6:	eb0a 0903 	add.w	r9, sl, r3
 8005cba:	68a3      	ldr	r3, [r4, #8]
 8005cbc:	4607      	mov	r7, r0
 8005cbe:	4616      	mov	r6, r2
 8005cc0:	f109 0501 	add.w	r5, r9, #1
 8005cc4:	42ab      	cmp	r3, r5
 8005cc6:	db32      	blt.n	8005d2e <__lshift+0x86>
 8005cc8:	4638      	mov	r0, r7
 8005cca:	f7ff fe2b 	bl	8005924 <_Balloc>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	4680      	mov	r8, r0
 8005cd2:	f100 0114 	add.w	r1, r0, #20
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	4553      	cmp	r3, sl
 8005cda:	db2b      	blt.n	8005d34 <__lshift+0x8c>
 8005cdc:	6920      	ldr	r0, [r4, #16]
 8005cde:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ce2:	f104 0314 	add.w	r3, r4, #20
 8005ce6:	f016 021f 	ands.w	r2, r6, #31
 8005cea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005cee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005cf2:	d025      	beq.n	8005d40 <__lshift+0x98>
 8005cf4:	f1c2 0e20 	rsb	lr, r2, #32
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	681e      	ldr	r6, [r3, #0]
 8005cfc:	468a      	mov	sl, r1
 8005cfe:	4096      	lsls	r6, r2
 8005d00:	4330      	orrs	r0, r6
 8005d02:	f84a 0b04 	str.w	r0, [sl], #4
 8005d06:	f853 0b04 	ldr.w	r0, [r3], #4
 8005d0a:	459c      	cmp	ip, r3
 8005d0c:	fa20 f00e 	lsr.w	r0, r0, lr
 8005d10:	d814      	bhi.n	8005d3c <__lshift+0x94>
 8005d12:	6048      	str	r0, [r1, #4]
 8005d14:	b108      	cbz	r0, 8005d1a <__lshift+0x72>
 8005d16:	f109 0502 	add.w	r5, r9, #2
 8005d1a:	3d01      	subs	r5, #1
 8005d1c:	4638      	mov	r0, r7
 8005d1e:	f8c8 5010 	str.w	r5, [r8, #16]
 8005d22:	4621      	mov	r1, r4
 8005d24:	f7ff fe32 	bl	800598c <_Bfree>
 8005d28:	4640      	mov	r0, r8
 8005d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d2e:	3101      	adds	r1, #1
 8005d30:	005b      	lsls	r3, r3, #1
 8005d32:	e7c7      	b.n	8005cc4 <__lshift+0x1c>
 8005d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	e7cd      	b.n	8005cd8 <__lshift+0x30>
 8005d3c:	4651      	mov	r1, sl
 8005d3e:	e7dc      	b.n	8005cfa <__lshift+0x52>
 8005d40:	3904      	subs	r1, #4
 8005d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d46:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d4a:	459c      	cmp	ip, r3
 8005d4c:	d8f9      	bhi.n	8005d42 <__lshift+0x9a>
 8005d4e:	e7e4      	b.n	8005d1a <__lshift+0x72>

08005d50 <__mcmp>:
 8005d50:	6903      	ldr	r3, [r0, #16]
 8005d52:	690a      	ldr	r2, [r1, #16]
 8005d54:	1a9b      	subs	r3, r3, r2
 8005d56:	b530      	push	{r4, r5, lr}
 8005d58:	d10c      	bne.n	8005d74 <__mcmp+0x24>
 8005d5a:	0092      	lsls	r2, r2, #2
 8005d5c:	3014      	adds	r0, #20
 8005d5e:	3114      	adds	r1, #20
 8005d60:	1884      	adds	r4, r0, r2
 8005d62:	4411      	add	r1, r2
 8005d64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d6c:	4295      	cmp	r5, r2
 8005d6e:	d003      	beq.n	8005d78 <__mcmp+0x28>
 8005d70:	d305      	bcc.n	8005d7e <__mcmp+0x2e>
 8005d72:	2301      	movs	r3, #1
 8005d74:	4618      	mov	r0, r3
 8005d76:	bd30      	pop	{r4, r5, pc}
 8005d78:	42a0      	cmp	r0, r4
 8005d7a:	d3f3      	bcc.n	8005d64 <__mcmp+0x14>
 8005d7c:	e7fa      	b.n	8005d74 <__mcmp+0x24>
 8005d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d82:	e7f7      	b.n	8005d74 <__mcmp+0x24>

08005d84 <__mdiff>:
 8005d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d88:	460d      	mov	r5, r1
 8005d8a:	4607      	mov	r7, r0
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	4628      	mov	r0, r5
 8005d90:	4614      	mov	r4, r2
 8005d92:	f7ff ffdd 	bl	8005d50 <__mcmp>
 8005d96:	1e06      	subs	r6, r0, #0
 8005d98:	d108      	bne.n	8005dac <__mdiff+0x28>
 8005d9a:	4631      	mov	r1, r6
 8005d9c:	4638      	mov	r0, r7
 8005d9e:	f7ff fdc1 	bl	8005924 <_Balloc>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dac:	bfa4      	itt	ge
 8005dae:	4623      	movge	r3, r4
 8005db0:	462c      	movge	r4, r5
 8005db2:	4638      	mov	r0, r7
 8005db4:	6861      	ldr	r1, [r4, #4]
 8005db6:	bfa6      	itte	ge
 8005db8:	461d      	movge	r5, r3
 8005dba:	2600      	movge	r6, #0
 8005dbc:	2601      	movlt	r6, #1
 8005dbe:	f7ff fdb1 	bl	8005924 <_Balloc>
 8005dc2:	692b      	ldr	r3, [r5, #16]
 8005dc4:	60c6      	str	r6, [r0, #12]
 8005dc6:	6926      	ldr	r6, [r4, #16]
 8005dc8:	f105 0914 	add.w	r9, r5, #20
 8005dcc:	f104 0214 	add.w	r2, r4, #20
 8005dd0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005dd4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005dd8:	f100 0514 	add.w	r5, r0, #20
 8005ddc:	f04f 0e00 	mov.w	lr, #0
 8005de0:	f852 ab04 	ldr.w	sl, [r2], #4
 8005de4:	f859 4b04 	ldr.w	r4, [r9], #4
 8005de8:	fa1e f18a 	uxtah	r1, lr, sl
 8005dec:	b2a3      	uxth	r3, r4
 8005dee:	1ac9      	subs	r1, r1, r3
 8005df0:	0c23      	lsrs	r3, r4, #16
 8005df2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005df6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005dfa:	b289      	uxth	r1, r1
 8005dfc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005e00:	45c8      	cmp	r8, r9
 8005e02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005e06:	4694      	mov	ip, r2
 8005e08:	f845 3b04 	str.w	r3, [r5], #4
 8005e0c:	d8e8      	bhi.n	8005de0 <__mdiff+0x5c>
 8005e0e:	45bc      	cmp	ip, r7
 8005e10:	d304      	bcc.n	8005e1c <__mdiff+0x98>
 8005e12:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005e16:	b183      	cbz	r3, 8005e3a <__mdiff+0xb6>
 8005e18:	6106      	str	r6, [r0, #16]
 8005e1a:	e7c5      	b.n	8005da8 <__mdiff+0x24>
 8005e1c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005e20:	fa1e f381 	uxtah	r3, lr, r1
 8005e24:	141a      	asrs	r2, r3, #16
 8005e26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e30:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005e34:	f845 3b04 	str.w	r3, [r5], #4
 8005e38:	e7e9      	b.n	8005e0e <__mdiff+0x8a>
 8005e3a:	3e01      	subs	r6, #1
 8005e3c:	e7e9      	b.n	8005e12 <__mdiff+0x8e>

08005e3e <__d2b>:
 8005e3e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e42:	460e      	mov	r6, r1
 8005e44:	2101      	movs	r1, #1
 8005e46:	ec59 8b10 	vmov	r8, r9, d0
 8005e4a:	4615      	mov	r5, r2
 8005e4c:	f7ff fd6a 	bl	8005924 <_Balloc>
 8005e50:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005e54:	4607      	mov	r7, r0
 8005e56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e5a:	bb34      	cbnz	r4, 8005eaa <__d2b+0x6c>
 8005e5c:	9301      	str	r3, [sp, #4]
 8005e5e:	f1b8 0300 	subs.w	r3, r8, #0
 8005e62:	d027      	beq.n	8005eb4 <__d2b+0x76>
 8005e64:	a802      	add	r0, sp, #8
 8005e66:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005e6a:	f7ff fe00 	bl	8005a6e <__lo0bits>
 8005e6e:	9900      	ldr	r1, [sp, #0]
 8005e70:	b1f0      	cbz	r0, 8005eb0 <__d2b+0x72>
 8005e72:	9a01      	ldr	r2, [sp, #4]
 8005e74:	f1c0 0320 	rsb	r3, r0, #32
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	430b      	orrs	r3, r1
 8005e7e:	40c2      	lsrs	r2, r0
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	9201      	str	r2, [sp, #4]
 8005e84:	9b01      	ldr	r3, [sp, #4]
 8005e86:	61bb      	str	r3, [r7, #24]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	bf14      	ite	ne
 8005e8c:	2102      	movne	r1, #2
 8005e8e:	2101      	moveq	r1, #1
 8005e90:	6139      	str	r1, [r7, #16]
 8005e92:	b1c4      	cbz	r4, 8005ec6 <__d2b+0x88>
 8005e94:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005e98:	4404      	add	r4, r0
 8005e9a:	6034      	str	r4, [r6, #0]
 8005e9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ea0:	6028      	str	r0, [r5, #0]
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	b003      	add	sp, #12
 8005ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eae:	e7d5      	b.n	8005e5c <__d2b+0x1e>
 8005eb0:	6179      	str	r1, [r7, #20]
 8005eb2:	e7e7      	b.n	8005e84 <__d2b+0x46>
 8005eb4:	a801      	add	r0, sp, #4
 8005eb6:	f7ff fdda 	bl	8005a6e <__lo0bits>
 8005eba:	9b01      	ldr	r3, [sp, #4]
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	6139      	str	r1, [r7, #16]
 8005ec2:	3020      	adds	r0, #32
 8005ec4:	e7e5      	b.n	8005e92 <__d2b+0x54>
 8005ec6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005eca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005ece:	6030      	str	r0, [r6, #0]
 8005ed0:	6918      	ldr	r0, [r3, #16]
 8005ed2:	f7ff fdad 	bl	8005a30 <__hi0bits>
 8005ed6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005eda:	e7e1      	b.n	8005ea0 <__d2b+0x62>

08005edc <_calloc_r>:
 8005edc:	b538      	push	{r3, r4, r5, lr}
 8005ede:	fb02 f401 	mul.w	r4, r2, r1
 8005ee2:	4621      	mov	r1, r4
 8005ee4:	f000 f856 	bl	8005f94 <_malloc_r>
 8005ee8:	4605      	mov	r5, r0
 8005eea:	b118      	cbz	r0, 8005ef4 <_calloc_r+0x18>
 8005eec:	4622      	mov	r2, r4
 8005eee:	2100      	movs	r1, #0
 8005ef0:	f7fe fa1f 	bl	8004332 <memset>
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	bd38      	pop	{r3, r4, r5, pc}

08005ef8 <_free_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4605      	mov	r5, r0
 8005efc:	2900      	cmp	r1, #0
 8005efe:	d045      	beq.n	8005f8c <_free_r+0x94>
 8005f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f04:	1f0c      	subs	r4, r1, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	bfb8      	it	lt
 8005f0a:	18e4      	addlt	r4, r4, r3
 8005f0c:	f000 fa29 	bl	8006362 <__malloc_lock>
 8005f10:	4a1f      	ldr	r2, [pc, #124]	; (8005f90 <_free_r+0x98>)
 8005f12:	6813      	ldr	r3, [r2, #0]
 8005f14:	4610      	mov	r0, r2
 8005f16:	b933      	cbnz	r3, 8005f26 <_free_r+0x2e>
 8005f18:	6063      	str	r3, [r4, #4]
 8005f1a:	6014      	str	r4, [r2, #0]
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f22:	f000 ba1f 	b.w	8006364 <__malloc_unlock>
 8005f26:	42a3      	cmp	r3, r4
 8005f28:	d90c      	bls.n	8005f44 <_free_r+0x4c>
 8005f2a:	6821      	ldr	r1, [r4, #0]
 8005f2c:	1862      	adds	r2, r4, r1
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	bf04      	itt	eq
 8005f32:	681a      	ldreq	r2, [r3, #0]
 8005f34:	685b      	ldreq	r3, [r3, #4]
 8005f36:	6063      	str	r3, [r4, #4]
 8005f38:	bf04      	itt	eq
 8005f3a:	1852      	addeq	r2, r2, r1
 8005f3c:	6022      	streq	r2, [r4, #0]
 8005f3e:	6004      	str	r4, [r0, #0]
 8005f40:	e7ec      	b.n	8005f1c <_free_r+0x24>
 8005f42:	4613      	mov	r3, r2
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	b10a      	cbz	r2, 8005f4c <_free_r+0x54>
 8005f48:	42a2      	cmp	r2, r4
 8005f4a:	d9fa      	bls.n	8005f42 <_free_r+0x4a>
 8005f4c:	6819      	ldr	r1, [r3, #0]
 8005f4e:	1858      	adds	r0, r3, r1
 8005f50:	42a0      	cmp	r0, r4
 8005f52:	d10b      	bne.n	8005f6c <_free_r+0x74>
 8005f54:	6820      	ldr	r0, [r4, #0]
 8005f56:	4401      	add	r1, r0
 8005f58:	1858      	adds	r0, r3, r1
 8005f5a:	4282      	cmp	r2, r0
 8005f5c:	6019      	str	r1, [r3, #0]
 8005f5e:	d1dd      	bne.n	8005f1c <_free_r+0x24>
 8005f60:	6810      	ldr	r0, [r2, #0]
 8005f62:	6852      	ldr	r2, [r2, #4]
 8005f64:	605a      	str	r2, [r3, #4]
 8005f66:	4401      	add	r1, r0
 8005f68:	6019      	str	r1, [r3, #0]
 8005f6a:	e7d7      	b.n	8005f1c <_free_r+0x24>
 8005f6c:	d902      	bls.n	8005f74 <_free_r+0x7c>
 8005f6e:	230c      	movs	r3, #12
 8005f70:	602b      	str	r3, [r5, #0]
 8005f72:	e7d3      	b.n	8005f1c <_free_r+0x24>
 8005f74:	6820      	ldr	r0, [r4, #0]
 8005f76:	1821      	adds	r1, r4, r0
 8005f78:	428a      	cmp	r2, r1
 8005f7a:	bf04      	itt	eq
 8005f7c:	6811      	ldreq	r1, [r2, #0]
 8005f7e:	6852      	ldreq	r2, [r2, #4]
 8005f80:	6062      	str	r2, [r4, #4]
 8005f82:	bf04      	itt	eq
 8005f84:	1809      	addeq	r1, r1, r0
 8005f86:	6021      	streq	r1, [r4, #0]
 8005f88:	605c      	str	r4, [r3, #4]
 8005f8a:	e7c7      	b.n	8005f1c <_free_r+0x24>
 8005f8c:	bd38      	pop	{r3, r4, r5, pc}
 8005f8e:	bf00      	nop
 8005f90:	2000024c 	.word	0x2000024c

08005f94 <_malloc_r>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	1ccd      	adds	r5, r1, #3
 8005f98:	f025 0503 	bic.w	r5, r5, #3
 8005f9c:	3508      	adds	r5, #8
 8005f9e:	2d0c      	cmp	r5, #12
 8005fa0:	bf38      	it	cc
 8005fa2:	250c      	movcc	r5, #12
 8005fa4:	2d00      	cmp	r5, #0
 8005fa6:	4606      	mov	r6, r0
 8005fa8:	db01      	blt.n	8005fae <_malloc_r+0x1a>
 8005faa:	42a9      	cmp	r1, r5
 8005fac:	d903      	bls.n	8005fb6 <_malloc_r+0x22>
 8005fae:	230c      	movs	r3, #12
 8005fb0:	6033      	str	r3, [r6, #0]
 8005fb2:	2000      	movs	r0, #0
 8005fb4:	bd70      	pop	{r4, r5, r6, pc}
 8005fb6:	f000 f9d4 	bl	8006362 <__malloc_lock>
 8005fba:	4a21      	ldr	r2, [pc, #132]	; (8006040 <_malloc_r+0xac>)
 8005fbc:	6814      	ldr	r4, [r2, #0]
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	b991      	cbnz	r1, 8005fe8 <_malloc_r+0x54>
 8005fc2:	4c20      	ldr	r4, [pc, #128]	; (8006044 <_malloc_r+0xb0>)
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	b91b      	cbnz	r3, 8005fd0 <_malloc_r+0x3c>
 8005fc8:	4630      	mov	r0, r6
 8005fca:	f000 f98f 	bl	80062ec <_sbrk_r>
 8005fce:	6020      	str	r0, [r4, #0]
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	f000 f98a 	bl	80062ec <_sbrk_r>
 8005fd8:	1c43      	adds	r3, r0, #1
 8005fda:	d124      	bne.n	8006026 <_malloc_r+0x92>
 8005fdc:	230c      	movs	r3, #12
 8005fde:	6033      	str	r3, [r6, #0]
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	f000 f9bf 	bl	8006364 <__malloc_unlock>
 8005fe6:	e7e4      	b.n	8005fb2 <_malloc_r+0x1e>
 8005fe8:	680b      	ldr	r3, [r1, #0]
 8005fea:	1b5b      	subs	r3, r3, r5
 8005fec:	d418      	bmi.n	8006020 <_malloc_r+0x8c>
 8005fee:	2b0b      	cmp	r3, #11
 8005ff0:	d90f      	bls.n	8006012 <_malloc_r+0x7e>
 8005ff2:	600b      	str	r3, [r1, #0]
 8005ff4:	50cd      	str	r5, [r1, r3]
 8005ff6:	18cc      	adds	r4, r1, r3
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	f000 f9b3 	bl	8006364 <__malloc_unlock>
 8005ffe:	f104 000b 	add.w	r0, r4, #11
 8006002:	1d23      	adds	r3, r4, #4
 8006004:	f020 0007 	bic.w	r0, r0, #7
 8006008:	1ac3      	subs	r3, r0, r3
 800600a:	d0d3      	beq.n	8005fb4 <_malloc_r+0x20>
 800600c:	425a      	negs	r2, r3
 800600e:	50e2      	str	r2, [r4, r3]
 8006010:	e7d0      	b.n	8005fb4 <_malloc_r+0x20>
 8006012:	428c      	cmp	r4, r1
 8006014:	684b      	ldr	r3, [r1, #4]
 8006016:	bf16      	itet	ne
 8006018:	6063      	strne	r3, [r4, #4]
 800601a:	6013      	streq	r3, [r2, #0]
 800601c:	460c      	movne	r4, r1
 800601e:	e7eb      	b.n	8005ff8 <_malloc_r+0x64>
 8006020:	460c      	mov	r4, r1
 8006022:	6849      	ldr	r1, [r1, #4]
 8006024:	e7cc      	b.n	8005fc0 <_malloc_r+0x2c>
 8006026:	1cc4      	adds	r4, r0, #3
 8006028:	f024 0403 	bic.w	r4, r4, #3
 800602c:	42a0      	cmp	r0, r4
 800602e:	d005      	beq.n	800603c <_malloc_r+0xa8>
 8006030:	1a21      	subs	r1, r4, r0
 8006032:	4630      	mov	r0, r6
 8006034:	f000 f95a 	bl	80062ec <_sbrk_r>
 8006038:	3001      	adds	r0, #1
 800603a:	d0cf      	beq.n	8005fdc <_malloc_r+0x48>
 800603c:	6025      	str	r5, [r4, #0]
 800603e:	e7db      	b.n	8005ff8 <_malloc_r+0x64>
 8006040:	2000024c 	.word	0x2000024c
 8006044:	20000250 	.word	0x20000250

08006048 <__ssputs_r>:
 8006048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800604c:	688e      	ldr	r6, [r1, #8]
 800604e:	429e      	cmp	r6, r3
 8006050:	4682      	mov	sl, r0
 8006052:	460c      	mov	r4, r1
 8006054:	4690      	mov	r8, r2
 8006056:	4699      	mov	r9, r3
 8006058:	d837      	bhi.n	80060ca <__ssputs_r+0x82>
 800605a:	898a      	ldrh	r2, [r1, #12]
 800605c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006060:	d031      	beq.n	80060c6 <__ssputs_r+0x7e>
 8006062:	6825      	ldr	r5, [r4, #0]
 8006064:	6909      	ldr	r1, [r1, #16]
 8006066:	1a6f      	subs	r7, r5, r1
 8006068:	6965      	ldr	r5, [r4, #20]
 800606a:	2302      	movs	r3, #2
 800606c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006070:	fb95 f5f3 	sdiv	r5, r5, r3
 8006074:	f109 0301 	add.w	r3, r9, #1
 8006078:	443b      	add	r3, r7
 800607a:	429d      	cmp	r5, r3
 800607c:	bf38      	it	cc
 800607e:	461d      	movcc	r5, r3
 8006080:	0553      	lsls	r3, r2, #21
 8006082:	d530      	bpl.n	80060e6 <__ssputs_r+0x9e>
 8006084:	4629      	mov	r1, r5
 8006086:	f7ff ff85 	bl	8005f94 <_malloc_r>
 800608a:	4606      	mov	r6, r0
 800608c:	b950      	cbnz	r0, 80060a4 <__ssputs_r+0x5c>
 800608e:	230c      	movs	r3, #12
 8006090:	f8ca 3000 	str.w	r3, [sl]
 8006094:	89a3      	ldrh	r3, [r4, #12]
 8006096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800609a:	81a3      	strh	r3, [r4, #12]
 800609c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a4:	463a      	mov	r2, r7
 80060a6:	6921      	ldr	r1, [r4, #16]
 80060a8:	f7fe f938 	bl	800431c <memcpy>
 80060ac:	89a3      	ldrh	r3, [r4, #12]
 80060ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b6:	81a3      	strh	r3, [r4, #12]
 80060b8:	6126      	str	r6, [r4, #16]
 80060ba:	6165      	str	r5, [r4, #20]
 80060bc:	443e      	add	r6, r7
 80060be:	1bed      	subs	r5, r5, r7
 80060c0:	6026      	str	r6, [r4, #0]
 80060c2:	60a5      	str	r5, [r4, #8]
 80060c4:	464e      	mov	r6, r9
 80060c6:	454e      	cmp	r6, r9
 80060c8:	d900      	bls.n	80060cc <__ssputs_r+0x84>
 80060ca:	464e      	mov	r6, r9
 80060cc:	4632      	mov	r2, r6
 80060ce:	4641      	mov	r1, r8
 80060d0:	6820      	ldr	r0, [r4, #0]
 80060d2:	f000 f92d 	bl	8006330 <memmove>
 80060d6:	68a3      	ldr	r3, [r4, #8]
 80060d8:	1b9b      	subs	r3, r3, r6
 80060da:	60a3      	str	r3, [r4, #8]
 80060dc:	6823      	ldr	r3, [r4, #0]
 80060de:	441e      	add	r6, r3
 80060e0:	6026      	str	r6, [r4, #0]
 80060e2:	2000      	movs	r0, #0
 80060e4:	e7dc      	b.n	80060a0 <__ssputs_r+0x58>
 80060e6:	462a      	mov	r2, r5
 80060e8:	f000 f93d 	bl	8006366 <_realloc_r>
 80060ec:	4606      	mov	r6, r0
 80060ee:	2800      	cmp	r0, #0
 80060f0:	d1e2      	bne.n	80060b8 <__ssputs_r+0x70>
 80060f2:	6921      	ldr	r1, [r4, #16]
 80060f4:	4650      	mov	r0, sl
 80060f6:	f7ff feff 	bl	8005ef8 <_free_r>
 80060fa:	e7c8      	b.n	800608e <__ssputs_r+0x46>

080060fc <_svfiprintf_r>:
 80060fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006100:	461d      	mov	r5, r3
 8006102:	898b      	ldrh	r3, [r1, #12]
 8006104:	061f      	lsls	r7, r3, #24
 8006106:	b09d      	sub	sp, #116	; 0x74
 8006108:	4680      	mov	r8, r0
 800610a:	460c      	mov	r4, r1
 800610c:	4616      	mov	r6, r2
 800610e:	d50f      	bpl.n	8006130 <_svfiprintf_r+0x34>
 8006110:	690b      	ldr	r3, [r1, #16]
 8006112:	b96b      	cbnz	r3, 8006130 <_svfiprintf_r+0x34>
 8006114:	2140      	movs	r1, #64	; 0x40
 8006116:	f7ff ff3d 	bl	8005f94 <_malloc_r>
 800611a:	6020      	str	r0, [r4, #0]
 800611c:	6120      	str	r0, [r4, #16]
 800611e:	b928      	cbnz	r0, 800612c <_svfiprintf_r+0x30>
 8006120:	230c      	movs	r3, #12
 8006122:	f8c8 3000 	str.w	r3, [r8]
 8006126:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800612a:	e0c8      	b.n	80062be <_svfiprintf_r+0x1c2>
 800612c:	2340      	movs	r3, #64	; 0x40
 800612e:	6163      	str	r3, [r4, #20]
 8006130:	2300      	movs	r3, #0
 8006132:	9309      	str	r3, [sp, #36]	; 0x24
 8006134:	2320      	movs	r3, #32
 8006136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800613a:	2330      	movs	r3, #48	; 0x30
 800613c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006140:	9503      	str	r5, [sp, #12]
 8006142:	f04f 0b01 	mov.w	fp, #1
 8006146:	4637      	mov	r7, r6
 8006148:	463d      	mov	r5, r7
 800614a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800614e:	b10b      	cbz	r3, 8006154 <_svfiprintf_r+0x58>
 8006150:	2b25      	cmp	r3, #37	; 0x25
 8006152:	d13e      	bne.n	80061d2 <_svfiprintf_r+0xd6>
 8006154:	ebb7 0a06 	subs.w	sl, r7, r6
 8006158:	d00b      	beq.n	8006172 <_svfiprintf_r+0x76>
 800615a:	4653      	mov	r3, sl
 800615c:	4632      	mov	r2, r6
 800615e:	4621      	mov	r1, r4
 8006160:	4640      	mov	r0, r8
 8006162:	f7ff ff71 	bl	8006048 <__ssputs_r>
 8006166:	3001      	adds	r0, #1
 8006168:	f000 80a4 	beq.w	80062b4 <_svfiprintf_r+0x1b8>
 800616c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800616e:	4453      	add	r3, sl
 8006170:	9309      	str	r3, [sp, #36]	; 0x24
 8006172:	783b      	ldrb	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 809d 	beq.w	80062b4 <_svfiprintf_r+0x1b8>
 800617a:	2300      	movs	r3, #0
 800617c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006184:	9304      	str	r3, [sp, #16]
 8006186:	9307      	str	r3, [sp, #28]
 8006188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800618c:	931a      	str	r3, [sp, #104]	; 0x68
 800618e:	462f      	mov	r7, r5
 8006190:	2205      	movs	r2, #5
 8006192:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006196:	4850      	ldr	r0, [pc, #320]	; (80062d8 <_svfiprintf_r+0x1dc>)
 8006198:	f7fa f82a 	bl	80001f0 <memchr>
 800619c:	9b04      	ldr	r3, [sp, #16]
 800619e:	b9d0      	cbnz	r0, 80061d6 <_svfiprintf_r+0xda>
 80061a0:	06d9      	lsls	r1, r3, #27
 80061a2:	bf44      	itt	mi
 80061a4:	2220      	movmi	r2, #32
 80061a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80061aa:	071a      	lsls	r2, r3, #28
 80061ac:	bf44      	itt	mi
 80061ae:	222b      	movmi	r2, #43	; 0x2b
 80061b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80061b4:	782a      	ldrb	r2, [r5, #0]
 80061b6:	2a2a      	cmp	r2, #42	; 0x2a
 80061b8:	d015      	beq.n	80061e6 <_svfiprintf_r+0xea>
 80061ba:	9a07      	ldr	r2, [sp, #28]
 80061bc:	462f      	mov	r7, r5
 80061be:	2000      	movs	r0, #0
 80061c0:	250a      	movs	r5, #10
 80061c2:	4639      	mov	r1, r7
 80061c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061c8:	3b30      	subs	r3, #48	; 0x30
 80061ca:	2b09      	cmp	r3, #9
 80061cc:	d94d      	bls.n	800626a <_svfiprintf_r+0x16e>
 80061ce:	b1b8      	cbz	r0, 8006200 <_svfiprintf_r+0x104>
 80061d0:	e00f      	b.n	80061f2 <_svfiprintf_r+0xf6>
 80061d2:	462f      	mov	r7, r5
 80061d4:	e7b8      	b.n	8006148 <_svfiprintf_r+0x4c>
 80061d6:	4a40      	ldr	r2, [pc, #256]	; (80062d8 <_svfiprintf_r+0x1dc>)
 80061d8:	1a80      	subs	r0, r0, r2
 80061da:	fa0b f000 	lsl.w	r0, fp, r0
 80061de:	4318      	orrs	r0, r3
 80061e0:	9004      	str	r0, [sp, #16]
 80061e2:	463d      	mov	r5, r7
 80061e4:	e7d3      	b.n	800618e <_svfiprintf_r+0x92>
 80061e6:	9a03      	ldr	r2, [sp, #12]
 80061e8:	1d11      	adds	r1, r2, #4
 80061ea:	6812      	ldr	r2, [r2, #0]
 80061ec:	9103      	str	r1, [sp, #12]
 80061ee:	2a00      	cmp	r2, #0
 80061f0:	db01      	blt.n	80061f6 <_svfiprintf_r+0xfa>
 80061f2:	9207      	str	r2, [sp, #28]
 80061f4:	e004      	b.n	8006200 <_svfiprintf_r+0x104>
 80061f6:	4252      	negs	r2, r2
 80061f8:	f043 0302 	orr.w	r3, r3, #2
 80061fc:	9207      	str	r2, [sp, #28]
 80061fe:	9304      	str	r3, [sp, #16]
 8006200:	783b      	ldrb	r3, [r7, #0]
 8006202:	2b2e      	cmp	r3, #46	; 0x2e
 8006204:	d10c      	bne.n	8006220 <_svfiprintf_r+0x124>
 8006206:	787b      	ldrb	r3, [r7, #1]
 8006208:	2b2a      	cmp	r3, #42	; 0x2a
 800620a:	d133      	bne.n	8006274 <_svfiprintf_r+0x178>
 800620c:	9b03      	ldr	r3, [sp, #12]
 800620e:	1d1a      	adds	r2, r3, #4
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	9203      	str	r2, [sp, #12]
 8006214:	2b00      	cmp	r3, #0
 8006216:	bfb8      	it	lt
 8006218:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800621c:	3702      	adds	r7, #2
 800621e:	9305      	str	r3, [sp, #20]
 8006220:	4d2e      	ldr	r5, [pc, #184]	; (80062dc <_svfiprintf_r+0x1e0>)
 8006222:	7839      	ldrb	r1, [r7, #0]
 8006224:	2203      	movs	r2, #3
 8006226:	4628      	mov	r0, r5
 8006228:	f7f9 ffe2 	bl	80001f0 <memchr>
 800622c:	b138      	cbz	r0, 800623e <_svfiprintf_r+0x142>
 800622e:	2340      	movs	r3, #64	; 0x40
 8006230:	1b40      	subs	r0, r0, r5
 8006232:	fa03 f000 	lsl.w	r0, r3, r0
 8006236:	9b04      	ldr	r3, [sp, #16]
 8006238:	4303      	orrs	r3, r0
 800623a:	3701      	adds	r7, #1
 800623c:	9304      	str	r3, [sp, #16]
 800623e:	7839      	ldrb	r1, [r7, #0]
 8006240:	4827      	ldr	r0, [pc, #156]	; (80062e0 <_svfiprintf_r+0x1e4>)
 8006242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006246:	2206      	movs	r2, #6
 8006248:	1c7e      	adds	r6, r7, #1
 800624a:	f7f9 ffd1 	bl	80001f0 <memchr>
 800624e:	2800      	cmp	r0, #0
 8006250:	d038      	beq.n	80062c4 <_svfiprintf_r+0x1c8>
 8006252:	4b24      	ldr	r3, [pc, #144]	; (80062e4 <_svfiprintf_r+0x1e8>)
 8006254:	bb13      	cbnz	r3, 800629c <_svfiprintf_r+0x1a0>
 8006256:	9b03      	ldr	r3, [sp, #12]
 8006258:	3307      	adds	r3, #7
 800625a:	f023 0307 	bic.w	r3, r3, #7
 800625e:	3308      	adds	r3, #8
 8006260:	9303      	str	r3, [sp, #12]
 8006262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006264:	444b      	add	r3, r9
 8006266:	9309      	str	r3, [sp, #36]	; 0x24
 8006268:	e76d      	b.n	8006146 <_svfiprintf_r+0x4a>
 800626a:	fb05 3202 	mla	r2, r5, r2, r3
 800626e:	2001      	movs	r0, #1
 8006270:	460f      	mov	r7, r1
 8006272:	e7a6      	b.n	80061c2 <_svfiprintf_r+0xc6>
 8006274:	2300      	movs	r3, #0
 8006276:	3701      	adds	r7, #1
 8006278:	9305      	str	r3, [sp, #20]
 800627a:	4619      	mov	r1, r3
 800627c:	250a      	movs	r5, #10
 800627e:	4638      	mov	r0, r7
 8006280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006284:	3a30      	subs	r2, #48	; 0x30
 8006286:	2a09      	cmp	r2, #9
 8006288:	d903      	bls.n	8006292 <_svfiprintf_r+0x196>
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0c8      	beq.n	8006220 <_svfiprintf_r+0x124>
 800628e:	9105      	str	r1, [sp, #20]
 8006290:	e7c6      	b.n	8006220 <_svfiprintf_r+0x124>
 8006292:	fb05 2101 	mla	r1, r5, r1, r2
 8006296:	2301      	movs	r3, #1
 8006298:	4607      	mov	r7, r0
 800629a:	e7f0      	b.n	800627e <_svfiprintf_r+0x182>
 800629c:	ab03      	add	r3, sp, #12
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	4622      	mov	r2, r4
 80062a2:	4b11      	ldr	r3, [pc, #68]	; (80062e8 <_svfiprintf_r+0x1ec>)
 80062a4:	a904      	add	r1, sp, #16
 80062a6:	4640      	mov	r0, r8
 80062a8:	f7fe f8e0 	bl	800446c <_printf_float>
 80062ac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80062b0:	4681      	mov	r9, r0
 80062b2:	d1d6      	bne.n	8006262 <_svfiprintf_r+0x166>
 80062b4:	89a3      	ldrh	r3, [r4, #12]
 80062b6:	065b      	lsls	r3, r3, #25
 80062b8:	f53f af35 	bmi.w	8006126 <_svfiprintf_r+0x2a>
 80062bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062be:	b01d      	add	sp, #116	; 0x74
 80062c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c4:	ab03      	add	r3, sp, #12
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	4622      	mov	r2, r4
 80062ca:	4b07      	ldr	r3, [pc, #28]	; (80062e8 <_svfiprintf_r+0x1ec>)
 80062cc:	a904      	add	r1, sp, #16
 80062ce:	4640      	mov	r0, r8
 80062d0:	f7fe fb82 	bl	80049d8 <_printf_i>
 80062d4:	e7ea      	b.n	80062ac <_svfiprintf_r+0x1b0>
 80062d6:	bf00      	nop
 80062d8:	0800658c 	.word	0x0800658c
 80062dc:	08006592 	.word	0x08006592
 80062e0:	08006596 	.word	0x08006596
 80062e4:	0800446d 	.word	0x0800446d
 80062e8:	08006049 	.word	0x08006049

080062ec <_sbrk_r>:
 80062ec:	b538      	push	{r3, r4, r5, lr}
 80062ee:	4c06      	ldr	r4, [pc, #24]	; (8006308 <_sbrk_r+0x1c>)
 80062f0:	2300      	movs	r3, #0
 80062f2:	4605      	mov	r5, r0
 80062f4:	4608      	mov	r0, r1
 80062f6:	6023      	str	r3, [r4, #0]
 80062f8:	f7fb f806 	bl	8001308 <_sbrk>
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	d102      	bne.n	8006306 <_sbrk_r+0x1a>
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	b103      	cbz	r3, 8006306 <_sbrk_r+0x1a>
 8006304:	602b      	str	r3, [r5, #0]
 8006306:	bd38      	pop	{r3, r4, r5, pc}
 8006308:	20000378 	.word	0x20000378

0800630c <__ascii_mbtowc>:
 800630c:	b082      	sub	sp, #8
 800630e:	b901      	cbnz	r1, 8006312 <__ascii_mbtowc+0x6>
 8006310:	a901      	add	r1, sp, #4
 8006312:	b142      	cbz	r2, 8006326 <__ascii_mbtowc+0x1a>
 8006314:	b14b      	cbz	r3, 800632a <__ascii_mbtowc+0x1e>
 8006316:	7813      	ldrb	r3, [r2, #0]
 8006318:	600b      	str	r3, [r1, #0]
 800631a:	7812      	ldrb	r2, [r2, #0]
 800631c:	1c10      	adds	r0, r2, #0
 800631e:	bf18      	it	ne
 8006320:	2001      	movne	r0, #1
 8006322:	b002      	add	sp, #8
 8006324:	4770      	bx	lr
 8006326:	4610      	mov	r0, r2
 8006328:	e7fb      	b.n	8006322 <__ascii_mbtowc+0x16>
 800632a:	f06f 0001 	mvn.w	r0, #1
 800632e:	e7f8      	b.n	8006322 <__ascii_mbtowc+0x16>

08006330 <memmove>:
 8006330:	4288      	cmp	r0, r1
 8006332:	b510      	push	{r4, lr}
 8006334:	eb01 0302 	add.w	r3, r1, r2
 8006338:	d807      	bhi.n	800634a <memmove+0x1a>
 800633a:	1e42      	subs	r2, r0, #1
 800633c:	4299      	cmp	r1, r3
 800633e:	d00a      	beq.n	8006356 <memmove+0x26>
 8006340:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006344:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006348:	e7f8      	b.n	800633c <memmove+0xc>
 800634a:	4283      	cmp	r3, r0
 800634c:	d9f5      	bls.n	800633a <memmove+0xa>
 800634e:	1881      	adds	r1, r0, r2
 8006350:	1ad2      	subs	r2, r2, r3
 8006352:	42d3      	cmn	r3, r2
 8006354:	d100      	bne.n	8006358 <memmove+0x28>
 8006356:	bd10      	pop	{r4, pc}
 8006358:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800635c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006360:	e7f7      	b.n	8006352 <memmove+0x22>

08006362 <__malloc_lock>:
 8006362:	4770      	bx	lr

08006364 <__malloc_unlock>:
 8006364:	4770      	bx	lr

08006366 <_realloc_r>:
 8006366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006368:	4607      	mov	r7, r0
 800636a:	4614      	mov	r4, r2
 800636c:	460e      	mov	r6, r1
 800636e:	b921      	cbnz	r1, 800637a <_realloc_r+0x14>
 8006370:	4611      	mov	r1, r2
 8006372:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006376:	f7ff be0d 	b.w	8005f94 <_malloc_r>
 800637a:	b922      	cbnz	r2, 8006386 <_realloc_r+0x20>
 800637c:	f7ff fdbc 	bl	8005ef8 <_free_r>
 8006380:	4625      	mov	r5, r4
 8006382:	4628      	mov	r0, r5
 8006384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006386:	f000 f821 	bl	80063cc <_malloc_usable_size_r>
 800638a:	42a0      	cmp	r0, r4
 800638c:	d20f      	bcs.n	80063ae <_realloc_r+0x48>
 800638e:	4621      	mov	r1, r4
 8006390:	4638      	mov	r0, r7
 8006392:	f7ff fdff 	bl	8005f94 <_malloc_r>
 8006396:	4605      	mov	r5, r0
 8006398:	2800      	cmp	r0, #0
 800639a:	d0f2      	beq.n	8006382 <_realloc_r+0x1c>
 800639c:	4631      	mov	r1, r6
 800639e:	4622      	mov	r2, r4
 80063a0:	f7fd ffbc 	bl	800431c <memcpy>
 80063a4:	4631      	mov	r1, r6
 80063a6:	4638      	mov	r0, r7
 80063a8:	f7ff fda6 	bl	8005ef8 <_free_r>
 80063ac:	e7e9      	b.n	8006382 <_realloc_r+0x1c>
 80063ae:	4635      	mov	r5, r6
 80063b0:	e7e7      	b.n	8006382 <_realloc_r+0x1c>

080063b2 <__ascii_wctomb>:
 80063b2:	b149      	cbz	r1, 80063c8 <__ascii_wctomb+0x16>
 80063b4:	2aff      	cmp	r2, #255	; 0xff
 80063b6:	bf85      	ittet	hi
 80063b8:	238a      	movhi	r3, #138	; 0x8a
 80063ba:	6003      	strhi	r3, [r0, #0]
 80063bc:	700a      	strbls	r2, [r1, #0]
 80063be:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80063c2:	bf98      	it	ls
 80063c4:	2001      	movls	r0, #1
 80063c6:	4770      	bx	lr
 80063c8:	4608      	mov	r0, r1
 80063ca:	4770      	bx	lr

080063cc <_malloc_usable_size_r>:
 80063cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063d0:	1f18      	subs	r0, r3, #4
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	bfbc      	itt	lt
 80063d6:	580b      	ldrlt	r3, [r1, r0]
 80063d8:	18c0      	addlt	r0, r0, r3
 80063da:	4770      	bx	lr

080063dc <_init>:
 80063dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063de:	bf00      	nop
 80063e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e2:	bc08      	pop	{r3}
 80063e4:	469e      	mov	lr, r3
 80063e6:	4770      	bx	lr

080063e8 <_fini>:
 80063e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ea:	bf00      	nop
 80063ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ee:	bc08      	pop	{r3}
 80063f0:	469e      	mov	lr, r3
 80063f2:	4770      	bx	lr
